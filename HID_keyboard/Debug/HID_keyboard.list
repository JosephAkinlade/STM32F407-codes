
HID_keyboard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006af4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08006c7c  08006c7c  00016c7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006cfc  08006cfc  000201bc  2**0
                  CONTENTS
  4 .ARM          00000008  08006cfc  08006cfc  00016cfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006d04  08006d04  000201bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d04  08006d04  00016d04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006d08  08006d08  00016d08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001bc  20000000  08006d0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000918  200001bc  08006ec8  000201bc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000ad4  08006ec8  00020ad4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201bc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000124b3  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002c65  00000000  00000000  0003269f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b38  00000000  00000000  00035308  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000009d0  00000000  00000000  00035e40  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000233e1  00000000  00000000  00036810  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d12e  00000000  00000000  00059bf1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c426e  00000000  00000000  00066d1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012af8d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002cb4  00000000  00000000  0012b008  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001bc 	.word	0x200001bc
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006c64 	.word	0x08006c64

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001c0 	.word	0x200001c0
 80001c4:	08006c64 	.word	0x08006c64

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <Button_Init>:

volatile uint8_t Button_debounced = 0;
volatile uint8_t Timer_counting = 0;
volatile uint8_t Button_pressTimeElapsed = 0;

void Button_Init(void){
 80004c8:	b480      	push	{r7}
 80004ca:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= (1<<1) | (1<<2) | (1<<3); //Enables clock for GPIOB AND GPIOC
 80004cc:	4b18      	ldr	r3, [pc, #96]	; (8000530 <Button_Init+0x68>)
 80004ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004d0:	4a17      	ldr	r2, [pc, #92]	; (8000530 <Button_Init+0x68>)
 80004d2:	f043 030e 	orr.w	r3, r3, #14
 80004d6:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOB->MODER &= ~((3UL<<8) | (3UL<<6) | (3UL<<2) | (3UL<<0)); //sets PB4,PB3,PB1,PB0 as input
 80004d8:	4b16      	ldr	r3, [pc, #88]	; (8000534 <Button_Init+0x6c>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	4a15      	ldr	r2, [pc, #84]	; (8000534 <Button_Init+0x6c>)
 80004de:	f423 7373 	bic.w	r3, r3, #972	; 0x3cc
 80004e2:	f023 0303 	bic.w	r3, r3, #3
 80004e6:	6013      	str	r3, [r2, #0]
	GPIOB->PUPDR |= (1<<8) | (1<<6) | (1<<2) | (1<<0); //Enables PULL-UP resistor for PB4,PB3,PB1,PB0
 80004e8:	4b12      	ldr	r3, [pc, #72]	; (8000534 <Button_Init+0x6c>)
 80004ea:	68db      	ldr	r3, [r3, #12]
 80004ec:	4a11      	ldr	r2, [pc, #68]	; (8000534 <Button_Init+0x6c>)
 80004ee:	f443 73a2 	orr.w	r3, r3, #324	; 0x144
 80004f2:	f043 0301 	orr.w	r3, r3, #1
 80004f6:	60d3      	str	r3, [r2, #12]
	GPIOC->MODER &= ~((3UL<<2) | (3UL<<4) | (3UL<<0) | (3UL<<6) | (3UL<<8) | (3UL<<10));		//Sets PC1,PC2,PC0,PC3,PC4,PC5 as input
 80004f8:	4b0f      	ldr	r3, [pc, #60]	; (8000538 <Button_Init+0x70>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	4a0e      	ldr	r2, [pc, #56]	; (8000538 <Button_Init+0x70>)
 80004fe:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8000502:	f023 030f 	bic.w	r3, r3, #15
 8000506:	6013      	str	r3, [r2, #0]
	GPIOC->PUPDR |= (1<<2) | (1<<4) | (1<<0) | (1<<6) | (1<<8);		//Enables PULL-UP resistor for PC1,PC2,PC0,PC3,PC4
 8000508:	4b0b      	ldr	r3, [pc, #44]	; (8000538 <Button_Init+0x70>)
 800050a:	68db      	ldr	r3, [r3, #12]
 800050c:	4a0a      	ldr	r2, [pc, #40]	; (8000538 <Button_Init+0x70>)
 800050e:	f443 73aa 	orr.w	r3, r3, #340	; 0x154
 8000512:	f043 0301 	orr.w	r3, r3, #1
 8000516:	60d3      	str	r3, [r2, #12]
	GPIOD->MODER |= (1<<26) | (1<<24) | (1<<28);
 8000518:	4b08      	ldr	r3, [pc, #32]	; (800053c <Button_Init+0x74>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	4a07      	ldr	r2, [pc, #28]	; (800053c <Button_Init+0x74>)
 800051e:	f043 53a8 	orr.w	r3, r3, #352321536	; 0x15000000
 8000522:	6013      	str	r3, [r2, #0]

}
 8000524:	bf00      	nop
 8000526:	46bd      	mov	sp, r7
 8000528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop
 8000530:	40023800 	.word	0x40023800
 8000534:	40020400 	.word	0x40020400
 8000538:	40020800 	.word	0x40020800
 800053c:	40020c00 	.word	0x40020c00

08000540 <Button_Debounce>:

bool Button_Debounce(uint8_t buttonStatus){
 8000540:	b480      	push	{r7}
 8000542:	b083      	sub	sp, #12
 8000544:	af00      	add	r7, sp, #0
 8000546:	4603      	mov	r3, r0
 8000548:	71fb      	strb	r3, [r7, #7]
	if(buttonStatus){
 800054a:	79fb      	ldrb	r3, [r7, #7]
 800054c:	2b00      	cmp	r3, #0
 800054e:	d013      	beq.n	8000578 <Button_Debounce+0x38>
		Button_debounced = 0;
 8000550:	4b0d      	ldr	r3, [pc, #52]	; (8000588 <Button_Debounce+0x48>)
 8000552:	2200      	movs	r2, #0
 8000554:	701a      	strb	r2, [r3, #0]
		TIM3->CR1 |= 1;		//Start TIMER3
 8000556:	4b0d      	ldr	r3, [pc, #52]	; (800058c <Button_Debounce+0x4c>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	4a0c      	ldr	r2, [pc, #48]	; (800058c <Button_Debounce+0x4c>)
 800055c:	f043 0301 	orr.w	r3, r3, #1
 8000560:	6013      	str	r3, [r2, #0]
		while(!(Button_debounced)){/*wait for 45ms*/}
 8000562:	bf00      	nop
 8000564:	4b08      	ldr	r3, [pc, #32]	; (8000588 <Button_Debounce+0x48>)
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	b2db      	uxtb	r3, r3
 800056a:	2b00      	cmp	r3, #0
 800056c:	d0fa      	beq.n	8000564 <Button_Debounce+0x24>
		if(buttonStatus){
 800056e:	79fb      	ldrb	r3, [r7, #7]
 8000570:	2b00      	cmp	r3, #0
 8000572:	d001      	beq.n	8000578 <Button_Debounce+0x38>
			return true;
 8000574:	2301      	movs	r3, #1
 8000576:	e000      	b.n	800057a <Button_Debounce+0x3a>
		}

	}
	return false;
 8000578:	2300      	movs	r3, #0

}
 800057a:	4618      	mov	r0, r3
 800057c:	370c      	adds	r7, #12
 800057e:	46bd      	mov	sp, r7
 8000580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop
 8000588:	200001d8 	.word	0x200001d8
 800058c:	40000400 	.word	0x40000400

08000590 <Button_Poll>:

void Button_Poll(Button_t *button, uint16_t *p_buttonRegister){
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
 8000598:	6039      	str	r1, [r7, #0]
	if(Button_Debounce(button->pressed) && !button->prevPressed)
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	781b      	ldrb	r3, [r3, #0]
 800059e:	4618      	mov	r0, r3
 80005a0:	f7ff ffce 	bl	8000540 <Button_Debounce>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d025      	beq.n	80005f6 <Button_Poll+0x66>
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	785b      	ldrb	r3, [r3, #1]
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d121      	bne.n	80005f6 <Button_Poll+0x66>
		{
			if(!Timer_counting)
 80005b2:	4b1c      	ldr	r3, [pc, #112]	; (8000624 <Button_Poll+0x94>)
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	b2db      	uxtb	r3, r3
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d10a      	bne.n	80005d2 <Button_Poll+0x42>
			{
				TIM2->CR1 |= 1;		//enables timer 2
 80005bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80005c6:	f043 0301 	orr.w	r3, r3, #1
 80005ca:	6013      	str	r3, [r2, #0]
				Timer_counting = 1;
 80005cc:	4b15      	ldr	r3, [pc, #84]	; (8000624 <Button_Poll+0x94>)
 80005ce:	2201      	movs	r2, #1
 80005d0:	701a      	strb	r2, [r3, #0]
			}
			*p_buttonRegister |= (1 << button->bitLocation);
 80005d2:	683b      	ldr	r3, [r7, #0]
 80005d4:	881b      	ldrh	r3, [r3, #0]
 80005d6:	b21a      	sxth	r2, r3
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	789b      	ldrb	r3, [r3, #2]
 80005dc:	4619      	mov	r1, r3
 80005de:	2301      	movs	r3, #1
 80005e0:	408b      	lsls	r3, r1
 80005e2:	b21b      	sxth	r3, r3
 80005e4:	4313      	orrs	r3, r2
 80005e6:	b21b      	sxth	r3, r3
 80005e8:	b29a      	uxth	r2, r3
 80005ea:	683b      	ldr	r3, [r7, #0]
 80005ec:	801a      	strh	r2, [r3, #0]
			button->prevPressed = 1;
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	2201      	movs	r2, #1
 80005f2:	705a      	strb	r2, [r3, #1]
		}
		else if(!Button_Debounce(button->pressed) && button->prevPressed)
			button->prevPressed = 0;

}
 80005f4:	e011      	b.n	800061a <Button_Poll+0x8a>
		else if(!Button_Debounce(button->pressed) && button->prevPressed)
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	781b      	ldrb	r3, [r3, #0]
 80005fa:	4618      	mov	r0, r3
 80005fc:	f7ff ffa0 	bl	8000540 <Button_Debounce>
 8000600:	4603      	mov	r3, r0
 8000602:	f083 0301 	eor.w	r3, r3, #1
 8000606:	b2db      	uxtb	r3, r3
 8000608:	2b00      	cmp	r3, #0
 800060a:	d006      	beq.n	800061a <Button_Poll+0x8a>
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	785b      	ldrb	r3, [r3, #1]
 8000610:	2b00      	cmp	r3, #0
 8000612:	d002      	beq.n	800061a <Button_Poll+0x8a>
			button->prevPressed = 0;
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	2200      	movs	r2, #0
 8000618:	705a      	strb	r2, [r3, #1]
}
 800061a:	bf00      	nop
 800061c:	3708      	adds	r7, #8
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	200001d9 	.word	0x200001d9

08000628 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void){
 8000628:	b480      	push	{r7}
 800062a:	af00      	add	r7, sp, #0
	TIM2->SR = 0;		//Clears interrupt flag
 800062c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000630:	2200      	movs	r2, #0
 8000632:	611a      	str	r2, [r3, #16]
	Button_pressTimeElapsed = 1;
 8000634:	4b05      	ldr	r3, [pc, #20]	; (800064c <TIM2_IRQHandler+0x24>)
 8000636:	2201      	movs	r2, #1
 8000638:	701a      	strb	r2, [r3, #0]
	Timer_counting = 0;
 800063a:	4b05      	ldr	r3, [pc, #20]	; (8000650 <TIM2_IRQHandler+0x28>)
 800063c:	2200      	movs	r2, #0
 800063e:	701a      	strb	r2, [r3, #0]
}
 8000640:	bf00      	nop
 8000642:	46bd      	mov	sp, r7
 8000644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop
 800064c:	200001da 	.word	0x200001da
 8000650:	200001d9 	.word	0x200001d9

08000654 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void){
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0
	TIM3->SR = 0;		//clears interrupt flag
 8000658:	4b05      	ldr	r3, [pc, #20]	; (8000670 <TIM3_IRQHandler+0x1c>)
 800065a:	2200      	movs	r2, #0
 800065c:	611a      	str	r2, [r3, #16]
	Button_debounced = 1;
 800065e:	4b05      	ldr	r3, [pc, #20]	; (8000674 <TIM3_IRQHandler+0x20>)
 8000660:	2201      	movs	r2, #1
 8000662:	701a      	strb	r2, [r3, #0]
}
 8000664:	bf00      	nop
 8000666:	46bd      	mov	sp, r7
 8000668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop
 8000670:	40000400 	.word	0x40000400
 8000674:	200001d8 	.word	0x200001d8

08000678 <TIMER2_Init>:
#include "Timer.h"
#include "stm32f4xx.h"


void TIMER2_Init(void){//100ms for registering multiple button presses
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0

	RCC->APB1ENR |= 1;	//enable clock for timer 2
 800067c:	4b10      	ldr	r3, [pc, #64]	; (80006c0 <TIMER2_Init+0x48>)
 800067e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000680:	4a0f      	ldr	r2, [pc, #60]	; (80006c0 <TIMER2_Init+0x48>)
 8000682:	f043 0301 	orr.w	r3, r3, #1
 8000686:	6413      	str	r3, [r2, #64]	; 0x40
	TIM2->PSC = 1600-1;
 8000688:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800068c:	f240 623f 	movw	r2, #1599	; 0x63f
 8000690:	629a      	str	r2, [r3, #40]	; 0x28
	TIM2->ARR = 1200-1;		//Time-base of 100ms
 8000692:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000696:	f240 42af 	movw	r2, #1199	; 0x4af
 800069a:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2->CR1 |= (1 << 3);		//one-shot timer mode
 800069c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80006a6:	f043 0308 	orr.w	r3, r3, #8
 80006aa:	6013      	str	r3, [r2, #0]
	TIM2->DIER = 1;				//ENABLE Update interrupt
 80006ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80006b0:	2201      	movs	r2, #1
 80006b2:	60da      	str	r2, [r3, #12]

}
 80006b4:	bf00      	nop
 80006b6:	46bd      	mov	sp, r7
 80006b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006bc:	4770      	bx	lr
 80006be:	bf00      	nop
 80006c0:	40023800 	.word	0x40023800

080006c4 <TIMER3_Init>:

void TIMER3_Init(void){
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0

		RCC->APB1ENR |= (1 << 1);	//ENABLE clock for timer 3
 80006c8:	4b0d      	ldr	r3, [pc, #52]	; (8000700 <TIMER3_Init+0x3c>)
 80006ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006cc:	4a0c      	ldr	r2, [pc, #48]	; (8000700 <TIMER3_Init+0x3c>)
 80006ce:	f043 0302 	orr.w	r3, r3, #2
 80006d2:	6413      	str	r3, [r2, #64]	; 0x40
		TIM3->PSC = 1600-1;			//pre-scaler of 1600
 80006d4:	4b0b      	ldr	r3, [pc, #44]	; (8000704 <TIMER3_Init+0x40>)
 80006d6:	f240 623f 	movw	r2, #1599	; 0x63f
 80006da:	629a      	str	r2, [r3, #40]	; 0x28
		TIM3->ARR = 64;				//Auto-reload register; Timebase of 6.4ms
 80006dc:	4b09      	ldr	r3, [pc, #36]	; (8000704 <TIMER3_Init+0x40>)
 80006de:	2240      	movs	r2, #64	; 0x40
 80006e0:	62da      	str	r2, [r3, #44]	; 0x2c
		TIM3->CR1 |= (1 << 3);			//one-shot timer mode
 80006e2:	4b08      	ldr	r3, [pc, #32]	; (8000704 <TIMER3_Init+0x40>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	4a07      	ldr	r2, [pc, #28]	; (8000704 <TIMER3_Init+0x40>)
 80006e8:	f043 0308 	orr.w	r3, r3, #8
 80006ec:	6013      	str	r3, [r2, #0]
		TIM3->DIER = 1;
 80006ee:	4b05      	ldr	r3, [pc, #20]	; (8000704 <TIMER3_Init+0x40>)
 80006f0:	2201      	movs	r2, #1
 80006f2:	60da      	str	r2, [r3, #12]
}
 80006f4:	bf00      	nop
 80006f6:	46bd      	mov	sp, r7
 80006f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fc:	4770      	bx	lr
 80006fe:	bf00      	nop
 8000700:	40023800 	.word	0x40023800
 8000704:	40000400 	.word	0x40000400

08000708 <Usb_SendKeyPress>:
#include "usbd_hid.h"
#include <stdint.h>

uint8_t Usb_KeyboardBuffer[KEYB_BUFFER_SIZE] = {0};

void Usb_SendKeyPress(uint8_t modifier,uint8_t keycode){
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
 800070e:	4603      	mov	r3, r0
 8000710:	460a      	mov	r2, r1
 8000712:	71fb      	strb	r3, [r7, #7]
 8000714:	4613      	mov	r3, r2
 8000716:	71bb      	strb	r3, [r7, #6]
	Usb_KeyboardBuffer[0] = modifier;
 8000718:	4a08      	ldr	r2, [pc, #32]	; (800073c <Usb_SendKeyPress+0x34>)
 800071a:	79fb      	ldrb	r3, [r7, #7]
 800071c:	7013      	strb	r3, [r2, #0]
	Usb_KeyboardBuffer[2] = keycode;
 800071e:	4a07      	ldr	r2, [pc, #28]	; (800073c <Usb_SendKeyPress+0x34>)
 8000720:	79bb      	ldrb	r3, [r7, #6]
 8000722:	7093      	strb	r3, [r2, #2]
	USBD_HID_SendReport(&hUsbDeviceFS,Usb_KeyboardBuffer,KEYB_BUFFER_SIZE);
 8000724:	2208      	movs	r2, #8
 8000726:	4905      	ldr	r1, [pc, #20]	; (800073c <Usb_SendKeyPress+0x34>)
 8000728:	4805      	ldr	r0, [pc, #20]	; (8000740 <Usb_SendKeyPress+0x38>)
 800072a:	f004 fc25 	bl	8004f78 <USBD_HID_SendReport>
	HAL_Delay(10);
 800072e:	200a      	movs	r0, #10
 8000730:	f000 ff36 	bl	80015a0 <HAL_Delay>
}
 8000734:	bf00      	nop
 8000736:	3708      	adds	r7, #8
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	200001dc 	.word	0x200001dc
 8000740:	200001f8 	.word	0x200001f8

08000744 <Usb_ReleaseKeys>:

void Usb_ReleaseKeys(void){
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
	Usb_KeyboardBuffer[0] = 0x00;
 8000748:	4b07      	ldr	r3, [pc, #28]	; (8000768 <Usb_ReleaseKeys+0x24>)
 800074a:	2200      	movs	r2, #0
 800074c:	701a      	strb	r2, [r3, #0]
	Usb_KeyboardBuffer[2] = 0x00;
 800074e:	4b06      	ldr	r3, [pc, #24]	; (8000768 <Usb_ReleaseKeys+0x24>)
 8000750:	2200      	movs	r2, #0
 8000752:	709a      	strb	r2, [r3, #2]
	USBD_HID_SendReport(&hUsbDeviceFS,Usb_KeyboardBuffer,KEYB_BUFFER_SIZE);
 8000754:	2208      	movs	r2, #8
 8000756:	4904      	ldr	r1, [pc, #16]	; (8000768 <Usb_ReleaseKeys+0x24>)
 8000758:	4804      	ldr	r0, [pc, #16]	; (800076c <Usb_ReleaseKeys+0x28>)
 800075a:	f004 fc0d 	bl	8004f78 <USBD_HID_SendReport>
	HAL_Delay(10);
 800075e:	200a      	movs	r0, #10
 8000760:	f000 ff1e 	bl	80015a0 <HAL_Delay>
}
 8000764:	bf00      	nop
 8000766:	bd80      	pop	{r7, pc}
 8000768:	200001dc 	.word	0x200001dc
 800076c:	200001f8 	.word	0x200001f8

08000770 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000770:	b480      	push	{r7}
 8000772:	b083      	sub	sp, #12
 8000774:	af00      	add	r7, sp, #0
 8000776:	4603      	mov	r3, r0
 8000778:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800077a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800077e:	2b00      	cmp	r3, #0
 8000780:	db0b      	blt.n	800079a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000782:	79fb      	ldrb	r3, [r7, #7]
 8000784:	f003 021f 	and.w	r2, r3, #31
 8000788:	4907      	ldr	r1, [pc, #28]	; (80007a8 <__NVIC_EnableIRQ+0x38>)
 800078a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800078e:	095b      	lsrs	r3, r3, #5
 8000790:	2001      	movs	r0, #1
 8000792:	fa00 f202 	lsl.w	r2, r0, r2
 8000796:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800079a:	bf00      	nop
 800079c:	370c      	adds	r7, #12
 800079e:	46bd      	mov	sp, r7
 80007a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a4:	4770      	bx	lr
 80007a6:	bf00      	nop
 80007a8:	e000e100 	.word	0xe000e100

080007ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007ac:	b5b0      	push	{r4, r5, r7, lr}
 80007ae:	b08e      	sub	sp, #56	; 0x38
 80007b0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80007b2:	f000 fe83 	bl	80014bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007b6:	f000 fcfb 	bl	80011b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007ba:	f000 fd65 	bl	8001288 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80007be:	f005 fd37 	bl	8006230 <MX_USB_DEVICE_Init>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007c2:	b672      	cpsid	i
  /* USER CODE BEGIN 2 */
  __disable_irq();
  Button_Init();
 80007c4:	f7ff fe80 	bl	80004c8 <Button_Init>
  TIMER2_Init();
 80007c8:	f7ff ff56 	bl	8000678 <TIMER2_Init>
  TIMER3_Init();
 80007cc:	f7ff ff7a 	bl	80006c4 <TIMER3_Init>
  NVIC_EnableIRQ(TIM2_IRQn);
 80007d0:	201c      	movs	r0, #28
 80007d2:	f7ff ffcd 	bl	8000770 <__NVIC_EnableIRQ>
  NVIC_EnableIRQ(TIM3_IRQn);
 80007d6:	201d      	movs	r0, #29
 80007d8:	f7ff ffca 	bl	8000770 <__NVIC_EnableIRQ>

  Button_t button[] = {{0,0,8},{0,0,0},{0,0,1},{0,0,2},{0,0,3},{0,0,4},{0,0,5},{0,0,6},{0,0,7}};
 80007dc:	4b20      	ldr	r3, [pc, #128]	; (8000860 <main+0xb4>)
 80007de:	f107 0414 	add.w	r4, r7, #20
 80007e2:	461d      	mov	r5, r3
 80007e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007e8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80007ec:	c403      	stmia	r4!, {r0, r1}
 80007ee:	8022      	strh	r2, [r4, #0]
 80007f0:	3402      	adds	r4, #2
 80007f2:	0c13      	lsrs	r3, r2, #16
 80007f4:	7023      	strb	r3, [r4, #0]
  const uint8_t BUTTON[NUM_OF_BUTTONS] = {CAPS_LCK,BUTTON1,BUTTON2,BUTTON3,BUTTON4,BUTTON5,BUTTON6,SPACE,BACKSPACE};
 80007f6:	4a1b      	ldr	r2, [pc, #108]	; (8000864 <main+0xb8>)
 80007f8:	f107 0308 	add.w	r3, r7, #8
 80007fc:	ca07      	ldmia	r2, {r0, r1, r2}
 80007fe:	c303      	stmia	r3!, {r0, r1}
 8000800:	701a      	strb	r2, [r3, #0]
  uint16_t buttonRegister = 0;
 8000802:	2300      	movs	r3, #0
 8000804:	80fb      	strh	r3, [r7, #6]
  uint8_t caps_LckPressed = 0;
 8000806:	2300      	movs	r3, #0
 8000808:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint8_t slide_Switch = 0;
 800080c:	2300      	movs	r3, #0
 800080e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  __ASM volatile ("cpsie i" : : : "memory");
 8000812:	b662      	cpsie	i
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  slide_Switch = GPIOC->IDR & SLIDE_SW;
 8000814:	4b14      	ldr	r3, [pc, #80]	; (8000868 <main+0xbc>)
 8000816:	691b      	ldr	r3, [r3, #16]
 8000818:	b2db      	uxtb	r3, r3
 800081a:	f003 0320 	and.w	r3, r3, #32
 800081e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	  for(int i = 0; i < NUM_OF_BUTTONS; i++){
 8000822:	2300      	movs	r3, #0
 8000824:	633b      	str	r3, [r7, #48]	; 0x30
 8000826:	e04a      	b.n	80008be <main+0x112>
		  if(i<4)
 8000828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800082a:	2b03      	cmp	r3, #3
 800082c:	dc20      	bgt.n	8000870 <main+0xc4>
			  button[i].pressed = (!(GPIOB->IDR & BUTTON[i]));
 800082e:	4b0f      	ldr	r3, [pc, #60]	; (800086c <main+0xc0>)
 8000830:	691b      	ldr	r3, [r3, #16]
 8000832:	f107 0108 	add.w	r1, r7, #8
 8000836:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000838:	440a      	add	r2, r1
 800083a:	7812      	ldrb	r2, [r2, #0]
 800083c:	4013      	ands	r3, r2
 800083e:	2b00      	cmp	r3, #0
 8000840:	bf0c      	ite	eq
 8000842:	2301      	moveq	r3, #1
 8000844:	2300      	movne	r3, #0
 8000846:	b2db      	uxtb	r3, r3
 8000848:	4619      	mov	r1, r3
 800084a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800084c:	4613      	mov	r3, r2
 800084e:	005b      	lsls	r3, r3, #1
 8000850:	4413      	add	r3, r2
 8000852:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000856:	4413      	add	r3, r2
 8000858:	3b24      	subs	r3, #36	; 0x24
 800085a:	460a      	mov	r2, r1
 800085c:	701a      	strb	r2, [r3, #0]
 800085e:	e01f      	b.n	80008a0 <main+0xf4>
 8000860:	08006c7c 	.word	0x08006c7c
 8000864:	08006c98 	.word	0x08006c98
 8000868:	40020800 	.word	0x40020800
 800086c:	40020400 	.word	0x40020400
		  else
			  button[i].pressed = (!(GPIOC->IDR & BUTTON[i]));
 8000870:	4b17      	ldr	r3, [pc, #92]	; (80008d0 <main+0x124>)
 8000872:	691b      	ldr	r3, [r3, #16]
 8000874:	f107 0108 	add.w	r1, r7, #8
 8000878:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800087a:	440a      	add	r2, r1
 800087c:	7812      	ldrb	r2, [r2, #0]
 800087e:	4013      	ands	r3, r2
 8000880:	2b00      	cmp	r3, #0
 8000882:	bf0c      	ite	eq
 8000884:	2301      	moveq	r3, #1
 8000886:	2300      	movne	r3, #0
 8000888:	b2db      	uxtb	r3, r3
 800088a:	4619      	mov	r1, r3
 800088c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800088e:	4613      	mov	r3, r2
 8000890:	005b      	lsls	r3, r3, #1
 8000892:	4413      	add	r3, r2
 8000894:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000898:	4413      	add	r3, r2
 800089a:	3b24      	subs	r3, #36	; 0x24
 800089c:	460a      	mov	r2, r1
 800089e:	701a      	strb	r2, [r3, #0]

		  Button_Poll(&button[i],&buttonRegister);
 80008a0:	f107 0114 	add.w	r1, r7, #20
 80008a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80008a6:	4613      	mov	r3, r2
 80008a8:	005b      	lsls	r3, r3, #1
 80008aa:	4413      	add	r3, r2
 80008ac:	440b      	add	r3, r1
 80008ae:	1dba      	adds	r2, r7, #6
 80008b0:	4611      	mov	r1, r2
 80008b2:	4618      	mov	r0, r3
 80008b4:	f7ff fe6c 	bl	8000590 <Button_Poll>
	  for(int i = 0; i < NUM_OF_BUTTONS; i++){
 80008b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80008ba:	3301      	adds	r3, #1
 80008bc:	633b      	str	r3, [r7, #48]	; 0x30
 80008be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80008c0:	2b08      	cmp	r3, #8
 80008c2:	ddb1      	ble.n	8000828 <main+0x7c>
	  }
	  if(Button_pressTimeElapsed){
 80008c4:	4b03      	ldr	r3, [pc, #12]	; (80008d4 <main+0x128>)
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	b2db      	uxtb	r3, r3
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d0a2      	beq.n	8000814 <main+0x68>
 80008ce:	e003      	b.n	80008d8 <main+0x12c>
 80008d0:	40020800 	.word	0x40020800
 80008d4:	200001da 	.word	0x200001da
		  switch(buttonRegister){
 80008d8:	88fb      	ldrh	r3, [r7, #6]
 80008da:	3b01      	subs	r3, #1
 80008dc:	2bff      	cmp	r3, #255	; 0xff
 80008de:	f200 845a 	bhi.w	8001196 <main+0x9ea>
 80008e2:	a201      	add	r2, pc, #4	; (adr r2, 80008e8 <main+0x13c>)
 80008e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008e8:	08000ce9 	.word	0x08000ce9
 80008ec:	08001197 	.word	0x08001197
 80008f0:	08000d23 	.word	0x08000d23
 80008f4:	08001197 	.word	0x08001197
 80008f8:	08000f2d 	.word	0x08000f2d
 80008fc:	08001197 	.word	0x08001197
 8000900:	08000f51 	.word	0x08000f51
 8000904:	08001197 	.word	0x08001197
 8000908:	08000d5d 	.word	0x08000d5d
 800090c:	08000eb9 	.word	0x08000eb9
 8000910:	08000e0b 	.word	0x08000e0b
 8000914:	08001197 	.word	0x08001197
 8000918:	08000f75 	.word	0x08000f75
 800091c:	0800104d 	.word	0x0800104d
 8000920:	08000fe1 	.word	0x08000fe1
 8000924:	08001197 	.word	0x08001197
 8000928:	08000dd1 	.word	0x08000dd1
 800092c:	08001197 	.word	0x08001197
 8000930:	08000e7f 	.word	0x08000e7f
 8000934:	08001197 	.word	0x08001197
 8000938:	08000fbd 	.word	0x08000fbd
 800093c:	08001197 	.word	0x08001197
 8000940:	08001029 	.word	0x08001029
 8000944:	08001197 	.word	0x08001197
 8000948:	08000d97 	.word	0x08000d97
 800094c:	08000ef3 	.word	0x08000ef3
 8000950:	08000e45 	.word	0x08000e45
 8000954:	08001197 	.word	0x08001197
 8000958:	08000f99 	.word	0x08000f99
 800095c:	08001071 	.word	0x08001071
 8000960:	08001005 	.word	0x08001005
 8000964:	08001197 	.word	0x08001197
 8000968:	08001197 	.word	0x08001197
 800096c:	08001197 	.word	0x08001197
 8000970:	08001197 	.word	0x08001197
 8000974:	08001197 	.word	0x08001197
 8000978:	08001095 	.word	0x08001095
 800097c:	08001197 	.word	0x08001197
 8000980:	080010b9 	.word	0x080010b9
 8000984:	08001197 	.word	0x08001197
 8000988:	08001197 	.word	0x08001197
 800098c:	08001197 	.word	0x08001197
 8000990:	08001197 	.word	0x08001197
 8000994:	08001197 	.word	0x08001197
 8000998:	08001101 	.word	0x08001101
 800099c:	08001197 	.word	0x08001197
 80009a0:	08001197 	.word	0x08001197
 80009a4:	08001197 	.word	0x08001197
 80009a8:	08001197 	.word	0x08001197
 80009ac:	08001197 	.word	0x08001197
 80009b0:	08001197 	.word	0x08001197
 80009b4:	08001197 	.word	0x08001197
 80009b8:	08001149 	.word	0x08001149
 80009bc:	08001197 	.word	0x08001197
 80009c0:	08001197 	.word	0x08001197
 80009c4:	08001197 	.word	0x08001197
 80009c8:	08001197 	.word	0x08001197
 80009cc:	080010dd 	.word	0x080010dd
 80009d0:	08001197 	.word	0x08001197
 80009d4:	08001197 	.word	0x08001197
 80009d8:	08001125 	.word	0x08001125
 80009dc:	08001197 	.word	0x08001197
 80009e0:	08001197 	.word	0x08001197
 80009e4:	0800116d 	.word	0x0800116d
 80009e8:	08001197 	.word	0x08001197
 80009ec:	08001197 	.word	0x08001197
 80009f0:	08001197 	.word	0x08001197
 80009f4:	08001197 	.word	0x08001197
 80009f8:	08001197 	.word	0x08001197
 80009fc:	08001197 	.word	0x08001197
 8000a00:	08001197 	.word	0x08001197
 8000a04:	08001197 	.word	0x08001197
 8000a08:	08001197 	.word	0x08001197
 8000a0c:	08001197 	.word	0x08001197
 8000a10:	08001197 	.word	0x08001197
 8000a14:	08001197 	.word	0x08001197
 8000a18:	08001197 	.word	0x08001197
 8000a1c:	08001197 	.word	0x08001197
 8000a20:	08001197 	.word	0x08001197
 8000a24:	08001197 	.word	0x08001197
 8000a28:	08001197 	.word	0x08001197
 8000a2c:	08001197 	.word	0x08001197
 8000a30:	08001197 	.word	0x08001197
 8000a34:	08001197 	.word	0x08001197
 8000a38:	08001197 	.word	0x08001197
 8000a3c:	08001197 	.word	0x08001197
 8000a40:	08001197 	.word	0x08001197
 8000a44:	08001197 	.word	0x08001197
 8000a48:	08001197 	.word	0x08001197
 8000a4c:	08001197 	.word	0x08001197
 8000a50:	08001197 	.word	0x08001197
 8000a54:	08001197 	.word	0x08001197
 8000a58:	08001197 	.word	0x08001197
 8000a5c:	08001197 	.word	0x08001197
 8000a60:	08001197 	.word	0x08001197
 8000a64:	08001197 	.word	0x08001197
 8000a68:	08001197 	.word	0x08001197
 8000a6c:	08001197 	.word	0x08001197
 8000a70:	08001197 	.word	0x08001197
 8000a74:	08001197 	.word	0x08001197
 8000a78:	08001197 	.word	0x08001197
 8000a7c:	08001197 	.word	0x08001197
 8000a80:	08001197 	.word	0x08001197
 8000a84:	08001197 	.word	0x08001197
 8000a88:	08001197 	.word	0x08001197
 8000a8c:	08001197 	.word	0x08001197
 8000a90:	08001197 	.word	0x08001197
 8000a94:	08001197 	.word	0x08001197
 8000a98:	08001197 	.word	0x08001197
 8000a9c:	08001197 	.word	0x08001197
 8000aa0:	08001197 	.word	0x08001197
 8000aa4:	08001197 	.word	0x08001197
 8000aa8:	08001197 	.word	0x08001197
 8000aac:	08001197 	.word	0x08001197
 8000ab0:	08001197 	.word	0x08001197
 8000ab4:	08001197 	.word	0x08001197
 8000ab8:	08001197 	.word	0x08001197
 8000abc:	08001197 	.word	0x08001197
 8000ac0:	08001197 	.word	0x08001197
 8000ac4:	08001197 	.word	0x08001197
 8000ac8:	08001197 	.word	0x08001197
 8000acc:	08001197 	.word	0x08001197
 8000ad0:	08001197 	.word	0x08001197
 8000ad4:	08001197 	.word	0x08001197
 8000ad8:	08001197 	.word	0x08001197
 8000adc:	08001197 	.word	0x08001197
 8000ae0:	08001197 	.word	0x08001197
 8000ae4:	0800117b 	.word	0x0800117b
 8000ae8:	08001197 	.word	0x08001197
 8000aec:	08001197 	.word	0x08001197
 8000af0:	08001197 	.word	0x08001197
 8000af4:	08001197 	.word	0x08001197
 8000af8:	08001197 	.word	0x08001197
 8000afc:	08001197 	.word	0x08001197
 8000b00:	08001197 	.word	0x08001197
 8000b04:	08001197 	.word	0x08001197
 8000b08:	08001197 	.word	0x08001197
 8000b0c:	08001197 	.word	0x08001197
 8000b10:	08001197 	.word	0x08001197
 8000b14:	08001197 	.word	0x08001197
 8000b18:	08001197 	.word	0x08001197
 8000b1c:	08001197 	.word	0x08001197
 8000b20:	08001197 	.word	0x08001197
 8000b24:	08001197 	.word	0x08001197
 8000b28:	08001197 	.word	0x08001197
 8000b2c:	08001197 	.word	0x08001197
 8000b30:	08001197 	.word	0x08001197
 8000b34:	08001197 	.word	0x08001197
 8000b38:	08001197 	.word	0x08001197
 8000b3c:	08001197 	.word	0x08001197
 8000b40:	08001197 	.word	0x08001197
 8000b44:	08001197 	.word	0x08001197
 8000b48:	08001197 	.word	0x08001197
 8000b4c:	08001197 	.word	0x08001197
 8000b50:	08001197 	.word	0x08001197
 8000b54:	08001197 	.word	0x08001197
 8000b58:	08001197 	.word	0x08001197
 8000b5c:	08001197 	.word	0x08001197
 8000b60:	08001197 	.word	0x08001197
 8000b64:	08001197 	.word	0x08001197
 8000b68:	08001197 	.word	0x08001197
 8000b6c:	08001197 	.word	0x08001197
 8000b70:	08001197 	.word	0x08001197
 8000b74:	08001197 	.word	0x08001197
 8000b78:	08001197 	.word	0x08001197
 8000b7c:	08001197 	.word	0x08001197
 8000b80:	08001197 	.word	0x08001197
 8000b84:	08001197 	.word	0x08001197
 8000b88:	08001197 	.word	0x08001197
 8000b8c:	08001197 	.word	0x08001197
 8000b90:	08001197 	.word	0x08001197
 8000b94:	08001197 	.word	0x08001197
 8000b98:	08001197 	.word	0x08001197
 8000b9c:	08001197 	.word	0x08001197
 8000ba0:	08001197 	.word	0x08001197
 8000ba4:	08001197 	.word	0x08001197
 8000ba8:	08001197 	.word	0x08001197
 8000bac:	08001197 	.word	0x08001197
 8000bb0:	08001197 	.word	0x08001197
 8000bb4:	08001197 	.word	0x08001197
 8000bb8:	08001197 	.word	0x08001197
 8000bbc:	08001197 	.word	0x08001197
 8000bc0:	08001197 	.word	0x08001197
 8000bc4:	08001197 	.word	0x08001197
 8000bc8:	08001197 	.word	0x08001197
 8000bcc:	08001197 	.word	0x08001197
 8000bd0:	08001197 	.word	0x08001197
 8000bd4:	08001197 	.word	0x08001197
 8000bd8:	08001197 	.word	0x08001197
 8000bdc:	08001197 	.word	0x08001197
 8000be0:	08001197 	.word	0x08001197
 8000be4:	08001197 	.word	0x08001197
 8000be8:	08001197 	.word	0x08001197
 8000bec:	08001197 	.word	0x08001197
 8000bf0:	08001197 	.word	0x08001197
 8000bf4:	08001197 	.word	0x08001197
 8000bf8:	08001197 	.word	0x08001197
 8000bfc:	08001197 	.word	0x08001197
 8000c00:	08001197 	.word	0x08001197
 8000c04:	08001197 	.word	0x08001197
 8000c08:	08001197 	.word	0x08001197
 8000c0c:	08001197 	.word	0x08001197
 8000c10:	08001197 	.word	0x08001197
 8000c14:	08001197 	.word	0x08001197
 8000c18:	08001197 	.word	0x08001197
 8000c1c:	08001197 	.word	0x08001197
 8000c20:	08001197 	.word	0x08001197
 8000c24:	08001197 	.word	0x08001197
 8000c28:	08001197 	.word	0x08001197
 8000c2c:	08001197 	.word	0x08001197
 8000c30:	08001197 	.word	0x08001197
 8000c34:	08001197 	.word	0x08001197
 8000c38:	08001197 	.word	0x08001197
 8000c3c:	08001197 	.word	0x08001197
 8000c40:	08001197 	.word	0x08001197
 8000c44:	08001197 	.word	0x08001197
 8000c48:	08001197 	.word	0x08001197
 8000c4c:	08001197 	.word	0x08001197
 8000c50:	08001197 	.word	0x08001197
 8000c54:	08001197 	.word	0x08001197
 8000c58:	08001197 	.word	0x08001197
 8000c5c:	08001197 	.word	0x08001197
 8000c60:	08001197 	.word	0x08001197
 8000c64:	08001197 	.word	0x08001197
 8000c68:	08001197 	.word	0x08001197
 8000c6c:	08001197 	.word	0x08001197
 8000c70:	08001197 	.word	0x08001197
 8000c74:	08001197 	.word	0x08001197
 8000c78:	08001197 	.word	0x08001197
 8000c7c:	08001197 	.word	0x08001197
 8000c80:	08001197 	.word	0x08001197
 8000c84:	08001197 	.word	0x08001197
 8000c88:	08001197 	.word	0x08001197
 8000c8c:	08001197 	.word	0x08001197
 8000c90:	08001197 	.word	0x08001197
 8000c94:	08001197 	.word	0x08001197
 8000c98:	08001197 	.word	0x08001197
 8000c9c:	08001197 	.word	0x08001197
 8000ca0:	08001197 	.word	0x08001197
 8000ca4:	08001197 	.word	0x08001197
 8000ca8:	08001197 	.word	0x08001197
 8000cac:	08001197 	.word	0x08001197
 8000cb0:	08001197 	.word	0x08001197
 8000cb4:	08001197 	.word	0x08001197
 8000cb8:	08001197 	.word	0x08001197
 8000cbc:	08001197 	.word	0x08001197
 8000cc0:	08001197 	.word	0x08001197
 8000cc4:	08001197 	.word	0x08001197
 8000cc8:	08001197 	.word	0x08001197
 8000ccc:	08001197 	.word	0x08001197
 8000cd0:	08001197 	.word	0x08001197
 8000cd4:	08001197 	.word	0x08001197
 8000cd8:	08001197 	.word	0x08001197
 8000cdc:	08001197 	.word	0x08001197
 8000ce0:	08001197 	.word	0x08001197
 8000ce4:	08001189 	.word	0x08001189
		  case BUTTON_1_PRESSED:
			  if(slide_Switch){
 8000ce8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d006      	beq.n	8000cfe <main+0x552>
				  Usb_SendKeyPress(0x00,USB_USAGE_ID_1);
 8000cf0:	211e      	movs	r1, #30
 8000cf2:	2000      	movs	r0, #0
 8000cf4:	f7ff fd08 	bl	8000708 <Usb_SendKeyPress>
				  Usb_ReleaseKeys();
 8000cf8:	f7ff fd24 	bl	8000744 <Usb_ReleaseKeys>
				  else{
					  Usb_SendKeyPress(0x00,USB_USAGE_ID_A);
					  Usb_ReleaseKeys();
				  }
			  }
			  break;
 8000cfc:	e251      	b.n	80011a2 <main+0x9f6>
				  if(caps_LckPressed){
 8000cfe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d006      	beq.n	8000d14 <main+0x568>
					  Usb_SendKeyPress(LEFT_SHIFT,USB_USAGE_ID_A);
 8000d06:	2104      	movs	r1, #4
 8000d08:	2002      	movs	r0, #2
 8000d0a:	f7ff fcfd 	bl	8000708 <Usb_SendKeyPress>
					  Usb_ReleaseKeys();
 8000d0e:	f7ff fd19 	bl	8000744 <Usb_ReleaseKeys>
			  break;
 8000d12:	e246      	b.n	80011a2 <main+0x9f6>
					  Usb_SendKeyPress(0x00,USB_USAGE_ID_A);
 8000d14:	2104      	movs	r1, #4
 8000d16:	2000      	movs	r0, #0
 8000d18:	f7ff fcf6 	bl	8000708 <Usb_SendKeyPress>
					  Usb_ReleaseKeys();
 8000d1c:	f7ff fd12 	bl	8000744 <Usb_ReleaseKeys>
			  break;
 8000d20:	e23f      	b.n	80011a2 <main+0x9f6>

		  case BUTTON_1_2_PRESSED:
			  if(slide_Switch){
 8000d22:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d006      	beq.n	8000d38 <main+0x58c>
				  Usb_SendKeyPress(0x00,USB_USAGE_ID_2);
 8000d2a:	211f      	movs	r1, #31
 8000d2c:	2000      	movs	r0, #0
 8000d2e:	f7ff fceb 	bl	8000708 <Usb_SendKeyPress>
				  Usb_ReleaseKeys();
 8000d32:	f7ff fd07 	bl	8000744 <Usb_ReleaseKeys>
				  else{
					  Usb_SendKeyPress(0x00,USB_USAGE_ID_B);
					  Usb_ReleaseKeys();
				  }
			  }
			  break;
 8000d36:	e234      	b.n	80011a2 <main+0x9f6>
				  if(caps_LckPressed){
 8000d38:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d006      	beq.n	8000d4e <main+0x5a2>
					  Usb_SendKeyPress(LEFT_SHIFT,USB_USAGE_ID_B);
 8000d40:	2105      	movs	r1, #5
 8000d42:	2002      	movs	r0, #2
 8000d44:	f7ff fce0 	bl	8000708 <Usb_SendKeyPress>
					  Usb_ReleaseKeys();
 8000d48:	f7ff fcfc 	bl	8000744 <Usb_ReleaseKeys>
			  break;
 8000d4c:	e229      	b.n	80011a2 <main+0x9f6>
					  Usb_SendKeyPress(0x00,USB_USAGE_ID_B);
 8000d4e:	2105      	movs	r1, #5
 8000d50:	2000      	movs	r0, #0
 8000d52:	f7ff fcd9 	bl	8000708 <Usb_SendKeyPress>
					  Usb_ReleaseKeys();
 8000d56:	f7ff fcf5 	bl	8000744 <Usb_ReleaseKeys>
			  break;
 8000d5a:	e222      	b.n	80011a2 <main+0x9f6>

		  case BUTTON_1_4_PRESSED:
			  if(slide_Switch){
 8000d5c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d006      	beq.n	8000d72 <main+0x5c6>
				  Usb_SendKeyPress(0x00,USB_USAGE_ID_3);
 8000d64:	2120      	movs	r1, #32
 8000d66:	2000      	movs	r0, #0
 8000d68:	f7ff fcce 	bl	8000708 <Usb_SendKeyPress>
				  Usb_ReleaseKeys();
 8000d6c:	f7ff fcea 	bl	8000744 <Usb_ReleaseKeys>
				  else{
					  Usb_SendKeyPress(0x00,USB_USAGE_ID_C);
					  Usb_ReleaseKeys();
				  }
			  }
			  break;
 8000d70:	e217      	b.n	80011a2 <main+0x9f6>
				  if(caps_LckPressed){
 8000d72:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d006      	beq.n	8000d88 <main+0x5dc>
					  Usb_SendKeyPress(LEFT_SHIFT,USB_USAGE_ID_C);
 8000d7a:	2106      	movs	r1, #6
 8000d7c:	2002      	movs	r0, #2
 8000d7e:	f7ff fcc3 	bl	8000708 <Usb_SendKeyPress>
					  Usb_ReleaseKeys();
 8000d82:	f7ff fcdf 	bl	8000744 <Usb_ReleaseKeys>
			  break;
 8000d86:	e20c      	b.n	80011a2 <main+0x9f6>
					  Usb_SendKeyPress(0x00,USB_USAGE_ID_C);
 8000d88:	2106      	movs	r1, #6
 8000d8a:	2000      	movs	r0, #0
 8000d8c:	f7ff fcbc 	bl	8000708 <Usb_SendKeyPress>
					  Usb_ReleaseKeys();
 8000d90:	f7ff fcd8 	bl	8000744 <Usb_ReleaseKeys>
			  break;
 8000d94:	e205      	b.n	80011a2 <main+0x9f6>

		  case BUTTON_1_4_5_PRESSED:
			  if(slide_Switch){
 8000d96:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d006      	beq.n	8000dac <main+0x600>
				  Usb_SendKeyPress(0x00,USB_USAGE_ID_4);
 8000d9e:	2121      	movs	r1, #33	; 0x21
 8000da0:	2000      	movs	r0, #0
 8000da2:	f7ff fcb1 	bl	8000708 <Usb_SendKeyPress>
				  Usb_ReleaseKeys();
 8000da6:	f7ff fccd 	bl	8000744 <Usb_ReleaseKeys>
				  else{
					  Usb_SendKeyPress(0x00,USB_USAGE_ID_D);
					  Usb_ReleaseKeys();
				  }
			  }
			  break;
 8000daa:	e1fa      	b.n	80011a2 <main+0x9f6>
				  if(caps_LckPressed){
 8000dac:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d006      	beq.n	8000dc2 <main+0x616>
					  Usb_SendKeyPress(LEFT_SHIFT,USB_USAGE_ID_D);
 8000db4:	2107      	movs	r1, #7
 8000db6:	2002      	movs	r0, #2
 8000db8:	f7ff fca6 	bl	8000708 <Usb_SendKeyPress>
					  Usb_ReleaseKeys();
 8000dbc:	f7ff fcc2 	bl	8000744 <Usb_ReleaseKeys>
			  break;
 8000dc0:	e1ef      	b.n	80011a2 <main+0x9f6>
					  Usb_SendKeyPress(0x00,USB_USAGE_ID_D);
 8000dc2:	2107      	movs	r1, #7
 8000dc4:	2000      	movs	r0, #0
 8000dc6:	f7ff fc9f 	bl	8000708 <Usb_SendKeyPress>
					  Usb_ReleaseKeys();
 8000dca:	f7ff fcbb 	bl	8000744 <Usb_ReleaseKeys>
			  break;
 8000dce:	e1e8      	b.n	80011a2 <main+0x9f6>

		  case BUTTON_1_5_PRESSED:
			  if(slide_Switch){
 8000dd0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d006      	beq.n	8000de6 <main+0x63a>
				  Usb_SendKeyPress(0x00,USB_USAGE_ID_5);
 8000dd8:	2122      	movs	r1, #34	; 0x22
 8000dda:	2000      	movs	r0, #0
 8000ddc:	f7ff fc94 	bl	8000708 <Usb_SendKeyPress>
				  Usb_ReleaseKeys();
 8000de0:	f7ff fcb0 	bl	8000744 <Usb_ReleaseKeys>
				  else{
					  Usb_SendKeyPress(0x00,USB_USAGE_ID_E);
					  Usb_ReleaseKeys();
				  }
			  }
			  break;
 8000de4:	e1dd      	b.n	80011a2 <main+0x9f6>
				  if(caps_LckPressed){
 8000de6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d006      	beq.n	8000dfc <main+0x650>
					  Usb_SendKeyPress(LEFT_SHIFT,USB_USAGE_ID_E);
 8000dee:	2108      	movs	r1, #8
 8000df0:	2002      	movs	r0, #2
 8000df2:	f7ff fc89 	bl	8000708 <Usb_SendKeyPress>
					  Usb_ReleaseKeys();
 8000df6:	f7ff fca5 	bl	8000744 <Usb_ReleaseKeys>
			  break;
 8000dfa:	e1d2      	b.n	80011a2 <main+0x9f6>
					  Usb_SendKeyPress(0x00,USB_USAGE_ID_E);
 8000dfc:	2108      	movs	r1, #8
 8000dfe:	2000      	movs	r0, #0
 8000e00:	f7ff fc82 	bl	8000708 <Usb_SendKeyPress>
					  Usb_ReleaseKeys();
 8000e04:	f7ff fc9e 	bl	8000744 <Usb_ReleaseKeys>
			  break;
 8000e08:	e1cb      	b.n	80011a2 <main+0x9f6>

		  case BUTTON_1_2_4_PRESSED:
			  if(slide_Switch){
 8000e0a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d006      	beq.n	8000e20 <main+0x674>
				  Usb_SendKeyPress(0x00,USB_USAGE_ID_6);
 8000e12:	2123      	movs	r1, #35	; 0x23
 8000e14:	2000      	movs	r0, #0
 8000e16:	f7ff fc77 	bl	8000708 <Usb_SendKeyPress>
				  Usb_ReleaseKeys();
 8000e1a:	f7ff fc93 	bl	8000744 <Usb_ReleaseKeys>
				  else{
					  Usb_SendKeyPress(0x00,USB_USAGE_ID_F);
					  Usb_ReleaseKeys();
				  }
			  }
			  break;
 8000e1e:	e1c0      	b.n	80011a2 <main+0x9f6>
				  if(caps_LckPressed){
 8000e20:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d006      	beq.n	8000e36 <main+0x68a>
					  Usb_SendKeyPress(LEFT_SHIFT,USB_USAGE_ID_F);
 8000e28:	2109      	movs	r1, #9
 8000e2a:	2002      	movs	r0, #2
 8000e2c:	f7ff fc6c 	bl	8000708 <Usb_SendKeyPress>
					  Usb_ReleaseKeys();
 8000e30:	f7ff fc88 	bl	8000744 <Usb_ReleaseKeys>
			  break;
 8000e34:	e1b5      	b.n	80011a2 <main+0x9f6>
					  Usb_SendKeyPress(0x00,USB_USAGE_ID_F);
 8000e36:	2109      	movs	r1, #9
 8000e38:	2000      	movs	r0, #0
 8000e3a:	f7ff fc65 	bl	8000708 <Usb_SendKeyPress>
					  Usb_ReleaseKeys();
 8000e3e:	f7ff fc81 	bl	8000744 <Usb_ReleaseKeys>
			  break;
 8000e42:	e1ae      	b.n	80011a2 <main+0x9f6>

		  case BUTTON_1_2_4_5_PRESSED:
			  if(slide_Switch){
 8000e44:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d006      	beq.n	8000e5a <main+0x6ae>
				  Usb_SendKeyPress(0x00,USB_USAGE_ID_7);
 8000e4c:	2124      	movs	r1, #36	; 0x24
 8000e4e:	2000      	movs	r0, #0
 8000e50:	f7ff fc5a 	bl	8000708 <Usb_SendKeyPress>
				  Usb_ReleaseKeys();
 8000e54:	f7ff fc76 	bl	8000744 <Usb_ReleaseKeys>
				  else{
					  Usb_SendKeyPress(0x00,USB_USAGE_ID_G);
					  Usb_ReleaseKeys();
				  }
			  }
			  break;
 8000e58:	e1a3      	b.n	80011a2 <main+0x9f6>
				  if(caps_LckPressed){
 8000e5a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d006      	beq.n	8000e70 <main+0x6c4>
					  Usb_SendKeyPress(LEFT_SHIFT,USB_USAGE_ID_G);
 8000e62:	210a      	movs	r1, #10
 8000e64:	2002      	movs	r0, #2
 8000e66:	f7ff fc4f 	bl	8000708 <Usb_SendKeyPress>
					  Usb_ReleaseKeys();
 8000e6a:	f7ff fc6b 	bl	8000744 <Usb_ReleaseKeys>
			  break;
 8000e6e:	e198      	b.n	80011a2 <main+0x9f6>
					  Usb_SendKeyPress(0x00,USB_USAGE_ID_G);
 8000e70:	210a      	movs	r1, #10
 8000e72:	2000      	movs	r0, #0
 8000e74:	f7ff fc48 	bl	8000708 <Usb_SendKeyPress>
					  Usb_ReleaseKeys();
 8000e78:	f7ff fc64 	bl	8000744 <Usb_ReleaseKeys>
			  break;
 8000e7c:	e191      	b.n	80011a2 <main+0x9f6>

		  case BUTTON_1_2_5_PRESSED:
			  if(slide_Switch){
 8000e7e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d006      	beq.n	8000e94 <main+0x6e8>
				  Usb_SendKeyPress(0x00,USB_USAGE_ID_8);
 8000e86:	2125      	movs	r1, #37	; 0x25
 8000e88:	2000      	movs	r0, #0
 8000e8a:	f7ff fc3d 	bl	8000708 <Usb_SendKeyPress>
				  Usb_ReleaseKeys();
 8000e8e:	f7ff fc59 	bl	8000744 <Usb_ReleaseKeys>
				  else{
					  Usb_SendKeyPress(0x00,USB_USAGE_ID_H);
					  Usb_ReleaseKeys();
				  }
			  }
			  break;
 8000e92:	e186      	b.n	80011a2 <main+0x9f6>
				  if(caps_LckPressed){
 8000e94:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d006      	beq.n	8000eaa <main+0x6fe>
					  Usb_SendKeyPress(LEFT_SHIFT,USB_USAGE_ID_H);
 8000e9c:	210b      	movs	r1, #11
 8000e9e:	2002      	movs	r0, #2
 8000ea0:	f7ff fc32 	bl	8000708 <Usb_SendKeyPress>
					  Usb_ReleaseKeys();
 8000ea4:	f7ff fc4e 	bl	8000744 <Usb_ReleaseKeys>
			  break;
 8000ea8:	e17b      	b.n	80011a2 <main+0x9f6>
					  Usb_SendKeyPress(0x00,USB_USAGE_ID_H);
 8000eaa:	210b      	movs	r1, #11
 8000eac:	2000      	movs	r0, #0
 8000eae:	f7ff fc2b 	bl	8000708 <Usb_SendKeyPress>
					  Usb_ReleaseKeys();
 8000eb2:	f7ff fc47 	bl	8000744 <Usb_ReleaseKeys>
			  break;
 8000eb6:	e174      	b.n	80011a2 <main+0x9f6>

		  case BUTTON_2_4_PRESSED:
			  if(slide_Switch){
 8000eb8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d006      	beq.n	8000ece <main+0x722>
				  Usb_SendKeyPress(0x00,USB_USAGE_ID_9);
 8000ec0:	2126      	movs	r1, #38	; 0x26
 8000ec2:	2000      	movs	r0, #0
 8000ec4:	f7ff fc20 	bl	8000708 <Usb_SendKeyPress>
				  Usb_ReleaseKeys();
 8000ec8:	f7ff fc3c 	bl	8000744 <Usb_ReleaseKeys>
				  else{
					  Usb_SendKeyPress(0x00,USB_USAGE_ID_I);
					  Usb_ReleaseKeys();
				  }
			  }
			  break;
 8000ecc:	e169      	b.n	80011a2 <main+0x9f6>
				  if(caps_LckPressed){
 8000ece:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d006      	beq.n	8000ee4 <main+0x738>
					  Usb_SendKeyPress(LEFT_SHIFT,USB_USAGE_ID_I);
 8000ed6:	210c      	movs	r1, #12
 8000ed8:	2002      	movs	r0, #2
 8000eda:	f7ff fc15 	bl	8000708 <Usb_SendKeyPress>
					  Usb_ReleaseKeys();
 8000ede:	f7ff fc31 	bl	8000744 <Usb_ReleaseKeys>
			  break;
 8000ee2:	e15e      	b.n	80011a2 <main+0x9f6>
					  Usb_SendKeyPress(0x00,USB_USAGE_ID_I);
 8000ee4:	210c      	movs	r1, #12
 8000ee6:	2000      	movs	r0, #0
 8000ee8:	f7ff fc0e 	bl	8000708 <Usb_SendKeyPress>
					  Usb_ReleaseKeys();
 8000eec:	f7ff fc2a 	bl	8000744 <Usb_ReleaseKeys>
			  break;
 8000ef0:	e157      	b.n	80011a2 <main+0x9f6>

		  case BUTTON_2_4_5_PRESSED:
			  if(slide_Switch){
 8000ef2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d006      	beq.n	8000f08 <main+0x75c>
				  Usb_SendKeyPress(0x00,USB_USAGE_ID_0);
 8000efa:	2127      	movs	r1, #39	; 0x27
 8000efc:	2000      	movs	r0, #0
 8000efe:	f7ff fc03 	bl	8000708 <Usb_SendKeyPress>
				  Usb_ReleaseKeys();
 8000f02:	f7ff fc1f 	bl	8000744 <Usb_ReleaseKeys>
				  else{
					  Usb_SendKeyPress(0x00,USB_USAGE_ID_J);
					  Usb_ReleaseKeys();
				  }
			  }
		  	 break;
 8000f06:	e14c      	b.n	80011a2 <main+0x9f6>
				  if(caps_LckPressed){
 8000f08:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d006      	beq.n	8000f1e <main+0x772>
					  Usb_SendKeyPress(LEFT_SHIFT,USB_USAGE_ID_J);
 8000f10:	210d      	movs	r1, #13
 8000f12:	2002      	movs	r0, #2
 8000f14:	f7ff fbf8 	bl	8000708 <Usb_SendKeyPress>
					  Usb_ReleaseKeys();
 8000f18:	f7ff fc14 	bl	8000744 <Usb_ReleaseKeys>
		  	 break;
 8000f1c:	e141      	b.n	80011a2 <main+0x9f6>
					  Usb_SendKeyPress(0x00,USB_USAGE_ID_J);
 8000f1e:	210d      	movs	r1, #13
 8000f20:	2000      	movs	r0, #0
 8000f22:	f7ff fbf1 	bl	8000708 <Usb_SendKeyPress>
					  Usb_ReleaseKeys();
 8000f26:	f7ff fc0d 	bl	8000744 <Usb_ReleaseKeys>
		  	 break;
 8000f2a:	e13a      	b.n	80011a2 <main+0x9f6>

		  case BUTTON_1_3_PRESSED:
			  if(caps_LckPressed){
 8000f2c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d006      	beq.n	8000f42 <main+0x796>
				  Usb_SendKeyPress(LEFT_SHIFT,USB_USAGE_ID_K);
 8000f34:	210e      	movs	r1, #14
 8000f36:	2002      	movs	r0, #2
 8000f38:	f7ff fbe6 	bl	8000708 <Usb_SendKeyPress>
				  Usb_ReleaseKeys();
 8000f3c:	f7ff fc02 	bl	8000744 <Usb_ReleaseKeys>
			  else{
				  Usb_SendKeyPress(0x00,USB_USAGE_ID_K);
				  Usb_ReleaseKeys();
			  }

		  	  break;
 8000f40:	e12f      	b.n	80011a2 <main+0x9f6>
				  Usb_SendKeyPress(0x00,USB_USAGE_ID_K);
 8000f42:	210e      	movs	r1, #14
 8000f44:	2000      	movs	r0, #0
 8000f46:	f7ff fbdf 	bl	8000708 <Usb_SendKeyPress>
				  Usb_ReleaseKeys();
 8000f4a:	f7ff fbfb 	bl	8000744 <Usb_ReleaseKeys>
		  	  break;
 8000f4e:	e128      	b.n	80011a2 <main+0x9f6>

		  case BUTTON_1_2_3_PRESSED:
			  if(caps_LckPressed){
 8000f50:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d006      	beq.n	8000f66 <main+0x7ba>
				  Usb_SendKeyPress(LEFT_SHIFT,USB_USAGE_ID_L);
 8000f58:	210f      	movs	r1, #15
 8000f5a:	2002      	movs	r0, #2
 8000f5c:	f7ff fbd4 	bl	8000708 <Usb_SendKeyPress>
				  Usb_ReleaseKeys();
 8000f60:	f7ff fbf0 	bl	8000744 <Usb_ReleaseKeys>
			  }
			  else{
				  Usb_SendKeyPress(0x00,USB_USAGE_ID_L);
				  Usb_ReleaseKeys();
			  }
		  	  break;
 8000f64:	e11d      	b.n	80011a2 <main+0x9f6>
				  Usb_SendKeyPress(0x00,USB_USAGE_ID_L);
 8000f66:	210f      	movs	r1, #15
 8000f68:	2000      	movs	r0, #0
 8000f6a:	f7ff fbcd 	bl	8000708 <Usb_SendKeyPress>
				  Usb_ReleaseKeys();
 8000f6e:	f7ff fbe9 	bl	8000744 <Usb_ReleaseKeys>
		  	  break;
 8000f72:	e116      	b.n	80011a2 <main+0x9f6>

		  case BUTTON_1_3_4_PRESSED:
			  if(caps_LckPressed){
 8000f74:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d006      	beq.n	8000f8a <main+0x7de>
				  Usb_SendKeyPress(LEFT_SHIFT,USB_USAGE_ID_M);
 8000f7c:	2110      	movs	r1, #16
 8000f7e:	2002      	movs	r0, #2
 8000f80:	f7ff fbc2 	bl	8000708 <Usb_SendKeyPress>
				  Usb_ReleaseKeys();
 8000f84:	f7ff fbde 	bl	8000744 <Usb_ReleaseKeys>
			  }
			  else{
				  Usb_SendKeyPress(0x00,USB_USAGE_ID_M);
				  Usb_ReleaseKeys();
			  }
		  	  break;
 8000f88:	e10b      	b.n	80011a2 <main+0x9f6>
				  Usb_SendKeyPress(0x00,USB_USAGE_ID_M);
 8000f8a:	2110      	movs	r1, #16
 8000f8c:	2000      	movs	r0, #0
 8000f8e:	f7ff fbbb 	bl	8000708 <Usb_SendKeyPress>
				  Usb_ReleaseKeys();
 8000f92:	f7ff fbd7 	bl	8000744 <Usb_ReleaseKeys>
		  	  break;
 8000f96:	e104      	b.n	80011a2 <main+0x9f6>

		  case BUTTON_1_3_4_5_PRESSED:
		  	  if(caps_LckPressed){
 8000f98:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d006      	beq.n	8000fae <main+0x802>
		  		  Usb_SendKeyPress(LEFT_SHIFT,USB_USAGE_ID_N);
 8000fa0:	2111      	movs	r1, #17
 8000fa2:	2002      	movs	r0, #2
 8000fa4:	f7ff fbb0 	bl	8000708 <Usb_SendKeyPress>
		  		  Usb_ReleaseKeys();
 8000fa8:	f7ff fbcc 	bl	8000744 <Usb_ReleaseKeys>
		  	  }
		  	  else{
		  		  Usb_SendKeyPress(0x00,USB_USAGE_ID_N);
		  		  Usb_ReleaseKeys();
		  	  }
		  	 break;
 8000fac:	e0f9      	b.n	80011a2 <main+0x9f6>
		  		  Usb_SendKeyPress(0x00,USB_USAGE_ID_N);
 8000fae:	2111      	movs	r1, #17
 8000fb0:	2000      	movs	r0, #0
 8000fb2:	f7ff fba9 	bl	8000708 <Usb_SendKeyPress>
		  		  Usb_ReleaseKeys();
 8000fb6:	f7ff fbc5 	bl	8000744 <Usb_ReleaseKeys>
		  	 break;
 8000fba:	e0f2      	b.n	80011a2 <main+0x9f6>

		  case BUTTON_1_3_5_PRESSED:
			  if(caps_LckPressed){
 8000fbc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d006      	beq.n	8000fd2 <main+0x826>
				  Usb_SendKeyPress(LEFT_SHIFT,USB_USAGE_ID_O);
 8000fc4:	2112      	movs	r1, #18
 8000fc6:	2002      	movs	r0, #2
 8000fc8:	f7ff fb9e 	bl	8000708 <Usb_SendKeyPress>
				  Usb_ReleaseKeys();
 8000fcc:	f7ff fbba 	bl	8000744 <Usb_ReleaseKeys>
			  }
			  else{
				  Usb_SendKeyPress(0x00,USB_USAGE_ID_O);
				  Usb_ReleaseKeys();
			  }
			  break;
 8000fd0:	e0e7      	b.n	80011a2 <main+0x9f6>
				  Usb_SendKeyPress(0x00,USB_USAGE_ID_O);
 8000fd2:	2112      	movs	r1, #18
 8000fd4:	2000      	movs	r0, #0
 8000fd6:	f7ff fb97 	bl	8000708 <Usb_SendKeyPress>
				  Usb_ReleaseKeys();
 8000fda:	f7ff fbb3 	bl	8000744 <Usb_ReleaseKeys>
			  break;
 8000fde:	e0e0      	b.n	80011a2 <main+0x9f6>

		 case BUTTON_1_2_3_4_PRESSED:
			if(caps_LckPressed){
 8000fe0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d006      	beq.n	8000ff6 <main+0x84a>
				Usb_SendKeyPress(LEFT_SHIFT,USB_USAGE_ID_P);
 8000fe8:	2113      	movs	r1, #19
 8000fea:	2002      	movs	r0, #2
 8000fec:	f7ff fb8c 	bl	8000708 <Usb_SendKeyPress>
				Usb_ReleaseKeys();
 8000ff0:	f7ff fba8 	bl	8000744 <Usb_ReleaseKeys>
			}
			else{
				Usb_SendKeyPress(0x00,USB_USAGE_ID_P);
				Usb_ReleaseKeys();
			}
		   break;
 8000ff4:	e0d5      	b.n	80011a2 <main+0x9f6>
				Usb_SendKeyPress(0x00,USB_USAGE_ID_P);
 8000ff6:	2113      	movs	r1, #19
 8000ff8:	2000      	movs	r0, #0
 8000ffa:	f7ff fb85 	bl	8000708 <Usb_SendKeyPress>
				Usb_ReleaseKeys();
 8000ffe:	f7ff fba1 	bl	8000744 <Usb_ReleaseKeys>
		   break;
 8001002:	e0ce      	b.n	80011a2 <main+0x9f6>

		case BUTTON_1_2_3_4_5_PRESSED:
			if(caps_LckPressed){
 8001004:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001008:	2b00      	cmp	r3, #0
 800100a:	d006      	beq.n	800101a <main+0x86e>
				Usb_SendKeyPress(LEFT_SHIFT,USB_USAGE_ID_Q);
 800100c:	2114      	movs	r1, #20
 800100e:	2002      	movs	r0, #2
 8001010:	f7ff fb7a 	bl	8000708 <Usb_SendKeyPress>
				Usb_ReleaseKeys();
 8001014:	f7ff fb96 	bl	8000744 <Usb_ReleaseKeys>
			}
			else{
				Usb_SendKeyPress(0x00,USB_USAGE_ID_Q);
				Usb_ReleaseKeys();
			}
		   break;
 8001018:	e0c3      	b.n	80011a2 <main+0x9f6>
				Usb_SendKeyPress(0x00,USB_USAGE_ID_Q);
 800101a:	2114      	movs	r1, #20
 800101c:	2000      	movs	r0, #0
 800101e:	f7ff fb73 	bl	8000708 <Usb_SendKeyPress>
				Usb_ReleaseKeys();
 8001022:	f7ff fb8f 	bl	8000744 <Usb_ReleaseKeys>
		   break;
 8001026:	e0bc      	b.n	80011a2 <main+0x9f6>

		case BUTTON_1_2_3_5_PRESSED:
			if(caps_LckPressed){
 8001028:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800102c:	2b00      	cmp	r3, #0
 800102e:	d006      	beq.n	800103e <main+0x892>
				Usb_SendKeyPress(LEFT_SHIFT,USB_USAGE_ID_R);
 8001030:	2115      	movs	r1, #21
 8001032:	2002      	movs	r0, #2
 8001034:	f7ff fb68 	bl	8000708 <Usb_SendKeyPress>
				Usb_ReleaseKeys();
 8001038:	f7ff fb84 	bl	8000744 <Usb_ReleaseKeys>
			}
			else{
				Usb_SendKeyPress(0x00,USB_USAGE_ID_R);
				Usb_ReleaseKeys();
			}
			break;
 800103c:	e0b1      	b.n	80011a2 <main+0x9f6>
				Usb_SendKeyPress(0x00,USB_USAGE_ID_R);
 800103e:	2115      	movs	r1, #21
 8001040:	2000      	movs	r0, #0
 8001042:	f7ff fb61 	bl	8000708 <Usb_SendKeyPress>
				Usb_ReleaseKeys();
 8001046:	f7ff fb7d 	bl	8000744 <Usb_ReleaseKeys>
			break;
 800104a:	e0aa      	b.n	80011a2 <main+0x9f6>

		case BUTTON_2_3_4_PRESSED:
			if(caps_LckPressed){
 800104c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001050:	2b00      	cmp	r3, #0
 8001052:	d006      	beq.n	8001062 <main+0x8b6>
				Usb_SendKeyPress(LEFT_SHIFT,USB_USAGE_ID_S);
 8001054:	2116      	movs	r1, #22
 8001056:	2002      	movs	r0, #2
 8001058:	f7ff fb56 	bl	8000708 <Usb_SendKeyPress>
				Usb_ReleaseKeys();
 800105c:	f7ff fb72 	bl	8000744 <Usb_ReleaseKeys>
			}
			else{
				Usb_SendKeyPress(0x00,USB_USAGE_ID_S);
				Usb_ReleaseKeys();
			}
			break;
 8001060:	e09f      	b.n	80011a2 <main+0x9f6>
				Usb_SendKeyPress(0x00,USB_USAGE_ID_S);
 8001062:	2116      	movs	r1, #22
 8001064:	2000      	movs	r0, #0
 8001066:	f7ff fb4f 	bl	8000708 <Usb_SendKeyPress>
				Usb_ReleaseKeys();
 800106a:	f7ff fb6b 	bl	8000744 <Usb_ReleaseKeys>
			break;
 800106e:	e098      	b.n	80011a2 <main+0x9f6>

		case BUTTON_2_3_4_5_PRESSED:
			if(caps_LckPressed){
 8001070:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001074:	2b00      	cmp	r3, #0
 8001076:	d006      	beq.n	8001086 <main+0x8da>
				Usb_SendKeyPress(LEFT_SHIFT,USB_USAGE_ID_T);
 8001078:	2117      	movs	r1, #23
 800107a:	2002      	movs	r0, #2
 800107c:	f7ff fb44 	bl	8000708 <Usb_SendKeyPress>
				Usb_ReleaseKeys();
 8001080:	f7ff fb60 	bl	8000744 <Usb_ReleaseKeys>
			}
			else{
				Usb_SendKeyPress(0x00,USB_USAGE_ID_T);
				Usb_ReleaseKeys();
			}
			break;
 8001084:	e08d      	b.n	80011a2 <main+0x9f6>
				Usb_SendKeyPress(0x00,USB_USAGE_ID_T);
 8001086:	2117      	movs	r1, #23
 8001088:	2000      	movs	r0, #0
 800108a:	f7ff fb3d 	bl	8000708 <Usb_SendKeyPress>
				Usb_ReleaseKeys();
 800108e:	f7ff fb59 	bl	8000744 <Usb_ReleaseKeys>
			break;
 8001092:	e086      	b.n	80011a2 <main+0x9f6>

		case BUTTON_1_3_6_PRESSED:
			if(caps_LckPressed){
 8001094:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001098:	2b00      	cmp	r3, #0
 800109a:	d006      	beq.n	80010aa <main+0x8fe>
				Usb_SendKeyPress(LEFT_SHIFT,USB_USAGE_ID_U);
 800109c:	2118      	movs	r1, #24
 800109e:	2002      	movs	r0, #2
 80010a0:	f7ff fb32 	bl	8000708 <Usb_SendKeyPress>
				Usb_ReleaseKeys();
 80010a4:	f7ff fb4e 	bl	8000744 <Usb_ReleaseKeys>
			}
			else{
				Usb_SendKeyPress(0x00,USB_USAGE_ID_U);
				Usb_ReleaseKeys();
			}
			break;
 80010a8:	e07b      	b.n	80011a2 <main+0x9f6>
				Usb_SendKeyPress(0x00,USB_USAGE_ID_U);
 80010aa:	2118      	movs	r1, #24
 80010ac:	2000      	movs	r0, #0
 80010ae:	f7ff fb2b 	bl	8000708 <Usb_SendKeyPress>
				Usb_ReleaseKeys();
 80010b2:	f7ff fb47 	bl	8000744 <Usb_ReleaseKeys>
			break;
 80010b6:	e074      	b.n	80011a2 <main+0x9f6>

		case BUTTON_1_2_3_6_PRESSED:
			if(caps_LckPressed){
 80010b8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d006      	beq.n	80010ce <main+0x922>
				Usb_SendKeyPress(LEFT_SHIFT,USB_USAGE_ID_V);
 80010c0:	2119      	movs	r1, #25
 80010c2:	2002      	movs	r0, #2
 80010c4:	f7ff fb20 	bl	8000708 <Usb_SendKeyPress>
				Usb_ReleaseKeys();
 80010c8:	f7ff fb3c 	bl	8000744 <Usb_ReleaseKeys>
			}
			else{
				Usb_SendKeyPress(0x00,USB_USAGE_ID_V);
				Usb_ReleaseKeys();
			}
			break;
 80010cc:	e069      	b.n	80011a2 <main+0x9f6>
				Usb_SendKeyPress(0x00,USB_USAGE_ID_V);
 80010ce:	2119      	movs	r1, #25
 80010d0:	2000      	movs	r0, #0
 80010d2:	f7ff fb19 	bl	8000708 <Usb_SendKeyPress>
				Usb_ReleaseKeys();
 80010d6:	f7ff fb35 	bl	8000744 <Usb_ReleaseKeys>
			break;
 80010da:	e062      	b.n	80011a2 <main+0x9f6>

		case BUTTON_2_4_5_6_PRESSED:
			if(caps_LckPressed){
 80010dc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d006      	beq.n	80010f2 <main+0x946>
				Usb_SendKeyPress(LEFT_SHIFT,USB_USAGE_ID_W);
 80010e4:	211a      	movs	r1, #26
 80010e6:	2002      	movs	r0, #2
 80010e8:	f7ff fb0e 	bl	8000708 <Usb_SendKeyPress>
				Usb_ReleaseKeys();
 80010ec:	f7ff fb2a 	bl	8000744 <Usb_ReleaseKeys>
			}
			else{
				Usb_SendKeyPress(0x00,USB_USAGE_ID_W);
				Usb_ReleaseKeys();
			}
			break;
 80010f0:	e057      	b.n	80011a2 <main+0x9f6>
				Usb_SendKeyPress(0x00,USB_USAGE_ID_W);
 80010f2:	211a      	movs	r1, #26
 80010f4:	2000      	movs	r0, #0
 80010f6:	f7ff fb07 	bl	8000708 <Usb_SendKeyPress>
				Usb_ReleaseKeys();
 80010fa:	f7ff fb23 	bl	8000744 <Usb_ReleaseKeys>
			break;
 80010fe:	e050      	b.n	80011a2 <main+0x9f6>

		case BUTTON_1_3_4_6_PRESSED:
			if(caps_LckPressed){
 8001100:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001104:	2b00      	cmp	r3, #0
 8001106:	d006      	beq.n	8001116 <main+0x96a>
				Usb_SendKeyPress(LEFT_SHIFT,USB_USAGE_ID_X);
 8001108:	211b      	movs	r1, #27
 800110a:	2002      	movs	r0, #2
 800110c:	f7ff fafc 	bl	8000708 <Usb_SendKeyPress>
				Usb_ReleaseKeys();
 8001110:	f7ff fb18 	bl	8000744 <Usb_ReleaseKeys>
			}
			else{
				Usb_SendKeyPress(0x00,USB_USAGE_ID_X);
				Usb_ReleaseKeys();
			}
			break;
 8001114:	e045      	b.n	80011a2 <main+0x9f6>
				Usb_SendKeyPress(0x00,USB_USAGE_ID_X);
 8001116:	211b      	movs	r1, #27
 8001118:	2000      	movs	r0, #0
 800111a:	f7ff faf5 	bl	8000708 <Usb_SendKeyPress>
				Usb_ReleaseKeys();
 800111e:	f7ff fb11 	bl	8000744 <Usb_ReleaseKeys>
			break;
 8001122:	e03e      	b.n	80011a2 <main+0x9f6>

		case BUTTON_1_3_4_5_6_PRESSED:
			if(caps_LckPressed){
 8001124:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001128:	2b00      	cmp	r3, #0
 800112a:	d006      	beq.n	800113a <main+0x98e>
				Usb_SendKeyPress(LEFT_SHIFT,USB_USAGE_ID_Y);
 800112c:	211c      	movs	r1, #28
 800112e:	2002      	movs	r0, #2
 8001130:	f7ff faea 	bl	8000708 <Usb_SendKeyPress>
				Usb_ReleaseKeys();
 8001134:	f7ff fb06 	bl	8000744 <Usb_ReleaseKeys>
			}
			else{
				Usb_SendKeyPress(0x00,USB_USAGE_ID_Y);
				Usb_ReleaseKeys();
			}
			break;
 8001138:	e033      	b.n	80011a2 <main+0x9f6>
				Usb_SendKeyPress(0x00,USB_USAGE_ID_Y);
 800113a:	211c      	movs	r1, #28
 800113c:	2000      	movs	r0, #0
 800113e:	f7ff fae3 	bl	8000708 <Usb_SendKeyPress>
				Usb_ReleaseKeys();
 8001142:	f7ff faff 	bl	8000744 <Usb_ReleaseKeys>
			break;
 8001146:	e02c      	b.n	80011a2 <main+0x9f6>

		 case BUTTON_1_3_5_6_PRESSED:
			 if(caps_LckPressed){
 8001148:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800114c:	2b00      	cmp	r3, #0
 800114e:	d006      	beq.n	800115e <main+0x9b2>
				Usb_SendKeyPress(LEFT_SHIFT,USB_USAGE_ID_Z);
 8001150:	211d      	movs	r1, #29
 8001152:	2002      	movs	r0, #2
 8001154:	f7ff fad8 	bl	8000708 <Usb_SendKeyPress>
				Usb_ReleaseKeys();
 8001158:	f7ff faf4 	bl	8000744 <Usb_ReleaseKeys>
			}
			else{
				Usb_SendKeyPress(0x00,USB_USAGE_ID_Z);
				Usb_ReleaseKeys();
			}
			break;
 800115c:	e021      	b.n	80011a2 <main+0x9f6>
				Usb_SendKeyPress(0x00,USB_USAGE_ID_Z);
 800115e:	211d      	movs	r1, #29
 8001160:	2000      	movs	r0, #0
 8001162:	f7ff fad1 	bl	8000708 <Usb_SendKeyPress>
				Usb_ReleaseKeys();
 8001166:	f7ff faed 	bl	8000744 <Usb_ReleaseKeys>
			break;
 800116a:	e01a      	b.n	80011a2 <main+0x9f6>

		  case BUTTON_SPACE_PRESSED:
			  Usb_SendKeyPress(0x00,USB_USAGE_ID_SPACE);
 800116c:	212c      	movs	r1, #44	; 0x2c
 800116e:	2000      	movs	r0, #0
 8001170:	f7ff faca 	bl	8000708 <Usb_SendKeyPress>
			  Usb_ReleaseKeys();
 8001174:	f7ff fae6 	bl	8000744 <Usb_ReleaseKeys>
			  break;
 8001178:	e013      	b.n	80011a2 <main+0x9f6>

		  case BUTTON_BACKSPACE_PRESSED:
			  Usb_SendKeyPress(0x00,USB_USAGE_ID_BACKSPACE);
 800117a:	212a      	movs	r1, #42	; 0x2a
 800117c:	2000      	movs	r0, #0
 800117e:	f7ff fac3 	bl	8000708 <Usb_SendKeyPress>
			  Usb_ReleaseKeys();
 8001182:	f7ff fadf 	bl	8000744 <Usb_ReleaseKeys>
			  break;
 8001186:	e00c      	b.n	80011a2 <main+0x9f6>

		  case CAPS_LCK_PRESSED:
			  caps_LckPressed ^= 1;
 8001188:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800118c:	f083 0301 	eor.w	r3, r3, #1
 8001190:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			  break;
 8001194:	e005      	b.n	80011a2 <main+0x9f6>

		  default:
			 // buttonRegister = 0;
			  Usb_ReleaseKeys();
 8001196:	f7ff fad5 	bl	8000744 <Usb_ReleaseKeys>
			  Button_pressTimeElapsed = 0;
 800119a:	4b04      	ldr	r3, [pc, #16]	; (80011ac <main+0xa00>)
 800119c:	2200      	movs	r2, #0
 800119e:	701a      	strb	r2, [r3, #0]
			  break;
 80011a0:	bf00      	nop
		  }
		  //Usb_ReleaseKeys();
		  buttonRegister = 0;
 80011a2:	2300      	movs	r3, #0
 80011a4:	80fb      	strh	r3, [r7, #6]
	  slide_Switch = GPIOC->IDR & SLIDE_SW;
 80011a6:	f7ff bb35 	b.w	8000814 <main+0x68>
 80011aa:	bf00      	nop
 80011ac:	200001da 	.word	0x200001da

080011b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b094      	sub	sp, #80	; 0x50
 80011b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011b6:	f107 0320 	add.w	r3, r7, #32
 80011ba:	2230      	movs	r2, #48	; 0x30
 80011bc:	2100      	movs	r1, #0
 80011be:	4618      	mov	r0, r3
 80011c0:	f005 fc8e 	bl	8006ae0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011c4:	f107 030c 	add.w	r3, r7, #12
 80011c8:	2200      	movs	r2, #0
 80011ca:	601a      	str	r2, [r3, #0]
 80011cc:	605a      	str	r2, [r3, #4]
 80011ce:	609a      	str	r2, [r3, #8]
 80011d0:	60da      	str	r2, [r3, #12]
 80011d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011d4:	2300      	movs	r3, #0
 80011d6:	60bb      	str	r3, [r7, #8]
 80011d8:	4b29      	ldr	r3, [pc, #164]	; (8001280 <SystemClock_Config+0xd0>)
 80011da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011dc:	4a28      	ldr	r2, [pc, #160]	; (8001280 <SystemClock_Config+0xd0>)
 80011de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011e2:	6413      	str	r3, [r2, #64]	; 0x40
 80011e4:	4b26      	ldr	r3, [pc, #152]	; (8001280 <SystemClock_Config+0xd0>)
 80011e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ec:	60bb      	str	r3, [r7, #8]
 80011ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011f0:	2300      	movs	r3, #0
 80011f2:	607b      	str	r3, [r7, #4]
 80011f4:	4b23      	ldr	r3, [pc, #140]	; (8001284 <SystemClock_Config+0xd4>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a22      	ldr	r2, [pc, #136]	; (8001284 <SystemClock_Config+0xd4>)
 80011fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011fe:	6013      	str	r3, [r2, #0]
 8001200:	4b20      	ldr	r3, [pc, #128]	; (8001284 <SystemClock_Config+0xd4>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001208:	607b      	str	r3, [r7, #4]
 800120a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800120c:	2303      	movs	r3, #3
 800120e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001210:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001214:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001216:	2301      	movs	r3, #1
 8001218:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800121a:	2310      	movs	r3, #16
 800121c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800121e:	2302      	movs	r3, #2
 8001220:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001222:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001226:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001228:	2304      	movs	r3, #4
 800122a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 800122c:	2360      	movs	r3, #96	; 0x60
 800122e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 8001230:	2306      	movs	r3, #6
 8001232:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001234:	2304      	movs	r3, #4
 8001236:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001238:	f107 0320 	add.w	r3, r7, #32
 800123c:	4618      	mov	r0, r3
 800123e:	f001 fde9 	bl	8002e14 <HAL_RCC_OscConfig>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001248:	f000 f85a 	bl	8001300 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800124c:	230f      	movs	r3, #15
 800124e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001250:	2300      	movs	r3, #0
 8001252:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001254:	2300      	movs	r3, #0
 8001256:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001258:	2300      	movs	r3, #0
 800125a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800125c:	2300      	movs	r3, #0
 800125e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001260:	f107 030c 	add.w	r3, r7, #12
 8001264:	2100      	movs	r1, #0
 8001266:	4618      	mov	r0, r3
 8001268:	f002 f844 	bl	80032f4 <HAL_RCC_ClockConfig>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001272:	f000 f845 	bl	8001300 <Error_Handler>
  }
}
 8001276:	bf00      	nop
 8001278:	3750      	adds	r7, #80	; 0x50
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	40023800 	.word	0x40023800
 8001284:	40007000 	.word	0x40007000

08001288 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b088      	sub	sp, #32
 800128c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800128e:	f107 030c 	add.w	r3, r7, #12
 8001292:	2200      	movs	r2, #0
 8001294:	601a      	str	r2, [r3, #0]
 8001296:	605a      	str	r2, [r3, #4]
 8001298:	609a      	str	r2, [r3, #8]
 800129a:	60da      	str	r2, [r3, #12]
 800129c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800129e:	2300      	movs	r3, #0
 80012a0:	60bb      	str	r3, [r7, #8]
 80012a2:	4b15      	ldr	r3, [pc, #84]	; (80012f8 <MX_GPIO_Init+0x70>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a6:	4a14      	ldr	r2, [pc, #80]	; (80012f8 <MX_GPIO_Init+0x70>)
 80012a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012ac:	6313      	str	r3, [r2, #48]	; 0x30
 80012ae:	4b12      	ldr	r3, [pc, #72]	; (80012f8 <MX_GPIO_Init+0x70>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012b6:	60bb      	str	r3, [r7, #8]
 80012b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ba:	2300      	movs	r3, #0
 80012bc:	607b      	str	r3, [r7, #4]
 80012be:	4b0e      	ldr	r3, [pc, #56]	; (80012f8 <MX_GPIO_Init+0x70>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c2:	4a0d      	ldr	r2, [pc, #52]	; (80012f8 <MX_GPIO_Init+0x70>)
 80012c4:	f043 0301 	orr.w	r3, r3, #1
 80012c8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ca:	4b0b      	ldr	r3, [pc, #44]	; (80012f8 <MX_GPIO_Init+0x70>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ce:	f003 0301 	and.w	r3, r3, #1
 80012d2:	607b      	str	r3, [r7, #4]
 80012d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80012d6:	2301      	movs	r3, #1
 80012d8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012da:	2300      	movs	r3, #0
 80012dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012de:	2300      	movs	r3, #0
 80012e0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012e2:	f107 030c 	add.w	r3, r7, #12
 80012e6:	4619      	mov	r1, r3
 80012e8:	4804      	ldr	r0, [pc, #16]	; (80012fc <MX_GPIO_Init+0x74>)
 80012ea:	f000 fa8d 	bl	8001808 <HAL_GPIO_Init>

}
 80012ee:	bf00      	nop
 80012f0:	3720      	adds	r7, #32
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	40023800 	.word	0x40023800
 80012fc:	40020000 	.word	0x40020000

08001300 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001304:	bf00      	nop
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr
	...

08001310 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001310:	b480      	push	{r7}
 8001312:	b083      	sub	sp, #12
 8001314:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001316:	2300      	movs	r3, #0
 8001318:	607b      	str	r3, [r7, #4]
 800131a:	4b10      	ldr	r3, [pc, #64]	; (800135c <HAL_MspInit+0x4c>)
 800131c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800131e:	4a0f      	ldr	r2, [pc, #60]	; (800135c <HAL_MspInit+0x4c>)
 8001320:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001324:	6453      	str	r3, [r2, #68]	; 0x44
 8001326:	4b0d      	ldr	r3, [pc, #52]	; (800135c <HAL_MspInit+0x4c>)
 8001328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800132a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800132e:	607b      	str	r3, [r7, #4]
 8001330:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001332:	2300      	movs	r3, #0
 8001334:	603b      	str	r3, [r7, #0]
 8001336:	4b09      	ldr	r3, [pc, #36]	; (800135c <HAL_MspInit+0x4c>)
 8001338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133a:	4a08      	ldr	r2, [pc, #32]	; (800135c <HAL_MspInit+0x4c>)
 800133c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001340:	6413      	str	r3, [r2, #64]	; 0x40
 8001342:	4b06      	ldr	r3, [pc, #24]	; (800135c <HAL_MspInit+0x4c>)
 8001344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001346:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800134a:	603b      	str	r3, [r7, #0]
 800134c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800134e:	bf00      	nop
 8001350:	370c      	adds	r7, #12
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	40023800 	.word	0x40023800

08001360 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001364:	bf00      	nop
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr

0800136e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800136e:	b480      	push	{r7}
 8001370:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001372:	e7fe      	b.n	8001372 <HardFault_Handler+0x4>

08001374 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001378:	e7fe      	b.n	8001378 <MemManage_Handler+0x4>

0800137a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800137a:	b480      	push	{r7}
 800137c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800137e:	e7fe      	b.n	800137e <BusFault_Handler+0x4>

08001380 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001384:	e7fe      	b.n	8001384 <UsageFault_Handler+0x4>

08001386 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001386:	b480      	push	{r7}
 8001388:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800138a:	bf00      	nop
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr

08001394 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001398:	bf00      	nop
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr

080013a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013a2:	b480      	push	{r7}
 80013a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013a6:	bf00      	nop
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr

080013b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013b4:	f000 f8d4 	bl	8001560 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013b8:	bf00      	nop
 80013ba:	bd80      	pop	{r7, pc}

080013bc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80013c0:	4802      	ldr	r0, [pc, #8]	; (80013cc <OTG_FS_IRQHandler+0x10>)
 80013c2:	f000 fd0b 	bl	8001ddc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80013c6:	bf00      	nop
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	200006c8 	.word	0x200006c8

080013d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b086      	sub	sp, #24
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013d8:	4a14      	ldr	r2, [pc, #80]	; (800142c <_sbrk+0x5c>)
 80013da:	4b15      	ldr	r3, [pc, #84]	; (8001430 <_sbrk+0x60>)
 80013dc:	1ad3      	subs	r3, r2, r3
 80013de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013e4:	4b13      	ldr	r3, [pc, #76]	; (8001434 <_sbrk+0x64>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d102      	bne.n	80013f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013ec:	4b11      	ldr	r3, [pc, #68]	; (8001434 <_sbrk+0x64>)
 80013ee:	4a12      	ldr	r2, [pc, #72]	; (8001438 <_sbrk+0x68>)
 80013f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013f2:	4b10      	ldr	r3, [pc, #64]	; (8001434 <_sbrk+0x64>)
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4413      	add	r3, r2
 80013fa:	693a      	ldr	r2, [r7, #16]
 80013fc:	429a      	cmp	r2, r3
 80013fe:	d207      	bcs.n	8001410 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001400:	f005 fb34 	bl	8006a6c <__errno>
 8001404:	4602      	mov	r2, r0
 8001406:	230c      	movs	r3, #12
 8001408:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800140a:	f04f 33ff 	mov.w	r3, #4294967295
 800140e:	e009      	b.n	8001424 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001410:	4b08      	ldr	r3, [pc, #32]	; (8001434 <_sbrk+0x64>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001416:	4b07      	ldr	r3, [pc, #28]	; (8001434 <_sbrk+0x64>)
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4413      	add	r3, r2
 800141e:	4a05      	ldr	r2, [pc, #20]	; (8001434 <_sbrk+0x64>)
 8001420:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001422:	68fb      	ldr	r3, [r7, #12]
}
 8001424:	4618      	mov	r0, r3
 8001426:	3718      	adds	r7, #24
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	20020000 	.word	0x20020000
 8001430:	00000400 	.word	0x00000400
 8001434:	200001e4 	.word	0x200001e4
 8001438:	20000ad8 	.word	0x20000ad8

0800143c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001440:	4b08      	ldr	r3, [pc, #32]	; (8001464 <SystemInit+0x28>)
 8001442:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001446:	4a07      	ldr	r2, [pc, #28]	; (8001464 <SystemInit+0x28>)
 8001448:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800144c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001450:	4b04      	ldr	r3, [pc, #16]	; (8001464 <SystemInit+0x28>)
 8001452:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001456:	609a      	str	r2, [r3, #8]
#endif
}
 8001458:	bf00      	nop
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	e000ed00 	.word	0xe000ed00

08001468 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001468:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014a0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800146c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800146e:	e003      	b.n	8001478 <LoopCopyDataInit>

08001470 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001470:	4b0c      	ldr	r3, [pc, #48]	; (80014a4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001472:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001474:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001476:	3104      	adds	r1, #4

08001478 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001478:	480b      	ldr	r0, [pc, #44]	; (80014a8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800147a:	4b0c      	ldr	r3, [pc, #48]	; (80014ac <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800147c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800147e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001480:	d3f6      	bcc.n	8001470 <CopyDataInit>
  ldr  r2, =_sbss
 8001482:	4a0b      	ldr	r2, [pc, #44]	; (80014b0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001484:	e002      	b.n	800148c <LoopFillZerobss>

08001486 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001486:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001488:	f842 3b04 	str.w	r3, [r2], #4

0800148c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800148c:	4b09      	ldr	r3, [pc, #36]	; (80014b4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800148e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001490:	d3f9      	bcc.n	8001486 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001492:	f7ff ffd3 	bl	800143c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001496:	f005 faef 	bl	8006a78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800149a:	f7ff f987 	bl	80007ac <main>
  bx  lr    
 800149e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80014a0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80014a4:	08006d0c 	.word	0x08006d0c
  ldr  r0, =_sdata
 80014a8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80014ac:	200001bc 	.word	0x200001bc
  ldr  r2, =_sbss
 80014b0:	200001bc 	.word	0x200001bc
  ldr  r3, = _ebss
 80014b4:	20000ad4 	.word	0x20000ad4

080014b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014b8:	e7fe      	b.n	80014b8 <ADC_IRQHandler>
	...

080014bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80014c0:	4b0e      	ldr	r3, [pc, #56]	; (80014fc <HAL_Init+0x40>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a0d      	ldr	r2, [pc, #52]	; (80014fc <HAL_Init+0x40>)
 80014c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014ca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80014cc:	4b0b      	ldr	r3, [pc, #44]	; (80014fc <HAL_Init+0x40>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a0a      	ldr	r2, [pc, #40]	; (80014fc <HAL_Init+0x40>)
 80014d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014d6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014d8:	4b08      	ldr	r3, [pc, #32]	; (80014fc <HAL_Init+0x40>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a07      	ldr	r2, [pc, #28]	; (80014fc <HAL_Init+0x40>)
 80014de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014e4:	2003      	movs	r0, #3
 80014e6:	f000 f94d 	bl	8001784 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014ea:	2000      	movs	r0, #0
 80014ec:	f000 f808 	bl	8001500 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014f0:	f7ff ff0e 	bl	8001310 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014f4:	2300      	movs	r3, #0
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	40023c00 	.word	0x40023c00

08001500 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001508:	4b12      	ldr	r3, [pc, #72]	; (8001554 <HAL_InitTick+0x54>)
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	4b12      	ldr	r3, [pc, #72]	; (8001558 <HAL_InitTick+0x58>)
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	4619      	mov	r1, r3
 8001512:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001516:	fbb3 f3f1 	udiv	r3, r3, r1
 800151a:	fbb2 f3f3 	udiv	r3, r2, r3
 800151e:	4618      	mov	r0, r3
 8001520:	f000 f965 	bl	80017ee <HAL_SYSTICK_Config>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800152a:	2301      	movs	r3, #1
 800152c:	e00e      	b.n	800154c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2b0f      	cmp	r3, #15
 8001532:	d80a      	bhi.n	800154a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001534:	2200      	movs	r2, #0
 8001536:	6879      	ldr	r1, [r7, #4]
 8001538:	f04f 30ff 	mov.w	r0, #4294967295
 800153c:	f000 f92d 	bl	800179a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001540:	4a06      	ldr	r2, [pc, #24]	; (800155c <HAL_InitTick+0x5c>)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001546:	2300      	movs	r3, #0
 8001548:	e000      	b.n	800154c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
}
 800154c:	4618      	mov	r0, r3
 800154e:	3708      	adds	r7, #8
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	20000000 	.word	0x20000000
 8001558:	20000008 	.word	0x20000008
 800155c:	20000004 	.word	0x20000004

08001560 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001564:	4b06      	ldr	r3, [pc, #24]	; (8001580 <HAL_IncTick+0x20>)
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	461a      	mov	r2, r3
 800156a:	4b06      	ldr	r3, [pc, #24]	; (8001584 <HAL_IncTick+0x24>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4413      	add	r3, r2
 8001570:	4a04      	ldr	r2, [pc, #16]	; (8001584 <HAL_IncTick+0x24>)
 8001572:	6013      	str	r3, [r2, #0]
}
 8001574:	bf00      	nop
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
 8001580:	20000008 	.word	0x20000008
 8001584:	200001f4 	.word	0x200001f4

08001588 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  return uwTick;
 800158c:	4b03      	ldr	r3, [pc, #12]	; (800159c <HAL_GetTick+0x14>)
 800158e:	681b      	ldr	r3, [r3, #0]
}
 8001590:	4618      	mov	r0, r3
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	200001f4 	.word	0x200001f4

080015a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b084      	sub	sp, #16
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015a8:	f7ff ffee 	bl	8001588 <HAL_GetTick>
 80015ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015b8:	d005      	beq.n	80015c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015ba:	4b09      	ldr	r3, [pc, #36]	; (80015e0 <HAL_Delay+0x40>)
 80015bc:	781b      	ldrb	r3, [r3, #0]
 80015be:	461a      	mov	r2, r3
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	4413      	add	r3, r2
 80015c4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80015c6:	bf00      	nop
 80015c8:	f7ff ffde 	bl	8001588 <HAL_GetTick>
 80015cc:	4602      	mov	r2, r0
 80015ce:	68bb      	ldr	r3, [r7, #8]
 80015d0:	1ad3      	subs	r3, r2, r3
 80015d2:	68fa      	ldr	r2, [r7, #12]
 80015d4:	429a      	cmp	r2, r3
 80015d6:	d8f7      	bhi.n	80015c8 <HAL_Delay+0x28>
  {
  }
}
 80015d8:	bf00      	nop
 80015da:	3710      	adds	r7, #16
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	20000008 	.word	0x20000008

080015e4 <__NVIC_SetPriorityGrouping>:
{
 80015e4:	b480      	push	{r7}
 80015e6:	b085      	sub	sp, #20
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	f003 0307 	and.w	r3, r3, #7
 80015f2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015f4:	4b0c      	ldr	r3, [pc, #48]	; (8001628 <__NVIC_SetPriorityGrouping+0x44>)
 80015f6:	68db      	ldr	r3, [r3, #12]
 80015f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015fa:	68ba      	ldr	r2, [r7, #8]
 80015fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001600:	4013      	ands	r3, r2
 8001602:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800160c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001610:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001614:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001616:	4a04      	ldr	r2, [pc, #16]	; (8001628 <__NVIC_SetPriorityGrouping+0x44>)
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	60d3      	str	r3, [r2, #12]
}
 800161c:	bf00      	nop
 800161e:	3714      	adds	r7, #20
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr
 8001628:	e000ed00 	.word	0xe000ed00

0800162c <__NVIC_GetPriorityGrouping>:
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001630:	4b04      	ldr	r3, [pc, #16]	; (8001644 <__NVIC_GetPriorityGrouping+0x18>)
 8001632:	68db      	ldr	r3, [r3, #12]
 8001634:	0a1b      	lsrs	r3, r3, #8
 8001636:	f003 0307 	and.w	r3, r3, #7
}
 800163a:	4618      	mov	r0, r3
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr
 8001644:	e000ed00 	.word	0xe000ed00

08001648 <__NVIC_EnableIRQ>:
{
 8001648:	b480      	push	{r7}
 800164a:	b083      	sub	sp, #12
 800164c:	af00      	add	r7, sp, #0
 800164e:	4603      	mov	r3, r0
 8001650:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001652:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001656:	2b00      	cmp	r3, #0
 8001658:	db0b      	blt.n	8001672 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800165a:	79fb      	ldrb	r3, [r7, #7]
 800165c:	f003 021f 	and.w	r2, r3, #31
 8001660:	4907      	ldr	r1, [pc, #28]	; (8001680 <__NVIC_EnableIRQ+0x38>)
 8001662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001666:	095b      	lsrs	r3, r3, #5
 8001668:	2001      	movs	r0, #1
 800166a:	fa00 f202 	lsl.w	r2, r0, r2
 800166e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001672:	bf00      	nop
 8001674:	370c      	adds	r7, #12
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	e000e100 	.word	0xe000e100

08001684 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001684:	b480      	push	{r7}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
 800168a:	4603      	mov	r3, r0
 800168c:	6039      	str	r1, [r7, #0]
 800168e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001690:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001694:	2b00      	cmp	r3, #0
 8001696:	db0a      	blt.n	80016ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	b2da      	uxtb	r2, r3
 800169c:	490c      	ldr	r1, [pc, #48]	; (80016d0 <__NVIC_SetPriority+0x4c>)
 800169e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a2:	0112      	lsls	r2, r2, #4
 80016a4:	b2d2      	uxtb	r2, r2
 80016a6:	440b      	add	r3, r1
 80016a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016ac:	e00a      	b.n	80016c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	b2da      	uxtb	r2, r3
 80016b2:	4908      	ldr	r1, [pc, #32]	; (80016d4 <__NVIC_SetPriority+0x50>)
 80016b4:	79fb      	ldrb	r3, [r7, #7]
 80016b6:	f003 030f 	and.w	r3, r3, #15
 80016ba:	3b04      	subs	r3, #4
 80016bc:	0112      	lsls	r2, r2, #4
 80016be:	b2d2      	uxtb	r2, r2
 80016c0:	440b      	add	r3, r1
 80016c2:	761a      	strb	r2, [r3, #24]
}
 80016c4:	bf00      	nop
 80016c6:	370c      	adds	r7, #12
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr
 80016d0:	e000e100 	.word	0xe000e100
 80016d4:	e000ed00 	.word	0xe000ed00

080016d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016d8:	b480      	push	{r7}
 80016da:	b089      	sub	sp, #36	; 0x24
 80016dc:	af00      	add	r7, sp, #0
 80016de:	60f8      	str	r0, [r7, #12]
 80016e0:	60b9      	str	r1, [r7, #8]
 80016e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	f003 0307 	and.w	r3, r3, #7
 80016ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016ec:	69fb      	ldr	r3, [r7, #28]
 80016ee:	f1c3 0307 	rsb	r3, r3, #7
 80016f2:	2b04      	cmp	r3, #4
 80016f4:	bf28      	it	cs
 80016f6:	2304      	movcs	r3, #4
 80016f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016fa:	69fb      	ldr	r3, [r7, #28]
 80016fc:	3304      	adds	r3, #4
 80016fe:	2b06      	cmp	r3, #6
 8001700:	d902      	bls.n	8001708 <NVIC_EncodePriority+0x30>
 8001702:	69fb      	ldr	r3, [r7, #28]
 8001704:	3b03      	subs	r3, #3
 8001706:	e000      	b.n	800170a <NVIC_EncodePriority+0x32>
 8001708:	2300      	movs	r3, #0
 800170a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800170c:	f04f 32ff 	mov.w	r2, #4294967295
 8001710:	69bb      	ldr	r3, [r7, #24]
 8001712:	fa02 f303 	lsl.w	r3, r2, r3
 8001716:	43da      	mvns	r2, r3
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	401a      	ands	r2, r3
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001720:	f04f 31ff 	mov.w	r1, #4294967295
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	fa01 f303 	lsl.w	r3, r1, r3
 800172a:	43d9      	mvns	r1, r3
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001730:	4313      	orrs	r3, r2
         );
}
 8001732:	4618      	mov	r0, r3
 8001734:	3724      	adds	r7, #36	; 0x24
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr
	...

08001740 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	3b01      	subs	r3, #1
 800174c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001750:	d301      	bcc.n	8001756 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001752:	2301      	movs	r3, #1
 8001754:	e00f      	b.n	8001776 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001756:	4a0a      	ldr	r2, [pc, #40]	; (8001780 <SysTick_Config+0x40>)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	3b01      	subs	r3, #1
 800175c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800175e:	210f      	movs	r1, #15
 8001760:	f04f 30ff 	mov.w	r0, #4294967295
 8001764:	f7ff ff8e 	bl	8001684 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001768:	4b05      	ldr	r3, [pc, #20]	; (8001780 <SysTick_Config+0x40>)
 800176a:	2200      	movs	r2, #0
 800176c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800176e:	4b04      	ldr	r3, [pc, #16]	; (8001780 <SysTick_Config+0x40>)
 8001770:	2207      	movs	r2, #7
 8001772:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001774:	2300      	movs	r3, #0
}
 8001776:	4618      	mov	r0, r3
 8001778:	3708      	adds	r7, #8
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	e000e010 	.word	0xe000e010

08001784 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800178c:	6878      	ldr	r0, [r7, #4]
 800178e:	f7ff ff29 	bl	80015e4 <__NVIC_SetPriorityGrouping>
}
 8001792:	bf00      	nop
 8001794:	3708      	adds	r7, #8
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}

0800179a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800179a:	b580      	push	{r7, lr}
 800179c:	b086      	sub	sp, #24
 800179e:	af00      	add	r7, sp, #0
 80017a0:	4603      	mov	r3, r0
 80017a2:	60b9      	str	r1, [r7, #8]
 80017a4:	607a      	str	r2, [r7, #4]
 80017a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017a8:	2300      	movs	r3, #0
 80017aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017ac:	f7ff ff3e 	bl	800162c <__NVIC_GetPriorityGrouping>
 80017b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017b2:	687a      	ldr	r2, [r7, #4]
 80017b4:	68b9      	ldr	r1, [r7, #8]
 80017b6:	6978      	ldr	r0, [r7, #20]
 80017b8:	f7ff ff8e 	bl	80016d8 <NVIC_EncodePriority>
 80017bc:	4602      	mov	r2, r0
 80017be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017c2:	4611      	mov	r1, r2
 80017c4:	4618      	mov	r0, r3
 80017c6:	f7ff ff5d 	bl	8001684 <__NVIC_SetPriority>
}
 80017ca:	bf00      	nop
 80017cc:	3718      	adds	r7, #24
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}

080017d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017d2:	b580      	push	{r7, lr}
 80017d4:	b082      	sub	sp, #8
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	4603      	mov	r3, r0
 80017da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017e0:	4618      	mov	r0, r3
 80017e2:	f7ff ff31 	bl	8001648 <__NVIC_EnableIRQ>
}
 80017e6:	bf00      	nop
 80017e8:	3708      	adds	r7, #8
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}

080017ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017ee:	b580      	push	{r7, lr}
 80017f0:	b082      	sub	sp, #8
 80017f2:	af00      	add	r7, sp, #0
 80017f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017f6:	6878      	ldr	r0, [r7, #4]
 80017f8:	f7ff ffa2 	bl	8001740 <SysTick_Config>
 80017fc:	4603      	mov	r3, r0
}
 80017fe:	4618      	mov	r0, r3
 8001800:	3708      	adds	r7, #8
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
	...

08001808 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001808:	b480      	push	{r7}
 800180a:	b089      	sub	sp, #36	; 0x24
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
 8001810:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001812:	2300      	movs	r3, #0
 8001814:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001816:	2300      	movs	r3, #0
 8001818:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800181a:	2300      	movs	r3, #0
 800181c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800181e:	2300      	movs	r3, #0
 8001820:	61fb      	str	r3, [r7, #28]
 8001822:	e16b      	b.n	8001afc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001824:	2201      	movs	r2, #1
 8001826:	69fb      	ldr	r3, [r7, #28]
 8001828:	fa02 f303 	lsl.w	r3, r2, r3
 800182c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	697a      	ldr	r2, [r7, #20]
 8001834:	4013      	ands	r3, r2
 8001836:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001838:	693a      	ldr	r2, [r7, #16]
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	429a      	cmp	r2, r3
 800183e:	f040 815a 	bne.w	8001af6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	2b01      	cmp	r3, #1
 8001848:	d00b      	beq.n	8001862 <HAL_GPIO_Init+0x5a>
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	2b02      	cmp	r3, #2
 8001850:	d007      	beq.n	8001862 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001856:	2b11      	cmp	r3, #17
 8001858:	d003      	beq.n	8001862 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	2b12      	cmp	r3, #18
 8001860:	d130      	bne.n	80018c4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001868:	69fb      	ldr	r3, [r7, #28]
 800186a:	005b      	lsls	r3, r3, #1
 800186c:	2203      	movs	r2, #3
 800186e:	fa02 f303 	lsl.w	r3, r2, r3
 8001872:	43db      	mvns	r3, r3
 8001874:	69ba      	ldr	r2, [r7, #24]
 8001876:	4013      	ands	r3, r2
 8001878:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	68da      	ldr	r2, [r3, #12]
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	005b      	lsls	r3, r3, #1
 8001882:	fa02 f303 	lsl.w	r3, r2, r3
 8001886:	69ba      	ldr	r2, [r7, #24]
 8001888:	4313      	orrs	r3, r2
 800188a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	69ba      	ldr	r2, [r7, #24]
 8001890:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001898:	2201      	movs	r2, #1
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	fa02 f303 	lsl.w	r3, r2, r3
 80018a0:	43db      	mvns	r3, r3
 80018a2:	69ba      	ldr	r2, [r7, #24]
 80018a4:	4013      	ands	r3, r2
 80018a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	091b      	lsrs	r3, r3, #4
 80018ae:	f003 0201 	and.w	r2, r3, #1
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	fa02 f303 	lsl.w	r3, r2, r3
 80018b8:	69ba      	ldr	r2, [r7, #24]
 80018ba:	4313      	orrs	r3, r2
 80018bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	69ba      	ldr	r2, [r7, #24]
 80018c2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	005b      	lsls	r3, r3, #1
 80018ce:	2203      	movs	r2, #3
 80018d0:	fa02 f303 	lsl.w	r3, r2, r3
 80018d4:	43db      	mvns	r3, r3
 80018d6:	69ba      	ldr	r2, [r7, #24]
 80018d8:	4013      	ands	r3, r2
 80018da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	689a      	ldr	r2, [r3, #8]
 80018e0:	69fb      	ldr	r3, [r7, #28]
 80018e2:	005b      	lsls	r3, r3, #1
 80018e4:	fa02 f303 	lsl.w	r3, r2, r3
 80018e8:	69ba      	ldr	r2, [r7, #24]
 80018ea:	4313      	orrs	r3, r2
 80018ec:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	69ba      	ldr	r2, [r7, #24]
 80018f2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	2b02      	cmp	r3, #2
 80018fa:	d003      	beq.n	8001904 <HAL_GPIO_Init+0xfc>
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	2b12      	cmp	r3, #18
 8001902:	d123      	bne.n	800194c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001904:	69fb      	ldr	r3, [r7, #28]
 8001906:	08da      	lsrs	r2, r3, #3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	3208      	adds	r2, #8
 800190c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001910:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	f003 0307 	and.w	r3, r3, #7
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	220f      	movs	r2, #15
 800191c:	fa02 f303 	lsl.w	r3, r2, r3
 8001920:	43db      	mvns	r3, r3
 8001922:	69ba      	ldr	r2, [r7, #24]
 8001924:	4013      	ands	r3, r2
 8001926:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	691a      	ldr	r2, [r3, #16]
 800192c:	69fb      	ldr	r3, [r7, #28]
 800192e:	f003 0307 	and.w	r3, r3, #7
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	fa02 f303 	lsl.w	r3, r2, r3
 8001938:	69ba      	ldr	r2, [r7, #24]
 800193a:	4313      	orrs	r3, r2
 800193c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	08da      	lsrs	r2, r3, #3
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	3208      	adds	r2, #8
 8001946:	69b9      	ldr	r1, [r7, #24]
 8001948:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	005b      	lsls	r3, r3, #1
 8001956:	2203      	movs	r2, #3
 8001958:	fa02 f303 	lsl.w	r3, r2, r3
 800195c:	43db      	mvns	r3, r3
 800195e:	69ba      	ldr	r2, [r7, #24]
 8001960:	4013      	ands	r3, r2
 8001962:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f003 0203 	and.w	r2, r3, #3
 800196c:	69fb      	ldr	r3, [r7, #28]
 800196e:	005b      	lsls	r3, r3, #1
 8001970:	fa02 f303 	lsl.w	r3, r2, r3
 8001974:	69ba      	ldr	r2, [r7, #24]
 8001976:	4313      	orrs	r3, r2
 8001978:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	69ba      	ldr	r2, [r7, #24]
 800197e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001988:	2b00      	cmp	r3, #0
 800198a:	f000 80b4 	beq.w	8001af6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800198e:	2300      	movs	r3, #0
 8001990:	60fb      	str	r3, [r7, #12]
 8001992:	4b5f      	ldr	r3, [pc, #380]	; (8001b10 <HAL_GPIO_Init+0x308>)
 8001994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001996:	4a5e      	ldr	r2, [pc, #376]	; (8001b10 <HAL_GPIO_Init+0x308>)
 8001998:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800199c:	6453      	str	r3, [r2, #68]	; 0x44
 800199e:	4b5c      	ldr	r3, [pc, #368]	; (8001b10 <HAL_GPIO_Init+0x308>)
 80019a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019a6:	60fb      	str	r3, [r7, #12]
 80019a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019aa:	4a5a      	ldr	r2, [pc, #360]	; (8001b14 <HAL_GPIO_Init+0x30c>)
 80019ac:	69fb      	ldr	r3, [r7, #28]
 80019ae:	089b      	lsrs	r3, r3, #2
 80019b0:	3302      	adds	r3, #2
 80019b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80019b8:	69fb      	ldr	r3, [r7, #28]
 80019ba:	f003 0303 	and.w	r3, r3, #3
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	220f      	movs	r2, #15
 80019c2:	fa02 f303 	lsl.w	r3, r2, r3
 80019c6:	43db      	mvns	r3, r3
 80019c8:	69ba      	ldr	r2, [r7, #24]
 80019ca:	4013      	ands	r3, r2
 80019cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	4a51      	ldr	r2, [pc, #324]	; (8001b18 <HAL_GPIO_Init+0x310>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d02b      	beq.n	8001a2e <HAL_GPIO_Init+0x226>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	4a50      	ldr	r2, [pc, #320]	; (8001b1c <HAL_GPIO_Init+0x314>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d025      	beq.n	8001a2a <HAL_GPIO_Init+0x222>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	4a4f      	ldr	r2, [pc, #316]	; (8001b20 <HAL_GPIO_Init+0x318>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d01f      	beq.n	8001a26 <HAL_GPIO_Init+0x21e>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	4a4e      	ldr	r2, [pc, #312]	; (8001b24 <HAL_GPIO_Init+0x31c>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d019      	beq.n	8001a22 <HAL_GPIO_Init+0x21a>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	4a4d      	ldr	r2, [pc, #308]	; (8001b28 <HAL_GPIO_Init+0x320>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d013      	beq.n	8001a1e <HAL_GPIO_Init+0x216>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	4a4c      	ldr	r2, [pc, #304]	; (8001b2c <HAL_GPIO_Init+0x324>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d00d      	beq.n	8001a1a <HAL_GPIO_Init+0x212>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	4a4b      	ldr	r2, [pc, #300]	; (8001b30 <HAL_GPIO_Init+0x328>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d007      	beq.n	8001a16 <HAL_GPIO_Init+0x20e>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	4a4a      	ldr	r2, [pc, #296]	; (8001b34 <HAL_GPIO_Init+0x32c>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d101      	bne.n	8001a12 <HAL_GPIO_Init+0x20a>
 8001a0e:	2307      	movs	r3, #7
 8001a10:	e00e      	b.n	8001a30 <HAL_GPIO_Init+0x228>
 8001a12:	2308      	movs	r3, #8
 8001a14:	e00c      	b.n	8001a30 <HAL_GPIO_Init+0x228>
 8001a16:	2306      	movs	r3, #6
 8001a18:	e00a      	b.n	8001a30 <HAL_GPIO_Init+0x228>
 8001a1a:	2305      	movs	r3, #5
 8001a1c:	e008      	b.n	8001a30 <HAL_GPIO_Init+0x228>
 8001a1e:	2304      	movs	r3, #4
 8001a20:	e006      	b.n	8001a30 <HAL_GPIO_Init+0x228>
 8001a22:	2303      	movs	r3, #3
 8001a24:	e004      	b.n	8001a30 <HAL_GPIO_Init+0x228>
 8001a26:	2302      	movs	r3, #2
 8001a28:	e002      	b.n	8001a30 <HAL_GPIO_Init+0x228>
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e000      	b.n	8001a30 <HAL_GPIO_Init+0x228>
 8001a2e:	2300      	movs	r3, #0
 8001a30:	69fa      	ldr	r2, [r7, #28]
 8001a32:	f002 0203 	and.w	r2, r2, #3
 8001a36:	0092      	lsls	r2, r2, #2
 8001a38:	4093      	lsls	r3, r2
 8001a3a:	69ba      	ldr	r2, [r7, #24]
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a40:	4934      	ldr	r1, [pc, #208]	; (8001b14 <HAL_GPIO_Init+0x30c>)
 8001a42:	69fb      	ldr	r3, [r7, #28]
 8001a44:	089b      	lsrs	r3, r3, #2
 8001a46:	3302      	adds	r3, #2
 8001a48:	69ba      	ldr	r2, [r7, #24]
 8001a4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a4e:	4b3a      	ldr	r3, [pc, #232]	; (8001b38 <HAL_GPIO_Init+0x330>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	43db      	mvns	r3, r3
 8001a58:	69ba      	ldr	r2, [r7, #24]
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d003      	beq.n	8001a72 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001a6a:	69ba      	ldr	r2, [r7, #24]
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a72:	4a31      	ldr	r2, [pc, #196]	; (8001b38 <HAL_GPIO_Init+0x330>)
 8001a74:	69bb      	ldr	r3, [r7, #24]
 8001a76:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001a78:	4b2f      	ldr	r3, [pc, #188]	; (8001b38 <HAL_GPIO_Init+0x330>)
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	43db      	mvns	r3, r3
 8001a82:	69ba      	ldr	r2, [r7, #24]
 8001a84:	4013      	ands	r3, r2
 8001a86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d003      	beq.n	8001a9c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001a94:	69ba      	ldr	r2, [r7, #24]
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a9c:	4a26      	ldr	r2, [pc, #152]	; (8001b38 <HAL_GPIO_Init+0x330>)
 8001a9e:	69bb      	ldr	r3, [r7, #24]
 8001aa0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001aa2:	4b25      	ldr	r3, [pc, #148]	; (8001b38 <HAL_GPIO_Init+0x330>)
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	43db      	mvns	r3, r3
 8001aac:	69ba      	ldr	r2, [r7, #24]
 8001aae:	4013      	ands	r3, r2
 8001ab0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d003      	beq.n	8001ac6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001abe:	69ba      	ldr	r2, [r7, #24]
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ac6:	4a1c      	ldr	r2, [pc, #112]	; (8001b38 <HAL_GPIO_Init+0x330>)
 8001ac8:	69bb      	ldr	r3, [r7, #24]
 8001aca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001acc:	4b1a      	ldr	r3, [pc, #104]	; (8001b38 <HAL_GPIO_Init+0x330>)
 8001ace:	68db      	ldr	r3, [r3, #12]
 8001ad0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	43db      	mvns	r3, r3
 8001ad6:	69ba      	ldr	r2, [r7, #24]
 8001ad8:	4013      	ands	r3, r2
 8001ada:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d003      	beq.n	8001af0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001ae8:	69ba      	ldr	r2, [r7, #24]
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	4313      	orrs	r3, r2
 8001aee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001af0:	4a11      	ldr	r2, [pc, #68]	; (8001b38 <HAL_GPIO_Init+0x330>)
 8001af2:	69bb      	ldr	r3, [r7, #24]
 8001af4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	3301      	adds	r3, #1
 8001afa:	61fb      	str	r3, [r7, #28]
 8001afc:	69fb      	ldr	r3, [r7, #28]
 8001afe:	2b0f      	cmp	r3, #15
 8001b00:	f67f ae90 	bls.w	8001824 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b04:	bf00      	nop
 8001b06:	3724      	adds	r7, #36	; 0x24
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr
 8001b10:	40023800 	.word	0x40023800
 8001b14:	40013800 	.word	0x40013800
 8001b18:	40020000 	.word	0x40020000
 8001b1c:	40020400 	.word	0x40020400
 8001b20:	40020800 	.word	0x40020800
 8001b24:	40020c00 	.word	0x40020c00
 8001b28:	40021000 	.word	0x40021000
 8001b2c:	40021400 	.word	0x40021400
 8001b30:	40021800 	.word	0x40021800
 8001b34:	40021c00 	.word	0x40021c00
 8001b38:	40013c00 	.word	0x40013c00

08001b3c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001b3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b3e:	b08f      	sub	sp, #60	; 0x3c
 8001b40:	af0a      	add	r7, sp, #40	; 0x28
 8001b42:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d101      	bne.n	8001b4e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e10f      	b.n	8001d6e <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001b5a:	b2db      	uxtb	r3, r3
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d106      	bne.n	8001b6e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2200      	movs	r2, #0
 8001b64:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001b68:	6878      	ldr	r0, [r7, #4]
 8001b6a:	f004 fc95 	bl	8006498 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2203      	movs	r2, #3
 8001b72:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001b76:	68bb      	ldr	r3, [r7, #8]
 8001b78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d102      	bne.n	8001b88 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2200      	movs	r2, #0
 8001b86:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f001 fe90 	bl	80038b2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	603b      	str	r3, [r7, #0]
 8001b98:	687e      	ldr	r6, [r7, #4]
 8001b9a:	466d      	mov	r5, sp
 8001b9c:	f106 0410 	add.w	r4, r6, #16
 8001ba0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ba2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ba4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ba6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ba8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001bac:	e885 0003 	stmia.w	r5, {r0, r1}
 8001bb0:	1d33      	adds	r3, r6, #4
 8001bb2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001bb4:	6838      	ldr	r0, [r7, #0]
 8001bb6:	f001 fd67 	bl	8003688 <USB_CoreInit>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d005      	beq.n	8001bcc <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2202      	movs	r2, #2
 8001bc4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e0d0      	b.n	8001d6e <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	2100      	movs	r1, #0
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f001 fe7e 	bl	80038d4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bd8:	2300      	movs	r3, #0
 8001bda:	73fb      	strb	r3, [r7, #15]
 8001bdc:	e04a      	b.n	8001c74 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001bde:	7bfa      	ldrb	r2, [r7, #15]
 8001be0:	6879      	ldr	r1, [r7, #4]
 8001be2:	4613      	mov	r3, r2
 8001be4:	00db      	lsls	r3, r3, #3
 8001be6:	1a9b      	subs	r3, r3, r2
 8001be8:	009b      	lsls	r3, r3, #2
 8001bea:	440b      	add	r3, r1
 8001bec:	333d      	adds	r3, #61	; 0x3d
 8001bee:	2201      	movs	r2, #1
 8001bf0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001bf2:	7bfa      	ldrb	r2, [r7, #15]
 8001bf4:	6879      	ldr	r1, [r7, #4]
 8001bf6:	4613      	mov	r3, r2
 8001bf8:	00db      	lsls	r3, r3, #3
 8001bfa:	1a9b      	subs	r3, r3, r2
 8001bfc:	009b      	lsls	r3, r3, #2
 8001bfe:	440b      	add	r3, r1
 8001c00:	333c      	adds	r3, #60	; 0x3c
 8001c02:	7bfa      	ldrb	r2, [r7, #15]
 8001c04:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001c06:	7bfa      	ldrb	r2, [r7, #15]
 8001c08:	7bfb      	ldrb	r3, [r7, #15]
 8001c0a:	b298      	uxth	r0, r3
 8001c0c:	6879      	ldr	r1, [r7, #4]
 8001c0e:	4613      	mov	r3, r2
 8001c10:	00db      	lsls	r3, r3, #3
 8001c12:	1a9b      	subs	r3, r3, r2
 8001c14:	009b      	lsls	r3, r3, #2
 8001c16:	440b      	add	r3, r1
 8001c18:	3342      	adds	r3, #66	; 0x42
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001c1e:	7bfa      	ldrb	r2, [r7, #15]
 8001c20:	6879      	ldr	r1, [r7, #4]
 8001c22:	4613      	mov	r3, r2
 8001c24:	00db      	lsls	r3, r3, #3
 8001c26:	1a9b      	subs	r3, r3, r2
 8001c28:	009b      	lsls	r3, r3, #2
 8001c2a:	440b      	add	r3, r1
 8001c2c:	333f      	adds	r3, #63	; 0x3f
 8001c2e:	2200      	movs	r2, #0
 8001c30:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001c32:	7bfa      	ldrb	r2, [r7, #15]
 8001c34:	6879      	ldr	r1, [r7, #4]
 8001c36:	4613      	mov	r3, r2
 8001c38:	00db      	lsls	r3, r3, #3
 8001c3a:	1a9b      	subs	r3, r3, r2
 8001c3c:	009b      	lsls	r3, r3, #2
 8001c3e:	440b      	add	r3, r1
 8001c40:	3344      	adds	r3, #68	; 0x44
 8001c42:	2200      	movs	r2, #0
 8001c44:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001c46:	7bfa      	ldrb	r2, [r7, #15]
 8001c48:	6879      	ldr	r1, [r7, #4]
 8001c4a:	4613      	mov	r3, r2
 8001c4c:	00db      	lsls	r3, r3, #3
 8001c4e:	1a9b      	subs	r3, r3, r2
 8001c50:	009b      	lsls	r3, r3, #2
 8001c52:	440b      	add	r3, r1
 8001c54:	3348      	adds	r3, #72	; 0x48
 8001c56:	2200      	movs	r2, #0
 8001c58:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001c5a:	7bfa      	ldrb	r2, [r7, #15]
 8001c5c:	6879      	ldr	r1, [r7, #4]
 8001c5e:	4613      	mov	r3, r2
 8001c60:	00db      	lsls	r3, r3, #3
 8001c62:	1a9b      	subs	r3, r3, r2
 8001c64:	009b      	lsls	r3, r3, #2
 8001c66:	440b      	add	r3, r1
 8001c68:	3350      	adds	r3, #80	; 0x50
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c6e:	7bfb      	ldrb	r3, [r7, #15]
 8001c70:	3301      	adds	r3, #1
 8001c72:	73fb      	strb	r3, [r7, #15]
 8001c74:	7bfa      	ldrb	r2, [r7, #15]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	429a      	cmp	r2, r3
 8001c7c:	d3af      	bcc.n	8001bde <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c7e:	2300      	movs	r3, #0
 8001c80:	73fb      	strb	r3, [r7, #15]
 8001c82:	e044      	b.n	8001d0e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001c84:	7bfa      	ldrb	r2, [r7, #15]
 8001c86:	6879      	ldr	r1, [r7, #4]
 8001c88:	4613      	mov	r3, r2
 8001c8a:	00db      	lsls	r3, r3, #3
 8001c8c:	1a9b      	subs	r3, r3, r2
 8001c8e:	009b      	lsls	r3, r3, #2
 8001c90:	440b      	add	r3, r1
 8001c92:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001c96:	2200      	movs	r2, #0
 8001c98:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001c9a:	7bfa      	ldrb	r2, [r7, #15]
 8001c9c:	6879      	ldr	r1, [r7, #4]
 8001c9e:	4613      	mov	r3, r2
 8001ca0:	00db      	lsls	r3, r3, #3
 8001ca2:	1a9b      	subs	r3, r3, r2
 8001ca4:	009b      	lsls	r3, r3, #2
 8001ca6:	440b      	add	r3, r1
 8001ca8:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001cac:	7bfa      	ldrb	r2, [r7, #15]
 8001cae:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001cb0:	7bfa      	ldrb	r2, [r7, #15]
 8001cb2:	6879      	ldr	r1, [r7, #4]
 8001cb4:	4613      	mov	r3, r2
 8001cb6:	00db      	lsls	r3, r3, #3
 8001cb8:	1a9b      	subs	r3, r3, r2
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	440b      	add	r3, r1
 8001cbe:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001cc6:	7bfa      	ldrb	r2, [r7, #15]
 8001cc8:	6879      	ldr	r1, [r7, #4]
 8001cca:	4613      	mov	r3, r2
 8001ccc:	00db      	lsls	r3, r3, #3
 8001cce:	1a9b      	subs	r3, r3, r2
 8001cd0:	009b      	lsls	r3, r3, #2
 8001cd2:	440b      	add	r3, r1
 8001cd4:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001cd8:	2200      	movs	r2, #0
 8001cda:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001cdc:	7bfa      	ldrb	r2, [r7, #15]
 8001cde:	6879      	ldr	r1, [r7, #4]
 8001ce0:	4613      	mov	r3, r2
 8001ce2:	00db      	lsls	r3, r3, #3
 8001ce4:	1a9b      	subs	r3, r3, r2
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	440b      	add	r3, r1
 8001cea:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001cee:	2200      	movs	r2, #0
 8001cf0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001cf2:	7bfa      	ldrb	r2, [r7, #15]
 8001cf4:	6879      	ldr	r1, [r7, #4]
 8001cf6:	4613      	mov	r3, r2
 8001cf8:	00db      	lsls	r3, r3, #3
 8001cfa:	1a9b      	subs	r3, r3, r2
 8001cfc:	009b      	lsls	r3, r3, #2
 8001cfe:	440b      	add	r3, r1
 8001d00:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001d04:	2200      	movs	r2, #0
 8001d06:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d08:	7bfb      	ldrb	r3, [r7, #15]
 8001d0a:	3301      	adds	r3, #1
 8001d0c:	73fb      	strb	r3, [r7, #15]
 8001d0e:	7bfa      	ldrb	r2, [r7, #15]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	429a      	cmp	r2, r3
 8001d16:	d3b5      	bcc.n	8001c84 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	603b      	str	r3, [r7, #0]
 8001d1e:	687e      	ldr	r6, [r7, #4]
 8001d20:	466d      	mov	r5, sp
 8001d22:	f106 0410 	add.w	r4, r6, #16
 8001d26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d28:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d2c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d2e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001d32:	e885 0003 	stmia.w	r5, {r0, r1}
 8001d36:	1d33      	adds	r3, r6, #4
 8001d38:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d3a:	6838      	ldr	r0, [r7, #0]
 8001d3c:	f001 fdf4 	bl	8003928 <USB_DevInit>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d005      	beq.n	8001d52 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2202      	movs	r2, #2
 8001d4a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e00d      	b.n	8001d6e <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2200      	movs	r2, #0
 8001d56:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4618      	mov	r0, r3
 8001d68:	f002 fe3c 	bl	80049e4 <USB_DevDisconnect>

  return HAL_OK;
 8001d6c:	2300      	movs	r3, #0
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3714      	adds	r7, #20
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001d76 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001d76:	b580      	push	{r7, lr}
 8001d78:	b084      	sub	sp, #16
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	d101      	bne.n	8001d92 <HAL_PCD_Start+0x1c>
 8001d8e:	2302      	movs	r3, #2
 8001d90:	e020      	b.n	8001dd4 <HAL_PCD_Start+0x5e>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2201      	movs	r2, #1
 8001d96:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d109      	bne.n	8001db6 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001da6:	2b01      	cmp	r3, #1
 8001da8:	d005      	beq.n	8001db6 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dae:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f001 fd68 	bl	8003890 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f002 fdec 	bl	80049a2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001dd2:	2300      	movs	r3, #0
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	3710      	adds	r7, #16
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}

08001ddc <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001ddc:	b590      	push	{r4, r7, lr}
 8001dde:	b08d      	sub	sp, #52	; 0x34
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001dea:	6a3b      	ldr	r3, [r7, #32]
 8001dec:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4618      	mov	r0, r3
 8001df4:	f002 feaa 	bl	8004b4c <USB_GetMode>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	f040 839d 	bne.w	800253a <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4618      	mov	r0, r3
 8001e06:	f002 fe0e 	bl	8004a26 <USB_ReadInterrupts>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	f000 8393 	beq.w	8002538 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4618      	mov	r0, r3
 8001e18:	f002 fe05 	bl	8004a26 <USB_ReadInterrupts>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	f003 0302 	and.w	r3, r3, #2
 8001e22:	2b02      	cmp	r3, #2
 8001e24:	d107      	bne.n	8001e36 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	695a      	ldr	r2, [r3, #20]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f002 0202 	and.w	r2, r2, #2
 8001e34:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f002 fdf3 	bl	8004a26 <USB_ReadInterrupts>
 8001e40:	4603      	mov	r3, r0
 8001e42:	f003 0310 	and.w	r3, r3, #16
 8001e46:	2b10      	cmp	r3, #16
 8001e48:	d161      	bne.n	8001f0e <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	699a      	ldr	r2, [r3, #24]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f022 0210 	bic.w	r2, r2, #16
 8001e58:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8001e5a:	6a3b      	ldr	r3, [r7, #32]
 8001e5c:	6a1b      	ldr	r3, [r3, #32]
 8001e5e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001e60:	69bb      	ldr	r3, [r7, #24]
 8001e62:	f003 020f 	and.w	r2, r3, #15
 8001e66:	4613      	mov	r3, r2
 8001e68:	00db      	lsls	r3, r3, #3
 8001e6a:	1a9b      	subs	r3, r3, r2
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001e72:	687a      	ldr	r2, [r7, #4]
 8001e74:	4413      	add	r3, r2
 8001e76:	3304      	adds	r3, #4
 8001e78:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001e7a:	69bb      	ldr	r3, [r7, #24]
 8001e7c:	0c5b      	lsrs	r3, r3, #17
 8001e7e:	f003 030f 	and.w	r3, r3, #15
 8001e82:	2b02      	cmp	r3, #2
 8001e84:	d124      	bne.n	8001ed0 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001e86:	69ba      	ldr	r2, [r7, #24]
 8001e88:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d035      	beq.n	8001efe <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001e96:	69bb      	ldr	r3, [r7, #24]
 8001e98:	091b      	lsrs	r3, r3, #4
 8001e9a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001e9c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001ea0:	b29b      	uxth	r3, r3
 8001ea2:	461a      	mov	r2, r3
 8001ea4:	6a38      	ldr	r0, [r7, #32]
 8001ea6:	f002 fc59 	bl	800475c <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	68da      	ldr	r2, [r3, #12]
 8001eae:	69bb      	ldr	r3, [r7, #24]
 8001eb0:	091b      	lsrs	r3, r3, #4
 8001eb2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001eb6:	441a      	add	r2, r3
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	699a      	ldr	r2, [r3, #24]
 8001ec0:	69bb      	ldr	r3, [r7, #24]
 8001ec2:	091b      	lsrs	r3, r3, #4
 8001ec4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001ec8:	441a      	add	r2, r3
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	619a      	str	r2, [r3, #24]
 8001ece:	e016      	b.n	8001efe <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001ed0:	69bb      	ldr	r3, [r7, #24]
 8001ed2:	0c5b      	lsrs	r3, r3, #17
 8001ed4:	f003 030f 	and.w	r3, r3, #15
 8001ed8:	2b06      	cmp	r3, #6
 8001eda:	d110      	bne.n	8001efe <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001ee2:	2208      	movs	r2, #8
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	6a38      	ldr	r0, [r7, #32]
 8001ee8:	f002 fc38 	bl	800475c <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	699a      	ldr	r2, [r3, #24]
 8001ef0:	69bb      	ldr	r3, [r7, #24]
 8001ef2:	091b      	lsrs	r3, r3, #4
 8001ef4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001ef8:	441a      	add	r2, r3
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	699a      	ldr	r2, [r3, #24]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f042 0210 	orr.w	r2, r2, #16
 8001f0c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4618      	mov	r0, r3
 8001f14:	f002 fd87 	bl	8004a26 <USB_ReadInterrupts>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f1e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001f22:	d16e      	bne.n	8002002 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8001f24:	2300      	movs	r3, #0
 8001f26:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f002 fd8d 	bl	8004a4c <USB_ReadDevAllOutEpInterrupt>
 8001f32:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001f34:	e062      	b.n	8001ffc <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f38:	f003 0301 	and.w	r3, r3, #1
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d057      	beq.n	8001ff0 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f46:	b2d2      	uxtb	r2, r2
 8001f48:	4611      	mov	r1, r2
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f002 fdb2 	bl	8004ab4 <USB_ReadDevOutEPInterrupt>
 8001f50:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	f003 0301 	and.w	r3, r3, #1
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d00c      	beq.n	8001f76 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f5e:	015a      	lsls	r2, r3, #5
 8001f60:	69fb      	ldr	r3, [r7, #28]
 8001f62:	4413      	add	r3, r2
 8001f64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f68:	461a      	mov	r2, r3
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001f6e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f70:	6878      	ldr	r0, [r7, #4]
 8001f72:	f000 fd99 	bl	8002aa8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	f003 0308 	and.w	r3, r3, #8
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d00c      	beq.n	8001f9a <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f82:	015a      	lsls	r2, r3, #5
 8001f84:	69fb      	ldr	r3, [r7, #28]
 8001f86:	4413      	add	r3, r2
 8001f88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f8c:	461a      	mov	r2, r3
 8001f8e:	2308      	movs	r3, #8
 8001f90:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001f92:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f94:	6878      	ldr	r0, [r7, #4]
 8001f96:	f000 fe93 	bl	8002cc0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	f003 0310 	and.w	r3, r3, #16
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d008      	beq.n	8001fb6 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa6:	015a      	lsls	r2, r3, #5
 8001fa8:	69fb      	ldr	r3, [r7, #28]
 8001faa:	4413      	add	r3, r2
 8001fac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fb0:	461a      	mov	r2, r3
 8001fb2:	2310      	movs	r3, #16
 8001fb4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	f003 0320 	and.w	r3, r3, #32
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d008      	beq.n	8001fd2 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc2:	015a      	lsls	r2, r3, #5
 8001fc4:	69fb      	ldr	r3, [r7, #28]
 8001fc6:	4413      	add	r3, r2
 8001fc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fcc:	461a      	mov	r2, r3
 8001fce:	2320      	movs	r3, #32
 8001fd0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d009      	beq.n	8001ff0 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fde:	015a      	lsls	r2, r3, #5
 8001fe0:	69fb      	ldr	r3, [r7, #28]
 8001fe2:	4413      	add	r3, r2
 8001fe4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fe8:	461a      	mov	r2, r3
 8001fea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001fee:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff2:	3301      	adds	r3, #1
 8001ff4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ff8:	085b      	lsrs	r3, r3, #1
 8001ffa:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d199      	bne.n	8001f36 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4618      	mov	r0, r3
 8002008:	f002 fd0d 	bl	8004a26 <USB_ReadInterrupts>
 800200c:	4603      	mov	r3, r0
 800200e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002012:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002016:	f040 80c0 	bne.w	800219a <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4618      	mov	r0, r3
 8002020:	f002 fd2e 	bl	8004a80 <USB_ReadDevAllInEpInterrupt>
 8002024:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002026:	2300      	movs	r3, #0
 8002028:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800202a:	e0b2      	b.n	8002192 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800202c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800202e:	f003 0301 	and.w	r3, r3, #1
 8002032:	2b00      	cmp	r3, #0
 8002034:	f000 80a7 	beq.w	8002186 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800203e:	b2d2      	uxtb	r2, r2
 8002040:	4611      	mov	r1, r2
 8002042:	4618      	mov	r0, r3
 8002044:	f002 fd54 	bl	8004af0 <USB_ReadDevInEPInterrupt>
 8002048:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	f003 0301 	and.w	r3, r3, #1
 8002050:	2b00      	cmp	r3, #0
 8002052:	d057      	beq.n	8002104 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002056:	f003 030f 	and.w	r3, r3, #15
 800205a:	2201      	movs	r2, #1
 800205c:	fa02 f303 	lsl.w	r3, r2, r3
 8002060:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002068:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	43db      	mvns	r3, r3
 800206e:	69f9      	ldr	r1, [r7, #28]
 8002070:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002074:	4013      	ands	r3, r2
 8002076:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800207a:	015a      	lsls	r2, r3, #5
 800207c:	69fb      	ldr	r3, [r7, #28]
 800207e:	4413      	add	r3, r2
 8002080:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002084:	461a      	mov	r2, r3
 8002086:	2301      	movs	r3, #1
 8002088:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	691b      	ldr	r3, [r3, #16]
 800208e:	2b01      	cmp	r3, #1
 8002090:	d132      	bne.n	80020f8 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002092:	6879      	ldr	r1, [r7, #4]
 8002094:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002096:	4613      	mov	r3, r2
 8002098:	00db      	lsls	r3, r3, #3
 800209a:	1a9b      	subs	r3, r3, r2
 800209c:	009b      	lsls	r3, r3, #2
 800209e:	440b      	add	r3, r1
 80020a0:	3348      	adds	r3, #72	; 0x48
 80020a2:	6819      	ldr	r1, [r3, #0]
 80020a4:	6878      	ldr	r0, [r7, #4]
 80020a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020a8:	4613      	mov	r3, r2
 80020aa:	00db      	lsls	r3, r3, #3
 80020ac:	1a9b      	subs	r3, r3, r2
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	4403      	add	r3, r0
 80020b2:	3344      	adds	r3, #68	; 0x44
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4419      	add	r1, r3
 80020b8:	6878      	ldr	r0, [r7, #4]
 80020ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020bc:	4613      	mov	r3, r2
 80020be:	00db      	lsls	r3, r3, #3
 80020c0:	1a9b      	subs	r3, r3, r2
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	4403      	add	r3, r0
 80020c6:	3348      	adds	r3, #72	; 0x48
 80020c8:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80020ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d113      	bne.n	80020f8 <HAL_PCD_IRQHandler+0x31c>
 80020d0:	6879      	ldr	r1, [r7, #4]
 80020d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020d4:	4613      	mov	r3, r2
 80020d6:	00db      	lsls	r3, r3, #3
 80020d8:	1a9b      	subs	r3, r3, r2
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	440b      	add	r3, r1
 80020de:	3350      	adds	r3, #80	; 0x50
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d108      	bne.n	80020f8 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6818      	ldr	r0, [r3, #0]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80020f0:	461a      	mov	r2, r3
 80020f2:	2101      	movs	r1, #1
 80020f4:	f002 fd5c 	bl	8004bb0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80020f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020fa:	b2db      	uxtb	r3, r3
 80020fc:	4619      	mov	r1, r3
 80020fe:	6878      	ldr	r0, [r7, #4]
 8002100:	f004 fa4b 	bl	800659a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	f003 0308 	and.w	r3, r3, #8
 800210a:	2b00      	cmp	r3, #0
 800210c:	d008      	beq.n	8002120 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800210e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002110:	015a      	lsls	r2, r3, #5
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	4413      	add	r3, r2
 8002116:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800211a:	461a      	mov	r2, r3
 800211c:	2308      	movs	r3, #8
 800211e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	f003 0310 	and.w	r3, r3, #16
 8002126:	2b00      	cmp	r3, #0
 8002128:	d008      	beq.n	800213c <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800212a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800212c:	015a      	lsls	r2, r3, #5
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	4413      	add	r3, r2
 8002132:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002136:	461a      	mov	r2, r3
 8002138:	2310      	movs	r3, #16
 800213a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002142:	2b00      	cmp	r3, #0
 8002144:	d008      	beq.n	8002158 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002148:	015a      	lsls	r2, r3, #5
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	4413      	add	r3, r2
 800214e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002152:	461a      	mov	r2, r3
 8002154:	2340      	movs	r3, #64	; 0x40
 8002156:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	f003 0302 	and.w	r3, r3, #2
 800215e:	2b00      	cmp	r3, #0
 8002160:	d008      	beq.n	8002174 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002164:	015a      	lsls	r2, r3, #5
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	4413      	add	r3, r2
 800216a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800216e:	461a      	mov	r2, r3
 8002170:	2302      	movs	r3, #2
 8002172:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800217a:	2b00      	cmp	r3, #0
 800217c:	d003      	beq.n	8002186 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800217e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002180:	6878      	ldr	r0, [r7, #4]
 8002182:	f000 fc03 	bl	800298c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002188:	3301      	adds	r3, #1
 800218a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800218c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800218e:	085b      	lsrs	r3, r3, #1
 8002190:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002194:	2b00      	cmp	r3, #0
 8002196:	f47f af49 	bne.w	800202c <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4618      	mov	r0, r3
 80021a0:	f002 fc41 	bl	8004a26 <USB_ReadInterrupts>
 80021a4:	4603      	mov	r3, r0
 80021a6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80021aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80021ae:	d122      	bne.n	80021f6 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80021b0:	69fb      	ldr	r3, [r7, #28]
 80021b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	69fa      	ldr	r2, [r7, #28]
 80021ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80021be:	f023 0301 	bic.w	r3, r3, #1
 80021c2:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d108      	bne.n	80021e0 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2200      	movs	r2, #0
 80021d2:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80021d6:	2100      	movs	r1, #0
 80021d8:	6878      	ldr	r0, [r7, #4]
 80021da:	f000 fe0f 	bl	8002dfc <HAL_PCDEx_LPM_Callback>
 80021de:	e002      	b.n	80021e6 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80021e0:	6878      	ldr	r0, [r7, #4]
 80021e2:	f004 fa51 	bl	8006688 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	695a      	ldr	r2, [r3, #20]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80021f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4618      	mov	r0, r3
 80021fc:	f002 fc13 	bl	8004a26 <USB_ReadInterrupts>
 8002200:	4603      	mov	r3, r0
 8002202:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002206:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800220a:	d112      	bne.n	8002232 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800220c:	69fb      	ldr	r3, [r7, #28]
 800220e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	f003 0301 	and.w	r3, r3, #1
 8002218:	2b01      	cmp	r3, #1
 800221a:	d102      	bne.n	8002222 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800221c:	6878      	ldr	r0, [r7, #4]
 800221e:	f004 fa0d 	bl	800663c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	695a      	ldr	r2, [r3, #20]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002230:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4618      	mov	r0, r3
 8002238:	f002 fbf5 	bl	8004a26 <USB_ReadInterrupts>
 800223c:	4603      	mov	r3, r0
 800223e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002242:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002246:	f040 80c7 	bne.w	80023d8 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	69fa      	ldr	r2, [r7, #28]
 8002254:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002258:	f023 0301 	bic.w	r3, r3, #1
 800225c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	2110      	movs	r1, #16
 8002264:	4618      	mov	r0, r3
 8002266:	f001 fcc3 	bl	8003bf0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800226a:	2300      	movs	r3, #0
 800226c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800226e:	e056      	b.n	800231e <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002272:	015a      	lsls	r2, r3, #5
 8002274:	69fb      	ldr	r3, [r7, #28]
 8002276:	4413      	add	r3, r2
 8002278:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800227c:	461a      	mov	r2, r3
 800227e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002282:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002286:	015a      	lsls	r2, r3, #5
 8002288:	69fb      	ldr	r3, [r7, #28]
 800228a:	4413      	add	r3, r2
 800228c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002294:	0151      	lsls	r1, r2, #5
 8002296:	69fa      	ldr	r2, [r7, #28]
 8002298:	440a      	add	r2, r1
 800229a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800229e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80022a2:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80022a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022a6:	015a      	lsls	r2, r3, #5
 80022a8:	69fb      	ldr	r3, [r7, #28]
 80022aa:	4413      	add	r3, r2
 80022ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022b4:	0151      	lsls	r1, r2, #5
 80022b6:	69fa      	ldr	r2, [r7, #28]
 80022b8:	440a      	add	r2, r1
 80022ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80022be:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80022c2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80022c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022c6:	015a      	lsls	r2, r3, #5
 80022c8:	69fb      	ldr	r3, [r7, #28]
 80022ca:	4413      	add	r3, r2
 80022cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022d0:	461a      	mov	r2, r3
 80022d2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80022d6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80022d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022da:	015a      	lsls	r2, r3, #5
 80022dc:	69fb      	ldr	r3, [r7, #28]
 80022de:	4413      	add	r3, r2
 80022e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022e8:	0151      	lsls	r1, r2, #5
 80022ea:	69fa      	ldr	r2, [r7, #28]
 80022ec:	440a      	add	r2, r1
 80022ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80022f2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80022f6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80022f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022fa:	015a      	lsls	r2, r3, #5
 80022fc:	69fb      	ldr	r3, [r7, #28]
 80022fe:	4413      	add	r3, r2
 8002300:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002308:	0151      	lsls	r1, r2, #5
 800230a:	69fa      	ldr	r2, [r7, #28]
 800230c:	440a      	add	r2, r1
 800230e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002312:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002316:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800231a:	3301      	adds	r3, #1
 800231c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002324:	429a      	cmp	r2, r3
 8002326:	d3a3      	bcc.n	8002270 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002328:	69fb      	ldr	r3, [r7, #28]
 800232a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800232e:	69db      	ldr	r3, [r3, #28]
 8002330:	69fa      	ldr	r2, [r7, #28]
 8002332:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002336:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800233a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002340:	2b00      	cmp	r3, #0
 8002342:	d016      	beq.n	8002372 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002344:	69fb      	ldr	r3, [r7, #28]
 8002346:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800234a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800234e:	69fa      	ldr	r2, [r7, #28]
 8002350:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002354:	f043 030b 	orr.w	r3, r3, #11
 8002358:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800235c:	69fb      	ldr	r3, [r7, #28]
 800235e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002362:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002364:	69fa      	ldr	r2, [r7, #28]
 8002366:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800236a:	f043 030b 	orr.w	r3, r3, #11
 800236e:	6453      	str	r3, [r2, #68]	; 0x44
 8002370:	e015      	b.n	800239e <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002378:	695b      	ldr	r3, [r3, #20]
 800237a:	69fa      	ldr	r2, [r7, #28]
 800237c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002380:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002384:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002388:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002390:	691b      	ldr	r3, [r3, #16]
 8002392:	69fa      	ldr	r2, [r7, #28]
 8002394:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002398:	f043 030b 	orr.w	r3, r3, #11
 800239c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	69fa      	ldr	r2, [r7, #28]
 80023a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80023ac:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80023b0:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6818      	ldr	r0, [r3, #0]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	691b      	ldr	r3, [r3, #16]
 80023ba:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80023c2:	461a      	mov	r2, r3
 80023c4:	f002 fbf4 	bl	8004bb0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	695a      	ldr	r2, [r3, #20]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80023d6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4618      	mov	r0, r3
 80023de:	f002 fb22 	bl	8004a26 <USB_ReadInterrupts>
 80023e2:	4603      	mov	r3, r0
 80023e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80023e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023ec:	d124      	bne.n	8002438 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4618      	mov	r0, r3
 80023f4:	f002 fbb8 	bl	8004b68 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4618      	mov	r0, r3
 80023fe:	f001 fc58 	bl	8003cb2 <USB_GetDevSpeed>
 8002402:	4603      	mov	r3, r0
 8002404:	461a      	mov	r2, r3
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681c      	ldr	r4, [r3, #0]
 800240e:	f001 f92f 	bl	8003670 <HAL_RCC_GetHCLKFreq>
 8002412:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002418:	b2db      	uxtb	r3, r3
 800241a:	461a      	mov	r2, r3
 800241c:	4620      	mov	r0, r4
 800241e:	f001 f995 	bl	800374c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f004 f8e1 	bl	80065ea <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	695a      	ldr	r2, [r3, #20]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002436:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4618      	mov	r0, r3
 800243e:	f002 faf2 	bl	8004a26 <USB_ReadInterrupts>
 8002442:	4603      	mov	r3, r0
 8002444:	f003 0308 	and.w	r3, r3, #8
 8002448:	2b08      	cmp	r3, #8
 800244a:	d10a      	bne.n	8002462 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800244c:	6878      	ldr	r0, [r7, #4]
 800244e:	f004 f8be 	bl	80065ce <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	695a      	ldr	r2, [r3, #20]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f002 0208 	and.w	r2, r2, #8
 8002460:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4618      	mov	r0, r3
 8002468:	f002 fadd 	bl	8004a26 <USB_ReadInterrupts>
 800246c:	4603      	mov	r3, r0
 800246e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002472:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002476:	d10f      	bne.n	8002498 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002478:	2300      	movs	r3, #0
 800247a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800247c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247e:	b2db      	uxtb	r3, r3
 8002480:	4619      	mov	r1, r3
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	f004 f920 	bl	80066c8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	695a      	ldr	r2, [r3, #20]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002496:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4618      	mov	r0, r3
 800249e:	f002 fac2 	bl	8004a26 <USB_ReadInterrupts>
 80024a2:	4603      	mov	r3, r0
 80024a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024a8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80024ac:	d10f      	bne.n	80024ce <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80024ae:	2300      	movs	r3, #0
 80024b0:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80024b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	4619      	mov	r1, r3
 80024b8:	6878      	ldr	r0, [r7, #4]
 80024ba:	f004 f8f3 	bl	80066a4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	695a      	ldr	r2, [r3, #20]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80024cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4618      	mov	r0, r3
 80024d4:	f002 faa7 	bl	8004a26 <USB_ReadInterrupts>
 80024d8:	4603      	mov	r3, r0
 80024da:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80024de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024e2:	d10a      	bne.n	80024fa <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80024e4:	6878      	ldr	r0, [r7, #4]
 80024e6:	f004 f901 	bl	80066ec <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	695a      	ldr	r2, [r3, #20]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80024f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4618      	mov	r0, r3
 8002500:	f002 fa91 	bl	8004a26 <USB_ReadInterrupts>
 8002504:	4603      	mov	r3, r0
 8002506:	f003 0304 	and.w	r3, r3, #4
 800250a:	2b04      	cmp	r3, #4
 800250c:	d115      	bne.n	800253a <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002516:	69bb      	ldr	r3, [r7, #24]
 8002518:	f003 0304 	and.w	r3, r3, #4
 800251c:	2b00      	cmp	r3, #0
 800251e:	d002      	beq.n	8002526 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002520:	6878      	ldr	r0, [r7, #4]
 8002522:	f004 f8f1 	bl	8006708 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	6859      	ldr	r1, [r3, #4]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	69ba      	ldr	r2, [r7, #24]
 8002532:	430a      	orrs	r2, r1
 8002534:	605a      	str	r2, [r3, #4]
 8002536:	e000      	b.n	800253a <HAL_PCD_IRQHandler+0x75e>
      return;
 8002538:	bf00      	nop
    }
  }
}
 800253a:	3734      	adds	r7, #52	; 0x34
 800253c:	46bd      	mov	sp, r7
 800253e:	bd90      	pop	{r4, r7, pc}

08002540 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b082      	sub	sp, #8
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
 8002548:	460b      	mov	r3, r1
 800254a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002552:	2b01      	cmp	r3, #1
 8002554:	d101      	bne.n	800255a <HAL_PCD_SetAddress+0x1a>
 8002556:	2302      	movs	r3, #2
 8002558:	e013      	b.n	8002582 <HAL_PCD_SetAddress+0x42>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2201      	movs	r2, #1
 800255e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	78fa      	ldrb	r2, [r7, #3]
 8002566:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	78fa      	ldrb	r2, [r7, #3]
 8002570:	4611      	mov	r1, r2
 8002572:	4618      	mov	r0, r3
 8002574:	f002 f9ef 	bl	8004956 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2200      	movs	r2, #0
 800257c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002580:	2300      	movs	r3, #0
}
 8002582:	4618      	mov	r0, r3
 8002584:	3708      	adds	r7, #8
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}

0800258a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800258a:	b580      	push	{r7, lr}
 800258c:	b084      	sub	sp, #16
 800258e:	af00      	add	r7, sp, #0
 8002590:	6078      	str	r0, [r7, #4]
 8002592:	4608      	mov	r0, r1
 8002594:	4611      	mov	r1, r2
 8002596:	461a      	mov	r2, r3
 8002598:	4603      	mov	r3, r0
 800259a:	70fb      	strb	r3, [r7, #3]
 800259c:	460b      	mov	r3, r1
 800259e:	803b      	strh	r3, [r7, #0]
 80025a0:	4613      	mov	r3, r2
 80025a2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80025a4:	2300      	movs	r3, #0
 80025a6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80025a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	da0f      	bge.n	80025d0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80025b0:	78fb      	ldrb	r3, [r7, #3]
 80025b2:	f003 020f 	and.w	r2, r3, #15
 80025b6:	4613      	mov	r3, r2
 80025b8:	00db      	lsls	r3, r3, #3
 80025ba:	1a9b      	subs	r3, r3, r2
 80025bc:	009b      	lsls	r3, r3, #2
 80025be:	3338      	adds	r3, #56	; 0x38
 80025c0:	687a      	ldr	r2, [r7, #4]
 80025c2:	4413      	add	r3, r2
 80025c4:	3304      	adds	r3, #4
 80025c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	2201      	movs	r2, #1
 80025cc:	705a      	strb	r2, [r3, #1]
 80025ce:	e00f      	b.n	80025f0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80025d0:	78fb      	ldrb	r3, [r7, #3]
 80025d2:	f003 020f 	and.w	r2, r3, #15
 80025d6:	4613      	mov	r3, r2
 80025d8:	00db      	lsls	r3, r3, #3
 80025da:	1a9b      	subs	r3, r3, r2
 80025dc:	009b      	lsls	r3, r3, #2
 80025de:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80025e2:	687a      	ldr	r2, [r7, #4]
 80025e4:	4413      	add	r3, r2
 80025e6:	3304      	adds	r3, #4
 80025e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	2200      	movs	r2, #0
 80025ee:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80025f0:	78fb      	ldrb	r3, [r7, #3]
 80025f2:	f003 030f 	and.w	r3, r3, #15
 80025f6:	b2da      	uxtb	r2, r3
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80025fc:	883a      	ldrh	r2, [r7, #0]
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	78ba      	ldrb	r2, [r7, #2]
 8002606:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	785b      	ldrb	r3, [r3, #1]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d004      	beq.n	800261a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	781b      	ldrb	r3, [r3, #0]
 8002614:	b29a      	uxth	r2, r3
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800261a:	78bb      	ldrb	r3, [r7, #2]
 800261c:	2b02      	cmp	r3, #2
 800261e:	d102      	bne.n	8002626 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	2200      	movs	r2, #0
 8002624:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800262c:	2b01      	cmp	r3, #1
 800262e:	d101      	bne.n	8002634 <HAL_PCD_EP_Open+0xaa>
 8002630:	2302      	movs	r3, #2
 8002632:	e00e      	b.n	8002652 <HAL_PCD_EP_Open+0xc8>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2201      	movs	r2, #1
 8002638:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	68f9      	ldr	r1, [r7, #12]
 8002642:	4618      	mov	r0, r3
 8002644:	f001 fb5a 	bl	8003cfc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2200      	movs	r2, #0
 800264c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8002650:	7afb      	ldrb	r3, [r7, #11]
}
 8002652:	4618      	mov	r0, r3
 8002654:	3710      	adds	r7, #16
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}

0800265a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800265a:	b580      	push	{r7, lr}
 800265c:	b084      	sub	sp, #16
 800265e:	af00      	add	r7, sp, #0
 8002660:	6078      	str	r0, [r7, #4]
 8002662:	460b      	mov	r3, r1
 8002664:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002666:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800266a:	2b00      	cmp	r3, #0
 800266c:	da0f      	bge.n	800268e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800266e:	78fb      	ldrb	r3, [r7, #3]
 8002670:	f003 020f 	and.w	r2, r3, #15
 8002674:	4613      	mov	r3, r2
 8002676:	00db      	lsls	r3, r3, #3
 8002678:	1a9b      	subs	r3, r3, r2
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	3338      	adds	r3, #56	; 0x38
 800267e:	687a      	ldr	r2, [r7, #4]
 8002680:	4413      	add	r3, r2
 8002682:	3304      	adds	r3, #4
 8002684:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	2201      	movs	r2, #1
 800268a:	705a      	strb	r2, [r3, #1]
 800268c:	e00f      	b.n	80026ae <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800268e:	78fb      	ldrb	r3, [r7, #3]
 8002690:	f003 020f 	and.w	r2, r3, #15
 8002694:	4613      	mov	r3, r2
 8002696:	00db      	lsls	r3, r3, #3
 8002698:	1a9b      	subs	r3, r3, r2
 800269a:	009b      	lsls	r3, r3, #2
 800269c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80026a0:	687a      	ldr	r2, [r7, #4]
 80026a2:	4413      	add	r3, r2
 80026a4:	3304      	adds	r3, #4
 80026a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	2200      	movs	r2, #0
 80026ac:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80026ae:	78fb      	ldrb	r3, [r7, #3]
 80026b0:	f003 030f 	and.w	r3, r3, #15
 80026b4:	b2da      	uxtb	r2, r3
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d101      	bne.n	80026c8 <HAL_PCD_EP_Close+0x6e>
 80026c4:	2302      	movs	r3, #2
 80026c6:	e00e      	b.n	80026e6 <HAL_PCD_EP_Close+0x8c>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2201      	movs	r2, #1
 80026cc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	68f9      	ldr	r1, [r7, #12]
 80026d6:	4618      	mov	r0, r3
 80026d8:	f001 fb98 	bl	8003e0c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2200      	movs	r2, #0
 80026e0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80026e4:	2300      	movs	r3, #0
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	3710      	adds	r7, #16
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}

080026ee <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80026ee:	b580      	push	{r7, lr}
 80026f0:	b086      	sub	sp, #24
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	60f8      	str	r0, [r7, #12]
 80026f6:	607a      	str	r2, [r7, #4]
 80026f8:	603b      	str	r3, [r7, #0]
 80026fa:	460b      	mov	r3, r1
 80026fc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80026fe:	7afb      	ldrb	r3, [r7, #11]
 8002700:	f003 020f 	and.w	r2, r3, #15
 8002704:	4613      	mov	r3, r2
 8002706:	00db      	lsls	r3, r3, #3
 8002708:	1a9b      	subs	r3, r3, r2
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002710:	68fa      	ldr	r2, [r7, #12]
 8002712:	4413      	add	r3, r2
 8002714:	3304      	adds	r3, #4
 8002716:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	687a      	ldr	r2, [r7, #4]
 800271c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	683a      	ldr	r2, [r7, #0]
 8002722:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	2200      	movs	r2, #0
 8002728:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	2200      	movs	r2, #0
 800272e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002730:	7afb      	ldrb	r3, [r7, #11]
 8002732:	f003 030f 	and.w	r3, r3, #15
 8002736:	b2da      	uxtb	r2, r3
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	691b      	ldr	r3, [r3, #16]
 8002740:	2b01      	cmp	r3, #1
 8002742:	d102      	bne.n	800274a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002744:	687a      	ldr	r2, [r7, #4]
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800274a:	7afb      	ldrb	r3, [r7, #11]
 800274c:	f003 030f 	and.w	r3, r3, #15
 8002750:	2b00      	cmp	r3, #0
 8002752:	d109      	bne.n	8002768 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	6818      	ldr	r0, [r3, #0]
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	691b      	ldr	r3, [r3, #16]
 800275c:	b2db      	uxtb	r3, r3
 800275e:	461a      	mov	r2, r3
 8002760:	6979      	ldr	r1, [r7, #20]
 8002762:	f001 fe73 	bl	800444c <USB_EP0StartXfer>
 8002766:	e008      	b.n	800277a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	6818      	ldr	r0, [r3, #0]
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	691b      	ldr	r3, [r3, #16]
 8002770:	b2db      	uxtb	r3, r3
 8002772:	461a      	mov	r2, r3
 8002774:	6979      	ldr	r1, [r7, #20]
 8002776:	f001 fc25 	bl	8003fc4 <USB_EPStartXfer>
  }

  return HAL_OK;
 800277a:	2300      	movs	r3, #0
}
 800277c:	4618      	mov	r0, r3
 800277e:	3718      	adds	r7, #24
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}

08002784 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b086      	sub	sp, #24
 8002788:	af00      	add	r7, sp, #0
 800278a:	60f8      	str	r0, [r7, #12]
 800278c:	607a      	str	r2, [r7, #4]
 800278e:	603b      	str	r3, [r7, #0]
 8002790:	460b      	mov	r3, r1
 8002792:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002794:	7afb      	ldrb	r3, [r7, #11]
 8002796:	f003 020f 	and.w	r2, r3, #15
 800279a:	4613      	mov	r3, r2
 800279c:	00db      	lsls	r3, r3, #3
 800279e:	1a9b      	subs	r3, r3, r2
 80027a0:	009b      	lsls	r3, r3, #2
 80027a2:	3338      	adds	r3, #56	; 0x38
 80027a4:	68fa      	ldr	r2, [r7, #12]
 80027a6:	4413      	add	r3, r2
 80027a8:	3304      	adds	r3, #4
 80027aa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	683a      	ldr	r2, [r7, #0]
 80027b6:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	2200      	movs	r2, #0
 80027bc:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	2201      	movs	r2, #1
 80027c2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80027c4:	7afb      	ldrb	r3, [r7, #11]
 80027c6:	f003 030f 	and.w	r3, r3, #15
 80027ca:	b2da      	uxtb	r2, r3
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	691b      	ldr	r3, [r3, #16]
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d102      	bne.n	80027de <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80027d8:	687a      	ldr	r2, [r7, #4]
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80027de:	7afb      	ldrb	r3, [r7, #11]
 80027e0:	f003 030f 	and.w	r3, r3, #15
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d109      	bne.n	80027fc <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	6818      	ldr	r0, [r3, #0]
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	691b      	ldr	r3, [r3, #16]
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	461a      	mov	r2, r3
 80027f4:	6979      	ldr	r1, [r7, #20]
 80027f6:	f001 fe29 	bl	800444c <USB_EP0StartXfer>
 80027fa:	e008      	b.n	800280e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	6818      	ldr	r0, [r3, #0]
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	691b      	ldr	r3, [r3, #16]
 8002804:	b2db      	uxtb	r3, r3
 8002806:	461a      	mov	r2, r3
 8002808:	6979      	ldr	r1, [r7, #20]
 800280a:	f001 fbdb 	bl	8003fc4 <USB_EPStartXfer>
  }

  return HAL_OK;
 800280e:	2300      	movs	r3, #0
}
 8002810:	4618      	mov	r0, r3
 8002812:	3718      	adds	r7, #24
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}

08002818 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b084      	sub	sp, #16
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
 8002820:	460b      	mov	r3, r1
 8002822:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002824:	78fb      	ldrb	r3, [r7, #3]
 8002826:	f003 020f 	and.w	r2, r3, #15
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	429a      	cmp	r2, r3
 8002830:	d901      	bls.n	8002836 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e050      	b.n	80028d8 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002836:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800283a:	2b00      	cmp	r3, #0
 800283c:	da0f      	bge.n	800285e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800283e:	78fb      	ldrb	r3, [r7, #3]
 8002840:	f003 020f 	and.w	r2, r3, #15
 8002844:	4613      	mov	r3, r2
 8002846:	00db      	lsls	r3, r3, #3
 8002848:	1a9b      	subs	r3, r3, r2
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	3338      	adds	r3, #56	; 0x38
 800284e:	687a      	ldr	r2, [r7, #4]
 8002850:	4413      	add	r3, r2
 8002852:	3304      	adds	r3, #4
 8002854:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2201      	movs	r2, #1
 800285a:	705a      	strb	r2, [r3, #1]
 800285c:	e00d      	b.n	800287a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800285e:	78fa      	ldrb	r2, [r7, #3]
 8002860:	4613      	mov	r3, r2
 8002862:	00db      	lsls	r3, r3, #3
 8002864:	1a9b      	subs	r3, r3, r2
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800286c:	687a      	ldr	r2, [r7, #4]
 800286e:	4413      	add	r3, r2
 8002870:	3304      	adds	r3, #4
 8002872:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2200      	movs	r2, #0
 8002878:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	2201      	movs	r2, #1
 800287e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002880:	78fb      	ldrb	r3, [r7, #3]
 8002882:	f003 030f 	and.w	r3, r3, #15
 8002886:	b2da      	uxtb	r2, r3
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002892:	2b01      	cmp	r3, #1
 8002894:	d101      	bne.n	800289a <HAL_PCD_EP_SetStall+0x82>
 8002896:	2302      	movs	r3, #2
 8002898:	e01e      	b.n	80028d8 <HAL_PCD_EP_SetStall+0xc0>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2201      	movs	r2, #1
 800289e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	68f9      	ldr	r1, [r7, #12]
 80028a8:	4618      	mov	r0, r3
 80028aa:	f001 ff80 	bl	80047ae <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80028ae:	78fb      	ldrb	r3, [r7, #3]
 80028b0:	f003 030f 	and.w	r3, r3, #15
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d10a      	bne.n	80028ce <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6818      	ldr	r0, [r3, #0]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	691b      	ldr	r3, [r3, #16]
 80028c0:	b2d9      	uxtb	r1, r3
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80028c8:	461a      	mov	r2, r3
 80028ca:	f002 f971 	bl	8004bb0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2200      	movs	r2, #0
 80028d2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80028d6:	2300      	movs	r3, #0
}
 80028d8:	4618      	mov	r0, r3
 80028da:	3710      	adds	r7, #16
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}

080028e0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b084      	sub	sp, #16
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
 80028e8:	460b      	mov	r3, r1
 80028ea:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80028ec:	78fb      	ldrb	r3, [r7, #3]
 80028ee:	f003 020f 	and.w	r2, r3, #15
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	429a      	cmp	r2, r3
 80028f8:	d901      	bls.n	80028fe <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e042      	b.n	8002984 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80028fe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002902:	2b00      	cmp	r3, #0
 8002904:	da0f      	bge.n	8002926 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002906:	78fb      	ldrb	r3, [r7, #3]
 8002908:	f003 020f 	and.w	r2, r3, #15
 800290c:	4613      	mov	r3, r2
 800290e:	00db      	lsls	r3, r3, #3
 8002910:	1a9b      	subs	r3, r3, r2
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	3338      	adds	r3, #56	; 0x38
 8002916:	687a      	ldr	r2, [r7, #4]
 8002918:	4413      	add	r3, r2
 800291a:	3304      	adds	r3, #4
 800291c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2201      	movs	r2, #1
 8002922:	705a      	strb	r2, [r3, #1]
 8002924:	e00f      	b.n	8002946 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002926:	78fb      	ldrb	r3, [r7, #3]
 8002928:	f003 020f 	and.w	r2, r3, #15
 800292c:	4613      	mov	r3, r2
 800292e:	00db      	lsls	r3, r3, #3
 8002930:	1a9b      	subs	r3, r3, r2
 8002932:	009b      	lsls	r3, r3, #2
 8002934:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002938:	687a      	ldr	r2, [r7, #4]
 800293a:	4413      	add	r3, r2
 800293c:	3304      	adds	r3, #4
 800293e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2200      	movs	r2, #0
 8002944:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	2200      	movs	r2, #0
 800294a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800294c:	78fb      	ldrb	r3, [r7, #3]
 800294e:	f003 030f 	and.w	r3, r3, #15
 8002952:	b2da      	uxtb	r2, r3
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800295e:	2b01      	cmp	r3, #1
 8002960:	d101      	bne.n	8002966 <HAL_PCD_EP_ClrStall+0x86>
 8002962:	2302      	movs	r3, #2
 8002964:	e00e      	b.n	8002984 <HAL_PCD_EP_ClrStall+0xa4>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2201      	movs	r2, #1
 800296a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	68f9      	ldr	r1, [r7, #12]
 8002974:	4618      	mov	r0, r3
 8002976:	f001 ff88 	bl	800488a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2200      	movs	r2, #0
 800297e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002982:	2300      	movs	r3, #0
}
 8002984:	4618      	mov	r0, r3
 8002986:	3710      	adds	r7, #16
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}

0800298c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b08a      	sub	sp, #40	; 0x28
 8002990:	af02      	add	r7, sp, #8
 8002992:	6078      	str	r0, [r7, #4]
 8002994:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80029a0:	683a      	ldr	r2, [r7, #0]
 80029a2:	4613      	mov	r3, r2
 80029a4:	00db      	lsls	r3, r3, #3
 80029a6:	1a9b      	subs	r3, r3, r2
 80029a8:	009b      	lsls	r3, r3, #2
 80029aa:	3338      	adds	r3, #56	; 0x38
 80029ac:	687a      	ldr	r2, [r7, #4]
 80029ae:	4413      	add	r3, r2
 80029b0:	3304      	adds	r3, #4
 80029b2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	699a      	ldr	r2, [r3, #24]
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	695b      	ldr	r3, [r3, #20]
 80029bc:	429a      	cmp	r2, r3
 80029be:	d901      	bls.n	80029c4 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	e06c      	b.n	8002a9e <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	695a      	ldr	r2, [r3, #20]
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	699b      	ldr	r3, [r3, #24]
 80029cc:	1ad3      	subs	r3, r2, r3
 80029ce:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	69fa      	ldr	r2, [r7, #28]
 80029d6:	429a      	cmp	r2, r3
 80029d8:	d902      	bls.n	80029e0 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80029e0:	69fb      	ldr	r3, [r7, #28]
 80029e2:	3303      	adds	r3, #3
 80029e4:	089b      	lsrs	r3, r3, #2
 80029e6:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80029e8:	e02b      	b.n	8002a42 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	695a      	ldr	r2, [r3, #20]
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	699b      	ldr	r3, [r3, #24]
 80029f2:	1ad3      	subs	r3, r2, r3
 80029f4:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	69fa      	ldr	r2, [r7, #28]
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d902      	bls.n	8002a06 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002a06:	69fb      	ldr	r3, [r7, #28]
 8002a08:	3303      	adds	r3, #3
 8002a0a:	089b      	lsrs	r3, r3, #2
 8002a0c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	68d9      	ldr	r1, [r3, #12]
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	b2da      	uxtb	r2, r3
 8002a16:	69fb      	ldr	r3, [r7, #28]
 8002a18:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	9300      	str	r3, [sp, #0]
 8002a22:	4603      	mov	r3, r0
 8002a24:	6978      	ldr	r0, [r7, #20]
 8002a26:	f001 fe64 	bl	80046f2 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	68da      	ldr	r2, [r3, #12]
 8002a2e:	69fb      	ldr	r3, [r7, #28]
 8002a30:	441a      	add	r2, r3
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	699a      	ldr	r2, [r3, #24]
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	441a      	add	r2, r3
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	015a      	lsls	r2, r3, #5
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	4413      	add	r3, r2
 8002a4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a4e:	699b      	ldr	r3, [r3, #24]
 8002a50:	b29b      	uxth	r3, r3
 8002a52:	69ba      	ldr	r2, [r7, #24]
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d809      	bhi.n	8002a6c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	699a      	ldr	r2, [r3, #24]
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d203      	bcs.n	8002a6c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	695b      	ldr	r3, [r3, #20]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d1be      	bne.n	80029ea <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	695a      	ldr	r2, [r3, #20]
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	699b      	ldr	r3, [r3, #24]
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d811      	bhi.n	8002a9c <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	f003 030f 	and.w	r3, r3, #15
 8002a7e:	2201      	movs	r2, #1
 8002a80:	fa02 f303 	lsl.w	r3, r2, r3
 8002a84:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	43db      	mvns	r3, r3
 8002a92:	6939      	ldr	r1, [r7, #16]
 8002a94:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002a98:	4013      	ands	r3, r2
 8002a9a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002a9c:	2300      	movs	r3, #0
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3720      	adds	r7, #32
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
	...

08002aa8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b086      	sub	sp, #24
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
 8002ab0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	333c      	adds	r3, #60	; 0x3c
 8002ac0:	3304      	adds	r3, #4
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	015a      	lsls	r2, r3, #5
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	4413      	add	r3, r2
 8002ace:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	691b      	ldr	r3, [r3, #16]
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	f040 80a0 	bne.w	8002c20 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	f003 0308 	and.w	r3, r3, #8
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d015      	beq.n	8002b16 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	4a72      	ldr	r2, [pc, #456]	; (8002cb8 <PCD_EP_OutXfrComplete_int+0x210>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	f240 80dd 	bls.w	8002cae <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	f000 80d7 	beq.w	8002cae <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	015a      	lsls	r2, r3, #5
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	4413      	add	r3, r2
 8002b08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b0c:	461a      	mov	r2, r3
 8002b0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b12:	6093      	str	r3, [r2, #8]
 8002b14:	e0cb      	b.n	8002cae <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	f003 0320 	and.w	r3, r3, #32
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d009      	beq.n	8002b34 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	015a      	lsls	r2, r3, #5
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	4413      	add	r3, r2
 8002b28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b2c:	461a      	mov	r2, r3
 8002b2e:	2320      	movs	r3, #32
 8002b30:	6093      	str	r3, [r2, #8]
 8002b32:	e0bc      	b.n	8002cae <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	f040 80b7 	bne.w	8002cae <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	4a5d      	ldr	r2, [pc, #372]	; (8002cb8 <PCD_EP_OutXfrComplete_int+0x210>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d90f      	bls.n	8002b68 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d00a      	beq.n	8002b68 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	015a      	lsls	r2, r3, #5
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	4413      	add	r3, r2
 8002b5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b5e:	461a      	mov	r2, r3
 8002b60:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b64:	6093      	str	r3, [r2, #8]
 8002b66:	e0a2      	b.n	8002cae <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8002b68:	6879      	ldr	r1, [r7, #4]
 8002b6a:	683a      	ldr	r2, [r7, #0]
 8002b6c:	4613      	mov	r3, r2
 8002b6e:	00db      	lsls	r3, r3, #3
 8002b70:	1a9b      	subs	r3, r3, r2
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	440b      	add	r3, r1
 8002b76:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002b7a:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	0159      	lsls	r1, r3, #5
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	440b      	add	r3, r1
 8002b84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b88:	691b      	ldr	r3, [r3, #16]
 8002b8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8002b8e:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8002b90:	6878      	ldr	r0, [r7, #4]
 8002b92:	683a      	ldr	r2, [r7, #0]
 8002b94:	4613      	mov	r3, r2
 8002b96:	00db      	lsls	r3, r3, #3
 8002b98:	1a9b      	subs	r3, r3, r2
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	4403      	add	r3, r0
 8002b9e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002ba2:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8002ba4:	6879      	ldr	r1, [r7, #4]
 8002ba6:	683a      	ldr	r2, [r7, #0]
 8002ba8:	4613      	mov	r3, r2
 8002baa:	00db      	lsls	r3, r3, #3
 8002bac:	1a9b      	subs	r3, r3, r2
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	440b      	add	r3, r1
 8002bb2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002bb6:	6819      	ldr	r1, [r3, #0]
 8002bb8:	6878      	ldr	r0, [r7, #4]
 8002bba:	683a      	ldr	r2, [r7, #0]
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	00db      	lsls	r3, r3, #3
 8002bc0:	1a9b      	subs	r3, r3, r2
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	4403      	add	r3, r0
 8002bc6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4419      	add	r1, r3
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	683a      	ldr	r2, [r7, #0]
 8002bd2:	4613      	mov	r3, r2
 8002bd4:	00db      	lsls	r3, r3, #3
 8002bd6:	1a9b      	subs	r3, r3, r2
 8002bd8:	009b      	lsls	r3, r3, #2
 8002bda:	4403      	add	r3, r0
 8002bdc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002be0:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d114      	bne.n	8002c12 <PCD_EP_OutXfrComplete_int+0x16a>
 8002be8:	6879      	ldr	r1, [r7, #4]
 8002bea:	683a      	ldr	r2, [r7, #0]
 8002bec:	4613      	mov	r3, r2
 8002bee:	00db      	lsls	r3, r3, #3
 8002bf0:	1a9b      	subs	r3, r3, r2
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	440b      	add	r3, r1
 8002bf6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d108      	bne.n	8002c12 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6818      	ldr	r0, [r3, #0]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002c0a:	461a      	mov	r2, r3
 8002c0c:	2101      	movs	r1, #1
 8002c0e:	f001 ffcf 	bl	8004bb0 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	b2db      	uxtb	r3, r3
 8002c16:	4619      	mov	r1, r3
 8002c18:	6878      	ldr	r0, [r7, #4]
 8002c1a:	f003 fca3 	bl	8006564 <HAL_PCD_DataOutStageCallback>
 8002c1e:	e046      	b.n	8002cae <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	4a26      	ldr	r2, [pc, #152]	; (8002cbc <PCD_EP_OutXfrComplete_int+0x214>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d124      	bne.n	8002c72 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d00a      	beq.n	8002c48 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	015a      	lsls	r2, r3, #5
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	4413      	add	r3, r2
 8002c3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c3e:	461a      	mov	r2, r3
 8002c40:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c44:	6093      	str	r3, [r2, #8]
 8002c46:	e032      	b.n	8002cae <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	f003 0320 	and.w	r3, r3, #32
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d008      	beq.n	8002c64 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	015a      	lsls	r2, r3, #5
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	4413      	add	r3, r2
 8002c5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c5e:	461a      	mov	r2, r3
 8002c60:	2320      	movs	r3, #32
 8002c62:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	b2db      	uxtb	r3, r3
 8002c68:	4619      	mov	r1, r3
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	f003 fc7a 	bl	8006564 <HAL_PCD_DataOutStageCallback>
 8002c70:	e01d      	b.n	8002cae <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d114      	bne.n	8002ca2 <PCD_EP_OutXfrComplete_int+0x1fa>
 8002c78:	6879      	ldr	r1, [r7, #4]
 8002c7a:	683a      	ldr	r2, [r7, #0]
 8002c7c:	4613      	mov	r3, r2
 8002c7e:	00db      	lsls	r3, r3, #3
 8002c80:	1a9b      	subs	r3, r3, r2
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	440b      	add	r3, r1
 8002c86:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d108      	bne.n	8002ca2 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6818      	ldr	r0, [r3, #0]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002c9a:	461a      	mov	r2, r3
 8002c9c:	2100      	movs	r1, #0
 8002c9e:	f001 ff87 	bl	8004bb0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	4619      	mov	r1, r3
 8002ca8:	6878      	ldr	r0, [r7, #4]
 8002caa:	f003 fc5b 	bl	8006564 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002cae:	2300      	movs	r3, #0
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3718      	adds	r7, #24
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	4f54300a 	.word	0x4f54300a
 8002cbc:	4f54310a 	.word	0x4f54310a

08002cc0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b086      	sub	sp, #24
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
 8002cc8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	333c      	adds	r3, #60	; 0x3c
 8002cd8:	3304      	adds	r3, #4
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	015a      	lsls	r2, r3, #5
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	4413      	add	r3, r2
 8002ce6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	4a15      	ldr	r2, [pc, #84]	; (8002d48 <PCD_EP_OutSetupPacket_int+0x88>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d90e      	bls.n	8002d14 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d009      	beq.n	8002d14 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	015a      	lsls	r2, r3, #5
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	4413      	add	r3, r2
 8002d08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d0c:	461a      	mov	r2, r3
 8002d0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d12:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002d14:	6878      	ldr	r0, [r7, #4]
 8002d16:	f003 fc13 	bl	8006540 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	4a0a      	ldr	r2, [pc, #40]	; (8002d48 <PCD_EP_OutSetupPacket_int+0x88>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d90c      	bls.n	8002d3c <PCD_EP_OutSetupPacket_int+0x7c>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	691b      	ldr	r3, [r3, #16]
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d108      	bne.n	8002d3c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6818      	ldr	r0, [r3, #0]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002d34:	461a      	mov	r2, r3
 8002d36:	2101      	movs	r1, #1
 8002d38:	f001 ff3a 	bl	8004bb0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002d3c:	2300      	movs	r3, #0
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3718      	adds	r7, #24
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}
 8002d46:	bf00      	nop
 8002d48:	4f54300a 	.word	0x4f54300a

08002d4c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b085      	sub	sp, #20
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
 8002d54:	460b      	mov	r3, r1
 8002d56:	70fb      	strb	r3, [r7, #3]
 8002d58:	4613      	mov	r3, r2
 8002d5a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d62:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002d64:	78fb      	ldrb	r3, [r7, #3]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d107      	bne.n	8002d7a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002d6a:	883b      	ldrh	r3, [r7, #0]
 8002d6c:	0419      	lsls	r1, r3, #16
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	68ba      	ldr	r2, [r7, #8]
 8002d74:	430a      	orrs	r2, r1
 8002d76:	629a      	str	r2, [r3, #40]	; 0x28
 8002d78:	e028      	b.n	8002dcc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d80:	0c1b      	lsrs	r3, r3, #16
 8002d82:	68ba      	ldr	r2, [r7, #8]
 8002d84:	4413      	add	r3, r2
 8002d86:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002d88:	2300      	movs	r3, #0
 8002d8a:	73fb      	strb	r3, [r7, #15]
 8002d8c:	e00d      	b.n	8002daa <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	7bfb      	ldrb	r3, [r7, #15]
 8002d94:	3340      	adds	r3, #64	; 0x40
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	4413      	add	r3, r2
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	0c1b      	lsrs	r3, r3, #16
 8002d9e:	68ba      	ldr	r2, [r7, #8]
 8002da0:	4413      	add	r3, r2
 8002da2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002da4:	7bfb      	ldrb	r3, [r7, #15]
 8002da6:	3301      	adds	r3, #1
 8002da8:	73fb      	strb	r3, [r7, #15]
 8002daa:	7bfa      	ldrb	r2, [r7, #15]
 8002dac:	78fb      	ldrb	r3, [r7, #3]
 8002dae:	3b01      	subs	r3, #1
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d3ec      	bcc.n	8002d8e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002db4:	883b      	ldrh	r3, [r7, #0]
 8002db6:	0418      	lsls	r0, r3, #16
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6819      	ldr	r1, [r3, #0]
 8002dbc:	78fb      	ldrb	r3, [r7, #3]
 8002dbe:	3b01      	subs	r3, #1
 8002dc0:	68ba      	ldr	r2, [r7, #8]
 8002dc2:	4302      	orrs	r2, r0
 8002dc4:	3340      	adds	r3, #64	; 0x40
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	440b      	add	r3, r1
 8002dca:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002dcc:	2300      	movs	r3, #0
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3714      	adds	r7, #20
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd8:	4770      	bx	lr

08002dda <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002dda:	b480      	push	{r7}
 8002ddc:	b083      	sub	sp, #12
 8002dde:	af00      	add	r7, sp, #0
 8002de0:	6078      	str	r0, [r7, #4]
 8002de2:	460b      	mov	r3, r1
 8002de4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	887a      	ldrh	r2, [r7, #2]
 8002dec:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002dee:	2300      	movs	r3, #0
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	370c      	adds	r7, #12
 8002df4:	46bd      	mov	sp, r7
 8002df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfa:	4770      	bx	lr

08002dfc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b083      	sub	sp, #12
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
 8002e04:	460b      	mov	r3, r1
 8002e06:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002e08:	bf00      	nop
 8002e0a:	370c      	adds	r7, #12
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e12:	4770      	bx	lr

08002e14 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b086      	sub	sp, #24
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d101      	bne.n	8002e26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e25b      	b.n	80032de <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 0301 	and.w	r3, r3, #1
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d075      	beq.n	8002f1e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e32:	4ba3      	ldr	r3, [pc, #652]	; (80030c0 <HAL_RCC_OscConfig+0x2ac>)
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	f003 030c 	and.w	r3, r3, #12
 8002e3a:	2b04      	cmp	r3, #4
 8002e3c:	d00c      	beq.n	8002e58 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e3e:	4ba0      	ldr	r3, [pc, #640]	; (80030c0 <HAL_RCC_OscConfig+0x2ac>)
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e46:	2b08      	cmp	r3, #8
 8002e48:	d112      	bne.n	8002e70 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e4a:	4b9d      	ldr	r3, [pc, #628]	; (80030c0 <HAL_RCC_OscConfig+0x2ac>)
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e52:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e56:	d10b      	bne.n	8002e70 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e58:	4b99      	ldr	r3, [pc, #612]	; (80030c0 <HAL_RCC_OscConfig+0x2ac>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d05b      	beq.n	8002f1c <HAL_RCC_OscConfig+0x108>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d157      	bne.n	8002f1c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e236      	b.n	80032de <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e78:	d106      	bne.n	8002e88 <HAL_RCC_OscConfig+0x74>
 8002e7a:	4b91      	ldr	r3, [pc, #580]	; (80030c0 <HAL_RCC_OscConfig+0x2ac>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a90      	ldr	r2, [pc, #576]	; (80030c0 <HAL_RCC_OscConfig+0x2ac>)
 8002e80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e84:	6013      	str	r3, [r2, #0]
 8002e86:	e01d      	b.n	8002ec4 <HAL_RCC_OscConfig+0xb0>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e90:	d10c      	bne.n	8002eac <HAL_RCC_OscConfig+0x98>
 8002e92:	4b8b      	ldr	r3, [pc, #556]	; (80030c0 <HAL_RCC_OscConfig+0x2ac>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a8a      	ldr	r2, [pc, #552]	; (80030c0 <HAL_RCC_OscConfig+0x2ac>)
 8002e98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e9c:	6013      	str	r3, [r2, #0]
 8002e9e:	4b88      	ldr	r3, [pc, #544]	; (80030c0 <HAL_RCC_OscConfig+0x2ac>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a87      	ldr	r2, [pc, #540]	; (80030c0 <HAL_RCC_OscConfig+0x2ac>)
 8002ea4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ea8:	6013      	str	r3, [r2, #0]
 8002eaa:	e00b      	b.n	8002ec4 <HAL_RCC_OscConfig+0xb0>
 8002eac:	4b84      	ldr	r3, [pc, #528]	; (80030c0 <HAL_RCC_OscConfig+0x2ac>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a83      	ldr	r2, [pc, #524]	; (80030c0 <HAL_RCC_OscConfig+0x2ac>)
 8002eb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002eb6:	6013      	str	r3, [r2, #0]
 8002eb8:	4b81      	ldr	r3, [pc, #516]	; (80030c0 <HAL_RCC_OscConfig+0x2ac>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a80      	ldr	r2, [pc, #512]	; (80030c0 <HAL_RCC_OscConfig+0x2ac>)
 8002ebe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ec2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d013      	beq.n	8002ef4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ecc:	f7fe fb5c 	bl	8001588 <HAL_GetTick>
 8002ed0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ed2:	e008      	b.n	8002ee6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ed4:	f7fe fb58 	bl	8001588 <HAL_GetTick>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	1ad3      	subs	r3, r2, r3
 8002ede:	2b64      	cmp	r3, #100	; 0x64
 8002ee0:	d901      	bls.n	8002ee6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002ee2:	2303      	movs	r3, #3
 8002ee4:	e1fb      	b.n	80032de <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ee6:	4b76      	ldr	r3, [pc, #472]	; (80030c0 <HAL_RCC_OscConfig+0x2ac>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d0f0      	beq.n	8002ed4 <HAL_RCC_OscConfig+0xc0>
 8002ef2:	e014      	b.n	8002f1e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ef4:	f7fe fb48 	bl	8001588 <HAL_GetTick>
 8002ef8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002efa:	e008      	b.n	8002f0e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002efc:	f7fe fb44 	bl	8001588 <HAL_GetTick>
 8002f00:	4602      	mov	r2, r0
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	2b64      	cmp	r3, #100	; 0x64
 8002f08:	d901      	bls.n	8002f0e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f0a:	2303      	movs	r3, #3
 8002f0c:	e1e7      	b.n	80032de <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f0e:	4b6c      	ldr	r3, [pc, #432]	; (80030c0 <HAL_RCC_OscConfig+0x2ac>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d1f0      	bne.n	8002efc <HAL_RCC_OscConfig+0xe8>
 8002f1a:	e000      	b.n	8002f1e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 0302 	and.w	r3, r3, #2
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d063      	beq.n	8002ff2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f2a:	4b65      	ldr	r3, [pc, #404]	; (80030c0 <HAL_RCC_OscConfig+0x2ac>)
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	f003 030c 	and.w	r3, r3, #12
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d00b      	beq.n	8002f4e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f36:	4b62      	ldr	r3, [pc, #392]	; (80030c0 <HAL_RCC_OscConfig+0x2ac>)
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f3e:	2b08      	cmp	r3, #8
 8002f40:	d11c      	bne.n	8002f7c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f42:	4b5f      	ldr	r3, [pc, #380]	; (80030c0 <HAL_RCC_OscConfig+0x2ac>)
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d116      	bne.n	8002f7c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f4e:	4b5c      	ldr	r3, [pc, #368]	; (80030c0 <HAL_RCC_OscConfig+0x2ac>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 0302 	and.w	r3, r3, #2
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d005      	beq.n	8002f66 <HAL_RCC_OscConfig+0x152>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	68db      	ldr	r3, [r3, #12]
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d001      	beq.n	8002f66 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e1bb      	b.n	80032de <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f66:	4b56      	ldr	r3, [pc, #344]	; (80030c0 <HAL_RCC_OscConfig+0x2ac>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	691b      	ldr	r3, [r3, #16]
 8002f72:	00db      	lsls	r3, r3, #3
 8002f74:	4952      	ldr	r1, [pc, #328]	; (80030c0 <HAL_RCC_OscConfig+0x2ac>)
 8002f76:	4313      	orrs	r3, r2
 8002f78:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f7a:	e03a      	b.n	8002ff2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	68db      	ldr	r3, [r3, #12]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d020      	beq.n	8002fc6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f84:	4b4f      	ldr	r3, [pc, #316]	; (80030c4 <HAL_RCC_OscConfig+0x2b0>)
 8002f86:	2201      	movs	r2, #1
 8002f88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f8a:	f7fe fafd 	bl	8001588 <HAL_GetTick>
 8002f8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f90:	e008      	b.n	8002fa4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f92:	f7fe faf9 	bl	8001588 <HAL_GetTick>
 8002f96:	4602      	mov	r2, r0
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	1ad3      	subs	r3, r2, r3
 8002f9c:	2b02      	cmp	r3, #2
 8002f9e:	d901      	bls.n	8002fa4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002fa0:	2303      	movs	r3, #3
 8002fa2:	e19c      	b.n	80032de <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fa4:	4b46      	ldr	r3, [pc, #280]	; (80030c0 <HAL_RCC_OscConfig+0x2ac>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 0302 	and.w	r3, r3, #2
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d0f0      	beq.n	8002f92 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fb0:	4b43      	ldr	r3, [pc, #268]	; (80030c0 <HAL_RCC_OscConfig+0x2ac>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	691b      	ldr	r3, [r3, #16]
 8002fbc:	00db      	lsls	r3, r3, #3
 8002fbe:	4940      	ldr	r1, [pc, #256]	; (80030c0 <HAL_RCC_OscConfig+0x2ac>)
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	600b      	str	r3, [r1, #0]
 8002fc4:	e015      	b.n	8002ff2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fc6:	4b3f      	ldr	r3, [pc, #252]	; (80030c4 <HAL_RCC_OscConfig+0x2b0>)
 8002fc8:	2200      	movs	r2, #0
 8002fca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fcc:	f7fe fadc 	bl	8001588 <HAL_GetTick>
 8002fd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fd2:	e008      	b.n	8002fe6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fd4:	f7fe fad8 	bl	8001588 <HAL_GetTick>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	1ad3      	subs	r3, r2, r3
 8002fde:	2b02      	cmp	r3, #2
 8002fe0:	d901      	bls.n	8002fe6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002fe2:	2303      	movs	r3, #3
 8002fe4:	e17b      	b.n	80032de <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fe6:	4b36      	ldr	r3, [pc, #216]	; (80030c0 <HAL_RCC_OscConfig+0x2ac>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 0302 	and.w	r3, r3, #2
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d1f0      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 0308 	and.w	r3, r3, #8
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d030      	beq.n	8003060 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	695b      	ldr	r3, [r3, #20]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d016      	beq.n	8003034 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003006:	4b30      	ldr	r3, [pc, #192]	; (80030c8 <HAL_RCC_OscConfig+0x2b4>)
 8003008:	2201      	movs	r2, #1
 800300a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800300c:	f7fe fabc 	bl	8001588 <HAL_GetTick>
 8003010:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003012:	e008      	b.n	8003026 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003014:	f7fe fab8 	bl	8001588 <HAL_GetTick>
 8003018:	4602      	mov	r2, r0
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	1ad3      	subs	r3, r2, r3
 800301e:	2b02      	cmp	r3, #2
 8003020:	d901      	bls.n	8003026 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003022:	2303      	movs	r3, #3
 8003024:	e15b      	b.n	80032de <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003026:	4b26      	ldr	r3, [pc, #152]	; (80030c0 <HAL_RCC_OscConfig+0x2ac>)
 8003028:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800302a:	f003 0302 	and.w	r3, r3, #2
 800302e:	2b00      	cmp	r3, #0
 8003030:	d0f0      	beq.n	8003014 <HAL_RCC_OscConfig+0x200>
 8003032:	e015      	b.n	8003060 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003034:	4b24      	ldr	r3, [pc, #144]	; (80030c8 <HAL_RCC_OscConfig+0x2b4>)
 8003036:	2200      	movs	r2, #0
 8003038:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800303a:	f7fe faa5 	bl	8001588 <HAL_GetTick>
 800303e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003040:	e008      	b.n	8003054 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003042:	f7fe faa1 	bl	8001588 <HAL_GetTick>
 8003046:	4602      	mov	r2, r0
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	1ad3      	subs	r3, r2, r3
 800304c:	2b02      	cmp	r3, #2
 800304e:	d901      	bls.n	8003054 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003050:	2303      	movs	r3, #3
 8003052:	e144      	b.n	80032de <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003054:	4b1a      	ldr	r3, [pc, #104]	; (80030c0 <HAL_RCC_OscConfig+0x2ac>)
 8003056:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003058:	f003 0302 	and.w	r3, r3, #2
 800305c:	2b00      	cmp	r3, #0
 800305e:	d1f0      	bne.n	8003042 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 0304 	and.w	r3, r3, #4
 8003068:	2b00      	cmp	r3, #0
 800306a:	f000 80a0 	beq.w	80031ae <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800306e:	2300      	movs	r3, #0
 8003070:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003072:	4b13      	ldr	r3, [pc, #76]	; (80030c0 <HAL_RCC_OscConfig+0x2ac>)
 8003074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003076:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800307a:	2b00      	cmp	r3, #0
 800307c:	d10f      	bne.n	800309e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800307e:	2300      	movs	r3, #0
 8003080:	60bb      	str	r3, [r7, #8]
 8003082:	4b0f      	ldr	r3, [pc, #60]	; (80030c0 <HAL_RCC_OscConfig+0x2ac>)
 8003084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003086:	4a0e      	ldr	r2, [pc, #56]	; (80030c0 <HAL_RCC_OscConfig+0x2ac>)
 8003088:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800308c:	6413      	str	r3, [r2, #64]	; 0x40
 800308e:	4b0c      	ldr	r3, [pc, #48]	; (80030c0 <HAL_RCC_OscConfig+0x2ac>)
 8003090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003092:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003096:	60bb      	str	r3, [r7, #8]
 8003098:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800309a:	2301      	movs	r3, #1
 800309c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800309e:	4b0b      	ldr	r3, [pc, #44]	; (80030cc <HAL_RCC_OscConfig+0x2b8>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d121      	bne.n	80030ee <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030aa:	4b08      	ldr	r3, [pc, #32]	; (80030cc <HAL_RCC_OscConfig+0x2b8>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a07      	ldr	r2, [pc, #28]	; (80030cc <HAL_RCC_OscConfig+0x2b8>)
 80030b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030b6:	f7fe fa67 	bl	8001588 <HAL_GetTick>
 80030ba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030bc:	e011      	b.n	80030e2 <HAL_RCC_OscConfig+0x2ce>
 80030be:	bf00      	nop
 80030c0:	40023800 	.word	0x40023800
 80030c4:	42470000 	.word	0x42470000
 80030c8:	42470e80 	.word	0x42470e80
 80030cc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030d0:	f7fe fa5a 	bl	8001588 <HAL_GetTick>
 80030d4:	4602      	mov	r2, r0
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	1ad3      	subs	r3, r2, r3
 80030da:	2b02      	cmp	r3, #2
 80030dc:	d901      	bls.n	80030e2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80030de:	2303      	movs	r3, #3
 80030e0:	e0fd      	b.n	80032de <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030e2:	4b81      	ldr	r3, [pc, #516]	; (80032e8 <HAL_RCC_OscConfig+0x4d4>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d0f0      	beq.n	80030d0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d106      	bne.n	8003104 <HAL_RCC_OscConfig+0x2f0>
 80030f6:	4b7d      	ldr	r3, [pc, #500]	; (80032ec <HAL_RCC_OscConfig+0x4d8>)
 80030f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030fa:	4a7c      	ldr	r2, [pc, #496]	; (80032ec <HAL_RCC_OscConfig+0x4d8>)
 80030fc:	f043 0301 	orr.w	r3, r3, #1
 8003100:	6713      	str	r3, [r2, #112]	; 0x70
 8003102:	e01c      	b.n	800313e <HAL_RCC_OscConfig+0x32a>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	2b05      	cmp	r3, #5
 800310a:	d10c      	bne.n	8003126 <HAL_RCC_OscConfig+0x312>
 800310c:	4b77      	ldr	r3, [pc, #476]	; (80032ec <HAL_RCC_OscConfig+0x4d8>)
 800310e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003110:	4a76      	ldr	r2, [pc, #472]	; (80032ec <HAL_RCC_OscConfig+0x4d8>)
 8003112:	f043 0304 	orr.w	r3, r3, #4
 8003116:	6713      	str	r3, [r2, #112]	; 0x70
 8003118:	4b74      	ldr	r3, [pc, #464]	; (80032ec <HAL_RCC_OscConfig+0x4d8>)
 800311a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800311c:	4a73      	ldr	r2, [pc, #460]	; (80032ec <HAL_RCC_OscConfig+0x4d8>)
 800311e:	f043 0301 	orr.w	r3, r3, #1
 8003122:	6713      	str	r3, [r2, #112]	; 0x70
 8003124:	e00b      	b.n	800313e <HAL_RCC_OscConfig+0x32a>
 8003126:	4b71      	ldr	r3, [pc, #452]	; (80032ec <HAL_RCC_OscConfig+0x4d8>)
 8003128:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800312a:	4a70      	ldr	r2, [pc, #448]	; (80032ec <HAL_RCC_OscConfig+0x4d8>)
 800312c:	f023 0301 	bic.w	r3, r3, #1
 8003130:	6713      	str	r3, [r2, #112]	; 0x70
 8003132:	4b6e      	ldr	r3, [pc, #440]	; (80032ec <HAL_RCC_OscConfig+0x4d8>)
 8003134:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003136:	4a6d      	ldr	r2, [pc, #436]	; (80032ec <HAL_RCC_OscConfig+0x4d8>)
 8003138:	f023 0304 	bic.w	r3, r3, #4
 800313c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d015      	beq.n	8003172 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003146:	f7fe fa1f 	bl	8001588 <HAL_GetTick>
 800314a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800314c:	e00a      	b.n	8003164 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800314e:	f7fe fa1b 	bl	8001588 <HAL_GetTick>
 8003152:	4602      	mov	r2, r0
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	1ad3      	subs	r3, r2, r3
 8003158:	f241 3288 	movw	r2, #5000	; 0x1388
 800315c:	4293      	cmp	r3, r2
 800315e:	d901      	bls.n	8003164 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003160:	2303      	movs	r3, #3
 8003162:	e0bc      	b.n	80032de <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003164:	4b61      	ldr	r3, [pc, #388]	; (80032ec <HAL_RCC_OscConfig+0x4d8>)
 8003166:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003168:	f003 0302 	and.w	r3, r3, #2
 800316c:	2b00      	cmp	r3, #0
 800316e:	d0ee      	beq.n	800314e <HAL_RCC_OscConfig+0x33a>
 8003170:	e014      	b.n	800319c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003172:	f7fe fa09 	bl	8001588 <HAL_GetTick>
 8003176:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003178:	e00a      	b.n	8003190 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800317a:	f7fe fa05 	bl	8001588 <HAL_GetTick>
 800317e:	4602      	mov	r2, r0
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	1ad3      	subs	r3, r2, r3
 8003184:	f241 3288 	movw	r2, #5000	; 0x1388
 8003188:	4293      	cmp	r3, r2
 800318a:	d901      	bls.n	8003190 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800318c:	2303      	movs	r3, #3
 800318e:	e0a6      	b.n	80032de <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003190:	4b56      	ldr	r3, [pc, #344]	; (80032ec <HAL_RCC_OscConfig+0x4d8>)
 8003192:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003194:	f003 0302 	and.w	r3, r3, #2
 8003198:	2b00      	cmp	r3, #0
 800319a:	d1ee      	bne.n	800317a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800319c:	7dfb      	ldrb	r3, [r7, #23]
 800319e:	2b01      	cmp	r3, #1
 80031a0:	d105      	bne.n	80031ae <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031a2:	4b52      	ldr	r3, [pc, #328]	; (80032ec <HAL_RCC_OscConfig+0x4d8>)
 80031a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a6:	4a51      	ldr	r2, [pc, #324]	; (80032ec <HAL_RCC_OscConfig+0x4d8>)
 80031a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031ac:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	699b      	ldr	r3, [r3, #24]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	f000 8092 	beq.w	80032dc <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80031b8:	4b4c      	ldr	r3, [pc, #304]	; (80032ec <HAL_RCC_OscConfig+0x4d8>)
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	f003 030c 	and.w	r3, r3, #12
 80031c0:	2b08      	cmp	r3, #8
 80031c2:	d05c      	beq.n	800327e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	699b      	ldr	r3, [r3, #24]
 80031c8:	2b02      	cmp	r3, #2
 80031ca:	d141      	bne.n	8003250 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031cc:	4b48      	ldr	r3, [pc, #288]	; (80032f0 <HAL_RCC_OscConfig+0x4dc>)
 80031ce:	2200      	movs	r2, #0
 80031d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031d2:	f7fe f9d9 	bl	8001588 <HAL_GetTick>
 80031d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031d8:	e008      	b.n	80031ec <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031da:	f7fe f9d5 	bl	8001588 <HAL_GetTick>
 80031de:	4602      	mov	r2, r0
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	1ad3      	subs	r3, r2, r3
 80031e4:	2b02      	cmp	r3, #2
 80031e6:	d901      	bls.n	80031ec <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80031e8:	2303      	movs	r3, #3
 80031ea:	e078      	b.n	80032de <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031ec:	4b3f      	ldr	r3, [pc, #252]	; (80032ec <HAL_RCC_OscConfig+0x4d8>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d1f0      	bne.n	80031da <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	69da      	ldr	r2, [r3, #28]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6a1b      	ldr	r3, [r3, #32]
 8003200:	431a      	orrs	r2, r3
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003206:	019b      	lsls	r3, r3, #6
 8003208:	431a      	orrs	r2, r3
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800320e:	085b      	lsrs	r3, r3, #1
 8003210:	3b01      	subs	r3, #1
 8003212:	041b      	lsls	r3, r3, #16
 8003214:	431a      	orrs	r2, r3
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800321a:	061b      	lsls	r3, r3, #24
 800321c:	4933      	ldr	r1, [pc, #204]	; (80032ec <HAL_RCC_OscConfig+0x4d8>)
 800321e:	4313      	orrs	r3, r2
 8003220:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003222:	4b33      	ldr	r3, [pc, #204]	; (80032f0 <HAL_RCC_OscConfig+0x4dc>)
 8003224:	2201      	movs	r2, #1
 8003226:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003228:	f7fe f9ae 	bl	8001588 <HAL_GetTick>
 800322c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800322e:	e008      	b.n	8003242 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003230:	f7fe f9aa 	bl	8001588 <HAL_GetTick>
 8003234:	4602      	mov	r2, r0
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	1ad3      	subs	r3, r2, r3
 800323a:	2b02      	cmp	r3, #2
 800323c:	d901      	bls.n	8003242 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800323e:	2303      	movs	r3, #3
 8003240:	e04d      	b.n	80032de <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003242:	4b2a      	ldr	r3, [pc, #168]	; (80032ec <HAL_RCC_OscConfig+0x4d8>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800324a:	2b00      	cmp	r3, #0
 800324c:	d0f0      	beq.n	8003230 <HAL_RCC_OscConfig+0x41c>
 800324e:	e045      	b.n	80032dc <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003250:	4b27      	ldr	r3, [pc, #156]	; (80032f0 <HAL_RCC_OscConfig+0x4dc>)
 8003252:	2200      	movs	r2, #0
 8003254:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003256:	f7fe f997 	bl	8001588 <HAL_GetTick>
 800325a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800325c:	e008      	b.n	8003270 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800325e:	f7fe f993 	bl	8001588 <HAL_GetTick>
 8003262:	4602      	mov	r2, r0
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	1ad3      	subs	r3, r2, r3
 8003268:	2b02      	cmp	r3, #2
 800326a:	d901      	bls.n	8003270 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800326c:	2303      	movs	r3, #3
 800326e:	e036      	b.n	80032de <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003270:	4b1e      	ldr	r3, [pc, #120]	; (80032ec <HAL_RCC_OscConfig+0x4d8>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003278:	2b00      	cmp	r3, #0
 800327a:	d1f0      	bne.n	800325e <HAL_RCC_OscConfig+0x44a>
 800327c:	e02e      	b.n	80032dc <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	699b      	ldr	r3, [r3, #24]
 8003282:	2b01      	cmp	r3, #1
 8003284:	d101      	bne.n	800328a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e029      	b.n	80032de <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800328a:	4b18      	ldr	r3, [pc, #96]	; (80032ec <HAL_RCC_OscConfig+0x4d8>)
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	69db      	ldr	r3, [r3, #28]
 800329a:	429a      	cmp	r2, r3
 800329c:	d11c      	bne.n	80032d8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d115      	bne.n	80032d8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80032ac:	68fa      	ldr	r2, [r7, #12]
 80032ae:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80032b2:	4013      	ands	r3, r2
 80032b4:	687a      	ldr	r2, [r7, #4]
 80032b6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d10d      	bne.n	80032d8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80032c6:	429a      	cmp	r2, r3
 80032c8:	d106      	bne.n	80032d8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80032d4:	429a      	cmp	r2, r3
 80032d6:	d001      	beq.n	80032dc <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	e000      	b.n	80032de <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80032dc:	2300      	movs	r3, #0
}
 80032de:	4618      	mov	r0, r3
 80032e0:	3718      	adds	r7, #24
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}
 80032e6:	bf00      	nop
 80032e8:	40007000 	.word	0x40007000
 80032ec:	40023800 	.word	0x40023800
 80032f0:	42470060 	.word	0x42470060

080032f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b084      	sub	sp, #16
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
 80032fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d101      	bne.n	8003308 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	e0cc      	b.n	80034a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003308:	4b68      	ldr	r3, [pc, #416]	; (80034ac <HAL_RCC_ClockConfig+0x1b8>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 030f 	and.w	r3, r3, #15
 8003310:	683a      	ldr	r2, [r7, #0]
 8003312:	429a      	cmp	r2, r3
 8003314:	d90c      	bls.n	8003330 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003316:	4b65      	ldr	r3, [pc, #404]	; (80034ac <HAL_RCC_ClockConfig+0x1b8>)
 8003318:	683a      	ldr	r2, [r7, #0]
 800331a:	b2d2      	uxtb	r2, r2
 800331c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800331e:	4b63      	ldr	r3, [pc, #396]	; (80034ac <HAL_RCC_ClockConfig+0x1b8>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 030f 	and.w	r3, r3, #15
 8003326:	683a      	ldr	r2, [r7, #0]
 8003328:	429a      	cmp	r2, r3
 800332a:	d001      	beq.n	8003330 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	e0b8      	b.n	80034a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 0302 	and.w	r3, r3, #2
 8003338:	2b00      	cmp	r3, #0
 800333a:	d020      	beq.n	800337e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 0304 	and.w	r3, r3, #4
 8003344:	2b00      	cmp	r3, #0
 8003346:	d005      	beq.n	8003354 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003348:	4b59      	ldr	r3, [pc, #356]	; (80034b0 <HAL_RCC_ClockConfig+0x1bc>)
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	4a58      	ldr	r2, [pc, #352]	; (80034b0 <HAL_RCC_ClockConfig+0x1bc>)
 800334e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003352:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f003 0308 	and.w	r3, r3, #8
 800335c:	2b00      	cmp	r3, #0
 800335e:	d005      	beq.n	800336c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003360:	4b53      	ldr	r3, [pc, #332]	; (80034b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	4a52      	ldr	r2, [pc, #328]	; (80034b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003366:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800336a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800336c:	4b50      	ldr	r3, [pc, #320]	; (80034b0 <HAL_RCC_ClockConfig+0x1bc>)
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	494d      	ldr	r1, [pc, #308]	; (80034b0 <HAL_RCC_ClockConfig+0x1bc>)
 800337a:	4313      	orrs	r3, r2
 800337c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 0301 	and.w	r3, r3, #1
 8003386:	2b00      	cmp	r3, #0
 8003388:	d044      	beq.n	8003414 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	2b01      	cmp	r3, #1
 8003390:	d107      	bne.n	80033a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003392:	4b47      	ldr	r3, [pc, #284]	; (80034b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800339a:	2b00      	cmp	r3, #0
 800339c:	d119      	bne.n	80033d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e07f      	b.n	80034a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	2b02      	cmp	r3, #2
 80033a8:	d003      	beq.n	80033b2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033ae:	2b03      	cmp	r3, #3
 80033b0:	d107      	bne.n	80033c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033b2:	4b3f      	ldr	r3, [pc, #252]	; (80034b0 <HAL_RCC_ClockConfig+0x1bc>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d109      	bne.n	80033d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	e06f      	b.n	80034a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033c2:	4b3b      	ldr	r3, [pc, #236]	; (80034b0 <HAL_RCC_ClockConfig+0x1bc>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 0302 	and.w	r3, r3, #2
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d101      	bne.n	80033d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e067      	b.n	80034a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033d2:	4b37      	ldr	r3, [pc, #220]	; (80034b0 <HAL_RCC_ClockConfig+0x1bc>)
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	f023 0203 	bic.w	r2, r3, #3
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	4934      	ldr	r1, [pc, #208]	; (80034b0 <HAL_RCC_ClockConfig+0x1bc>)
 80033e0:	4313      	orrs	r3, r2
 80033e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033e4:	f7fe f8d0 	bl	8001588 <HAL_GetTick>
 80033e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033ea:	e00a      	b.n	8003402 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033ec:	f7fe f8cc 	bl	8001588 <HAL_GetTick>
 80033f0:	4602      	mov	r2, r0
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	1ad3      	subs	r3, r2, r3
 80033f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d901      	bls.n	8003402 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80033fe:	2303      	movs	r3, #3
 8003400:	e04f      	b.n	80034a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003402:	4b2b      	ldr	r3, [pc, #172]	; (80034b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	f003 020c 	and.w	r2, r3, #12
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	009b      	lsls	r3, r3, #2
 8003410:	429a      	cmp	r2, r3
 8003412:	d1eb      	bne.n	80033ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003414:	4b25      	ldr	r3, [pc, #148]	; (80034ac <HAL_RCC_ClockConfig+0x1b8>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f003 030f 	and.w	r3, r3, #15
 800341c:	683a      	ldr	r2, [r7, #0]
 800341e:	429a      	cmp	r2, r3
 8003420:	d20c      	bcs.n	800343c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003422:	4b22      	ldr	r3, [pc, #136]	; (80034ac <HAL_RCC_ClockConfig+0x1b8>)
 8003424:	683a      	ldr	r2, [r7, #0]
 8003426:	b2d2      	uxtb	r2, r2
 8003428:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800342a:	4b20      	ldr	r3, [pc, #128]	; (80034ac <HAL_RCC_ClockConfig+0x1b8>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 030f 	and.w	r3, r3, #15
 8003432:	683a      	ldr	r2, [r7, #0]
 8003434:	429a      	cmp	r2, r3
 8003436:	d001      	beq.n	800343c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003438:	2301      	movs	r3, #1
 800343a:	e032      	b.n	80034a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f003 0304 	and.w	r3, r3, #4
 8003444:	2b00      	cmp	r3, #0
 8003446:	d008      	beq.n	800345a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003448:	4b19      	ldr	r3, [pc, #100]	; (80034b0 <HAL_RCC_ClockConfig+0x1bc>)
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	4916      	ldr	r1, [pc, #88]	; (80034b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003456:	4313      	orrs	r3, r2
 8003458:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 0308 	and.w	r3, r3, #8
 8003462:	2b00      	cmp	r3, #0
 8003464:	d009      	beq.n	800347a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003466:	4b12      	ldr	r3, [pc, #72]	; (80034b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	691b      	ldr	r3, [r3, #16]
 8003472:	00db      	lsls	r3, r3, #3
 8003474:	490e      	ldr	r1, [pc, #56]	; (80034b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003476:	4313      	orrs	r3, r2
 8003478:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800347a:	f000 f821 	bl	80034c0 <HAL_RCC_GetSysClockFreq>
 800347e:	4601      	mov	r1, r0
 8003480:	4b0b      	ldr	r3, [pc, #44]	; (80034b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	091b      	lsrs	r3, r3, #4
 8003486:	f003 030f 	and.w	r3, r3, #15
 800348a:	4a0a      	ldr	r2, [pc, #40]	; (80034b4 <HAL_RCC_ClockConfig+0x1c0>)
 800348c:	5cd3      	ldrb	r3, [r2, r3]
 800348e:	fa21 f303 	lsr.w	r3, r1, r3
 8003492:	4a09      	ldr	r2, [pc, #36]	; (80034b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003494:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003496:	4b09      	ldr	r3, [pc, #36]	; (80034bc <HAL_RCC_ClockConfig+0x1c8>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4618      	mov	r0, r3
 800349c:	f7fe f830 	bl	8001500 <HAL_InitTick>

  return HAL_OK;
 80034a0:	2300      	movs	r3, #0
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	3710      	adds	r7, #16
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	bf00      	nop
 80034ac:	40023c00 	.word	0x40023c00
 80034b0:	40023800 	.word	0x40023800
 80034b4:	08006cec 	.word	0x08006cec
 80034b8:	20000000 	.word	0x20000000
 80034bc:	20000004 	.word	0x20000004

080034c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034c2:	b085      	sub	sp, #20
 80034c4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80034c6:	2300      	movs	r3, #0
 80034c8:	607b      	str	r3, [r7, #4]
 80034ca:	2300      	movs	r3, #0
 80034cc:	60fb      	str	r3, [r7, #12]
 80034ce:	2300      	movs	r3, #0
 80034d0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80034d2:	2300      	movs	r3, #0
 80034d4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80034d6:	4b63      	ldr	r3, [pc, #396]	; (8003664 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	f003 030c 	and.w	r3, r3, #12
 80034de:	2b04      	cmp	r3, #4
 80034e0:	d007      	beq.n	80034f2 <HAL_RCC_GetSysClockFreq+0x32>
 80034e2:	2b08      	cmp	r3, #8
 80034e4:	d008      	beq.n	80034f8 <HAL_RCC_GetSysClockFreq+0x38>
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	f040 80b4 	bne.w	8003654 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80034ec:	4b5e      	ldr	r3, [pc, #376]	; (8003668 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80034ee:	60bb      	str	r3, [r7, #8]
       break;
 80034f0:	e0b3      	b.n	800365a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80034f2:	4b5e      	ldr	r3, [pc, #376]	; (800366c <HAL_RCC_GetSysClockFreq+0x1ac>)
 80034f4:	60bb      	str	r3, [r7, #8]
      break;
 80034f6:	e0b0      	b.n	800365a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80034f8:	4b5a      	ldr	r3, [pc, #360]	; (8003664 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003500:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003502:	4b58      	ldr	r3, [pc, #352]	; (8003664 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800350a:	2b00      	cmp	r3, #0
 800350c:	d04a      	beq.n	80035a4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800350e:	4b55      	ldr	r3, [pc, #340]	; (8003664 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	099b      	lsrs	r3, r3, #6
 8003514:	f04f 0400 	mov.w	r4, #0
 8003518:	f240 11ff 	movw	r1, #511	; 0x1ff
 800351c:	f04f 0200 	mov.w	r2, #0
 8003520:	ea03 0501 	and.w	r5, r3, r1
 8003524:	ea04 0602 	and.w	r6, r4, r2
 8003528:	4629      	mov	r1, r5
 800352a:	4632      	mov	r2, r6
 800352c:	f04f 0300 	mov.w	r3, #0
 8003530:	f04f 0400 	mov.w	r4, #0
 8003534:	0154      	lsls	r4, r2, #5
 8003536:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800353a:	014b      	lsls	r3, r1, #5
 800353c:	4619      	mov	r1, r3
 800353e:	4622      	mov	r2, r4
 8003540:	1b49      	subs	r1, r1, r5
 8003542:	eb62 0206 	sbc.w	r2, r2, r6
 8003546:	f04f 0300 	mov.w	r3, #0
 800354a:	f04f 0400 	mov.w	r4, #0
 800354e:	0194      	lsls	r4, r2, #6
 8003550:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003554:	018b      	lsls	r3, r1, #6
 8003556:	1a5b      	subs	r3, r3, r1
 8003558:	eb64 0402 	sbc.w	r4, r4, r2
 800355c:	f04f 0100 	mov.w	r1, #0
 8003560:	f04f 0200 	mov.w	r2, #0
 8003564:	00e2      	lsls	r2, r4, #3
 8003566:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800356a:	00d9      	lsls	r1, r3, #3
 800356c:	460b      	mov	r3, r1
 800356e:	4614      	mov	r4, r2
 8003570:	195b      	adds	r3, r3, r5
 8003572:	eb44 0406 	adc.w	r4, r4, r6
 8003576:	f04f 0100 	mov.w	r1, #0
 800357a:	f04f 0200 	mov.w	r2, #0
 800357e:	0262      	lsls	r2, r4, #9
 8003580:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003584:	0259      	lsls	r1, r3, #9
 8003586:	460b      	mov	r3, r1
 8003588:	4614      	mov	r4, r2
 800358a:	4618      	mov	r0, r3
 800358c:	4621      	mov	r1, r4
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	f04f 0400 	mov.w	r4, #0
 8003594:	461a      	mov	r2, r3
 8003596:	4623      	mov	r3, r4
 8003598:	f7fc fe16 	bl	80001c8 <__aeabi_uldivmod>
 800359c:	4603      	mov	r3, r0
 800359e:	460c      	mov	r4, r1
 80035a0:	60fb      	str	r3, [r7, #12]
 80035a2:	e049      	b.n	8003638 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035a4:	4b2f      	ldr	r3, [pc, #188]	; (8003664 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	099b      	lsrs	r3, r3, #6
 80035aa:	f04f 0400 	mov.w	r4, #0
 80035ae:	f240 11ff 	movw	r1, #511	; 0x1ff
 80035b2:	f04f 0200 	mov.w	r2, #0
 80035b6:	ea03 0501 	and.w	r5, r3, r1
 80035ba:	ea04 0602 	and.w	r6, r4, r2
 80035be:	4629      	mov	r1, r5
 80035c0:	4632      	mov	r2, r6
 80035c2:	f04f 0300 	mov.w	r3, #0
 80035c6:	f04f 0400 	mov.w	r4, #0
 80035ca:	0154      	lsls	r4, r2, #5
 80035cc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80035d0:	014b      	lsls	r3, r1, #5
 80035d2:	4619      	mov	r1, r3
 80035d4:	4622      	mov	r2, r4
 80035d6:	1b49      	subs	r1, r1, r5
 80035d8:	eb62 0206 	sbc.w	r2, r2, r6
 80035dc:	f04f 0300 	mov.w	r3, #0
 80035e0:	f04f 0400 	mov.w	r4, #0
 80035e4:	0194      	lsls	r4, r2, #6
 80035e6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80035ea:	018b      	lsls	r3, r1, #6
 80035ec:	1a5b      	subs	r3, r3, r1
 80035ee:	eb64 0402 	sbc.w	r4, r4, r2
 80035f2:	f04f 0100 	mov.w	r1, #0
 80035f6:	f04f 0200 	mov.w	r2, #0
 80035fa:	00e2      	lsls	r2, r4, #3
 80035fc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003600:	00d9      	lsls	r1, r3, #3
 8003602:	460b      	mov	r3, r1
 8003604:	4614      	mov	r4, r2
 8003606:	195b      	adds	r3, r3, r5
 8003608:	eb44 0406 	adc.w	r4, r4, r6
 800360c:	f04f 0100 	mov.w	r1, #0
 8003610:	f04f 0200 	mov.w	r2, #0
 8003614:	02a2      	lsls	r2, r4, #10
 8003616:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800361a:	0299      	lsls	r1, r3, #10
 800361c:	460b      	mov	r3, r1
 800361e:	4614      	mov	r4, r2
 8003620:	4618      	mov	r0, r3
 8003622:	4621      	mov	r1, r4
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	f04f 0400 	mov.w	r4, #0
 800362a:	461a      	mov	r2, r3
 800362c:	4623      	mov	r3, r4
 800362e:	f7fc fdcb 	bl	80001c8 <__aeabi_uldivmod>
 8003632:	4603      	mov	r3, r0
 8003634:	460c      	mov	r4, r1
 8003636:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003638:	4b0a      	ldr	r3, [pc, #40]	; (8003664 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	0c1b      	lsrs	r3, r3, #16
 800363e:	f003 0303 	and.w	r3, r3, #3
 8003642:	3301      	adds	r3, #1
 8003644:	005b      	lsls	r3, r3, #1
 8003646:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003648:	68fa      	ldr	r2, [r7, #12]
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003650:	60bb      	str	r3, [r7, #8]
      break;
 8003652:	e002      	b.n	800365a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003654:	4b04      	ldr	r3, [pc, #16]	; (8003668 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003656:	60bb      	str	r3, [r7, #8]
      break;
 8003658:	bf00      	nop
    }
  }
  return sysclockfreq;
 800365a:	68bb      	ldr	r3, [r7, #8]
}
 800365c:	4618      	mov	r0, r3
 800365e:	3714      	adds	r7, #20
 8003660:	46bd      	mov	sp, r7
 8003662:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003664:	40023800 	.word	0x40023800
 8003668:	00f42400 	.word	0x00f42400
 800366c:	007a1200 	.word	0x007a1200

08003670 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003670:	b480      	push	{r7}
 8003672:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003674:	4b03      	ldr	r3, [pc, #12]	; (8003684 <HAL_RCC_GetHCLKFreq+0x14>)
 8003676:	681b      	ldr	r3, [r3, #0]
}
 8003678:	4618      	mov	r0, r3
 800367a:	46bd      	mov	sp, r7
 800367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003680:	4770      	bx	lr
 8003682:	bf00      	nop
 8003684:	20000000 	.word	0x20000000

08003688 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003688:	b084      	sub	sp, #16
 800368a:	b580      	push	{r7, lr}
 800368c:	b084      	sub	sp, #16
 800368e:	af00      	add	r7, sp, #0
 8003690:	6078      	str	r0, [r7, #4]
 8003692:	f107 001c 	add.w	r0, r7, #28
 8003696:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800369a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800369c:	2b01      	cmp	r3, #1
 800369e:	d122      	bne.n	80036e6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036a4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	68db      	ldr	r3, [r3, #12]
 80036b0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80036b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80036b8:	687a      	ldr	r2, [r7, #4]
 80036ba:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	68db      	ldr	r3, [r3, #12]
 80036c0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80036c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d105      	bne.n	80036da <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	68db      	ldr	r3, [r3, #12]
 80036d2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f001 fac6 	bl	8004c6c <USB_CoreReset>
 80036e0:	4603      	mov	r3, r0
 80036e2:	73fb      	strb	r3, [r7, #15]
 80036e4:	e01a      	b.n	800371c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	68db      	ldr	r3, [r3, #12]
 80036ea:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f001 faba 	bl	8004c6c <USB_CoreReset>
 80036f8:	4603      	mov	r3, r0
 80036fa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80036fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d106      	bne.n	8003710 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003706:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	639a      	str	r2, [r3, #56]	; 0x38
 800370e:	e005      	b.n	800371c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003714:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800371c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800371e:	2b01      	cmp	r3, #1
 8003720:	d10b      	bne.n	800373a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	f043 0206 	orr.w	r2, r3, #6
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	f043 0220 	orr.w	r2, r3, #32
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800373a:	7bfb      	ldrb	r3, [r7, #15]
}
 800373c:	4618      	mov	r0, r3
 800373e:	3710      	adds	r7, #16
 8003740:	46bd      	mov	sp, r7
 8003742:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003746:	b004      	add	sp, #16
 8003748:	4770      	bx	lr
	...

0800374c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800374c:	b480      	push	{r7}
 800374e:	b087      	sub	sp, #28
 8003750:	af00      	add	r7, sp, #0
 8003752:	60f8      	str	r0, [r7, #12]
 8003754:	60b9      	str	r1, [r7, #8]
 8003756:	4613      	mov	r3, r2
 8003758:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800375a:	79fb      	ldrb	r3, [r7, #7]
 800375c:	2b02      	cmp	r3, #2
 800375e:	d165      	bne.n	800382c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	4a41      	ldr	r2, [pc, #260]	; (8003868 <USB_SetTurnaroundTime+0x11c>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d906      	bls.n	8003776 <USB_SetTurnaroundTime+0x2a>
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	4a40      	ldr	r2, [pc, #256]	; (800386c <USB_SetTurnaroundTime+0x120>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d802      	bhi.n	8003776 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003770:	230f      	movs	r3, #15
 8003772:	617b      	str	r3, [r7, #20]
 8003774:	e062      	b.n	800383c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	4a3c      	ldr	r2, [pc, #240]	; (800386c <USB_SetTurnaroundTime+0x120>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d906      	bls.n	800378c <USB_SetTurnaroundTime+0x40>
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	4a3b      	ldr	r2, [pc, #236]	; (8003870 <USB_SetTurnaroundTime+0x124>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d802      	bhi.n	800378c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003786:	230e      	movs	r3, #14
 8003788:	617b      	str	r3, [r7, #20]
 800378a:	e057      	b.n	800383c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	4a38      	ldr	r2, [pc, #224]	; (8003870 <USB_SetTurnaroundTime+0x124>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d906      	bls.n	80037a2 <USB_SetTurnaroundTime+0x56>
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	4a37      	ldr	r2, [pc, #220]	; (8003874 <USB_SetTurnaroundTime+0x128>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d802      	bhi.n	80037a2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800379c:	230d      	movs	r3, #13
 800379e:	617b      	str	r3, [r7, #20]
 80037a0:	e04c      	b.n	800383c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	4a33      	ldr	r2, [pc, #204]	; (8003874 <USB_SetTurnaroundTime+0x128>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d906      	bls.n	80037b8 <USB_SetTurnaroundTime+0x6c>
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	4a32      	ldr	r2, [pc, #200]	; (8003878 <USB_SetTurnaroundTime+0x12c>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d802      	bhi.n	80037b8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80037b2:	230c      	movs	r3, #12
 80037b4:	617b      	str	r3, [r7, #20]
 80037b6:	e041      	b.n	800383c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	4a2f      	ldr	r2, [pc, #188]	; (8003878 <USB_SetTurnaroundTime+0x12c>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d906      	bls.n	80037ce <USB_SetTurnaroundTime+0x82>
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	4a2e      	ldr	r2, [pc, #184]	; (800387c <USB_SetTurnaroundTime+0x130>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d802      	bhi.n	80037ce <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80037c8:	230b      	movs	r3, #11
 80037ca:	617b      	str	r3, [r7, #20]
 80037cc:	e036      	b.n	800383c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	4a2a      	ldr	r2, [pc, #168]	; (800387c <USB_SetTurnaroundTime+0x130>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d906      	bls.n	80037e4 <USB_SetTurnaroundTime+0x98>
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	4a29      	ldr	r2, [pc, #164]	; (8003880 <USB_SetTurnaroundTime+0x134>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d802      	bhi.n	80037e4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80037de:	230a      	movs	r3, #10
 80037e0:	617b      	str	r3, [r7, #20]
 80037e2:	e02b      	b.n	800383c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	4a26      	ldr	r2, [pc, #152]	; (8003880 <USB_SetTurnaroundTime+0x134>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d906      	bls.n	80037fa <USB_SetTurnaroundTime+0xae>
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	4a25      	ldr	r2, [pc, #148]	; (8003884 <USB_SetTurnaroundTime+0x138>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d802      	bhi.n	80037fa <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80037f4:	2309      	movs	r3, #9
 80037f6:	617b      	str	r3, [r7, #20]
 80037f8:	e020      	b.n	800383c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	4a21      	ldr	r2, [pc, #132]	; (8003884 <USB_SetTurnaroundTime+0x138>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d906      	bls.n	8003810 <USB_SetTurnaroundTime+0xc4>
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	4a20      	ldr	r2, [pc, #128]	; (8003888 <USB_SetTurnaroundTime+0x13c>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d802      	bhi.n	8003810 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800380a:	2308      	movs	r3, #8
 800380c:	617b      	str	r3, [r7, #20]
 800380e:	e015      	b.n	800383c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	4a1d      	ldr	r2, [pc, #116]	; (8003888 <USB_SetTurnaroundTime+0x13c>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d906      	bls.n	8003826 <USB_SetTurnaroundTime+0xda>
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	4a1c      	ldr	r2, [pc, #112]	; (800388c <USB_SetTurnaroundTime+0x140>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d802      	bhi.n	8003826 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003820:	2307      	movs	r3, #7
 8003822:	617b      	str	r3, [r7, #20]
 8003824:	e00a      	b.n	800383c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003826:	2306      	movs	r3, #6
 8003828:	617b      	str	r3, [r7, #20]
 800382a:	e007      	b.n	800383c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800382c:	79fb      	ldrb	r3, [r7, #7]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d102      	bne.n	8003838 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003832:	2309      	movs	r3, #9
 8003834:	617b      	str	r3, [r7, #20]
 8003836:	e001      	b.n	800383c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003838:	2309      	movs	r3, #9
 800383a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	68db      	ldr	r3, [r3, #12]
 8003840:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	68da      	ldr	r2, [r3, #12]
 800384c:	697b      	ldr	r3, [r7, #20]
 800384e:	029b      	lsls	r3, r3, #10
 8003850:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003854:	431a      	orrs	r2, r3
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800385a:	2300      	movs	r3, #0
}
 800385c:	4618      	mov	r0, r3
 800385e:	371c      	adds	r7, #28
 8003860:	46bd      	mov	sp, r7
 8003862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003866:	4770      	bx	lr
 8003868:	00d8acbf 	.word	0x00d8acbf
 800386c:	00e4e1bf 	.word	0x00e4e1bf
 8003870:	00f423ff 	.word	0x00f423ff
 8003874:	0106737f 	.word	0x0106737f
 8003878:	011a499f 	.word	0x011a499f
 800387c:	01312cff 	.word	0x01312cff
 8003880:	014ca43f 	.word	0x014ca43f
 8003884:	016e35ff 	.word	0x016e35ff
 8003888:	01a6ab1f 	.word	0x01a6ab1f
 800388c:	01e847ff 	.word	0x01e847ff

08003890 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003890:	b480      	push	{r7}
 8003892:	b083      	sub	sp, #12
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	f043 0201 	orr.w	r2, r3, #1
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80038a4:	2300      	movs	r3, #0
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	370c      	adds	r7, #12
 80038aa:	46bd      	mov	sp, r7
 80038ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b0:	4770      	bx	lr

080038b2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80038b2:	b480      	push	{r7}
 80038b4:	b083      	sub	sp, #12
 80038b6:	af00      	add	r7, sp, #0
 80038b8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	f023 0201 	bic.w	r2, r3, #1
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80038c6:	2300      	movs	r3, #0
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	370c      	adds	r7, #12
 80038cc:	46bd      	mov	sp, r7
 80038ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d2:	4770      	bx	lr

080038d4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b082      	sub	sp, #8
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
 80038dc:	460b      	mov	r3, r1
 80038de:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	68db      	ldr	r3, [r3, #12]
 80038e4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80038ec:	78fb      	ldrb	r3, [r7, #3]
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	d106      	bne.n	8003900 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	68db      	ldr	r3, [r3, #12]
 80038f6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	60da      	str	r2, [r3, #12]
 80038fe:	e00b      	b.n	8003918 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8003900:	78fb      	ldrb	r3, [r7, #3]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d106      	bne.n	8003914 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	68db      	ldr	r3, [r3, #12]
 800390a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	60da      	str	r2, [r3, #12]
 8003912:	e001      	b.n	8003918 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8003914:	2301      	movs	r3, #1
 8003916:	e003      	b.n	8003920 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8003918:	2032      	movs	r0, #50	; 0x32
 800391a:	f7fd fe41 	bl	80015a0 <HAL_Delay>

  return HAL_OK;
 800391e:	2300      	movs	r3, #0
}
 8003920:	4618      	mov	r0, r3
 8003922:	3708      	adds	r7, #8
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}

08003928 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003928:	b084      	sub	sp, #16
 800392a:	b580      	push	{r7, lr}
 800392c:	b086      	sub	sp, #24
 800392e:	af00      	add	r7, sp, #0
 8003930:	6078      	str	r0, [r7, #4]
 8003932:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003936:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800393a:	2300      	movs	r3, #0
 800393c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003942:	2300      	movs	r3, #0
 8003944:	613b      	str	r3, [r7, #16]
 8003946:	e009      	b.n	800395c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003948:	687a      	ldr	r2, [r7, #4]
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	3340      	adds	r3, #64	; 0x40
 800394e:	009b      	lsls	r3, r3, #2
 8003950:	4413      	add	r3, r2
 8003952:	2200      	movs	r2, #0
 8003954:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	3301      	adds	r3, #1
 800395a:	613b      	str	r3, [r7, #16]
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	2b0e      	cmp	r3, #14
 8003960:	d9f2      	bls.n	8003948 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003962:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003964:	2b00      	cmp	r3, #0
 8003966:	d11c      	bne.n	80039a2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	68fa      	ldr	r2, [r7, #12]
 8003972:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003976:	f043 0302 	orr.w	r3, r3, #2
 800397a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003980:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800398c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003998:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	639a      	str	r2, [r3, #56]	; 0x38
 80039a0:	e00b      	b.n	80039ba <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039a6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039b2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80039c0:	461a      	mov	r2, r3
 80039c2:	2300      	movs	r3, #0
 80039c4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039cc:	4619      	mov	r1, r3
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039d4:	461a      	mov	r2, r3
 80039d6:	680b      	ldr	r3, [r1, #0]
 80039d8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80039da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039dc:	2b01      	cmp	r3, #1
 80039de:	d10c      	bne.n	80039fa <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80039e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d104      	bne.n	80039f0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80039e6:	2100      	movs	r1, #0
 80039e8:	6878      	ldr	r0, [r7, #4]
 80039ea:	f000 f949 	bl	8003c80 <USB_SetDevSpeed>
 80039ee:	e008      	b.n	8003a02 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80039f0:	2101      	movs	r1, #1
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	f000 f944 	bl	8003c80 <USB_SetDevSpeed>
 80039f8:	e003      	b.n	8003a02 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80039fa:	2103      	movs	r1, #3
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	f000 f93f 	bl	8003c80 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003a02:	2110      	movs	r1, #16
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	f000 f8f3 	bl	8003bf0 <USB_FlushTxFifo>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d001      	beq.n	8003a14 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003a14:	6878      	ldr	r0, [r7, #4]
 8003a16:	f000 f911 	bl	8003c3c <USB_FlushRxFifo>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d001      	beq.n	8003a24 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a2a:	461a      	mov	r2, r3
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a36:	461a      	mov	r2, r3
 8003a38:	2300      	movs	r3, #0
 8003a3a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a42:	461a      	mov	r2, r3
 8003a44:	2300      	movs	r3, #0
 8003a46:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003a48:	2300      	movs	r3, #0
 8003a4a:	613b      	str	r3, [r7, #16]
 8003a4c:	e043      	b.n	8003ad6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	015a      	lsls	r2, r3, #5
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	4413      	add	r3, r2
 8003a56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003a60:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003a64:	d118      	bne.n	8003a98 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d10a      	bne.n	8003a82 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	015a      	lsls	r2, r3, #5
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	4413      	add	r3, r2
 8003a74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a78:	461a      	mov	r2, r3
 8003a7a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003a7e:	6013      	str	r3, [r2, #0]
 8003a80:	e013      	b.n	8003aaa <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	015a      	lsls	r2, r3, #5
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	4413      	add	r3, r2
 8003a8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a8e:	461a      	mov	r2, r3
 8003a90:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003a94:	6013      	str	r3, [r2, #0]
 8003a96:	e008      	b.n	8003aaa <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	015a      	lsls	r2, r3, #5
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	4413      	add	r3, r2
 8003aa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003aa4:	461a      	mov	r2, r3
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	015a      	lsls	r2, r3, #5
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	4413      	add	r3, r2
 8003ab2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ab6:	461a      	mov	r2, r3
 8003ab8:	2300      	movs	r3, #0
 8003aba:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	015a      	lsls	r2, r3, #5
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	4413      	add	r3, r2
 8003ac4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ac8:	461a      	mov	r2, r3
 8003aca:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003ace:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	3301      	adds	r3, #1
 8003ad4:	613b      	str	r3, [r7, #16]
 8003ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad8:	693a      	ldr	r2, [r7, #16]
 8003ada:	429a      	cmp	r2, r3
 8003adc:	d3b7      	bcc.n	8003a4e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003ade:	2300      	movs	r3, #0
 8003ae0:	613b      	str	r3, [r7, #16]
 8003ae2:	e043      	b.n	8003b6c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	015a      	lsls	r2, r3, #5
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	4413      	add	r3, r2
 8003aec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003af6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003afa:	d118      	bne.n	8003b2e <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d10a      	bne.n	8003b18 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	015a      	lsls	r2, r3, #5
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	4413      	add	r3, r2
 8003b0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b0e:	461a      	mov	r2, r3
 8003b10:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003b14:	6013      	str	r3, [r2, #0]
 8003b16:	e013      	b.n	8003b40 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	015a      	lsls	r2, r3, #5
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	4413      	add	r3, r2
 8003b20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b24:	461a      	mov	r2, r3
 8003b26:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003b2a:	6013      	str	r3, [r2, #0]
 8003b2c:	e008      	b.n	8003b40 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	015a      	lsls	r2, r3, #5
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	4413      	add	r3, r2
 8003b36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b3a:	461a      	mov	r2, r3
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	015a      	lsls	r2, r3, #5
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	4413      	add	r3, r2
 8003b48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b4c:	461a      	mov	r2, r3
 8003b4e:	2300      	movs	r3, #0
 8003b50:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	015a      	lsls	r2, r3, #5
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	4413      	add	r3, r2
 8003b5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b5e:	461a      	mov	r2, r3
 8003b60:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003b64:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	3301      	adds	r3, #1
 8003b6a:	613b      	str	r3, [r7, #16]
 8003b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b6e:	693a      	ldr	r2, [r7, #16]
 8003b70:	429a      	cmp	r2, r3
 8003b72:	d3b7      	bcc.n	8003ae4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b7a:	691b      	ldr	r3, [r3, #16]
 8003b7c:	68fa      	ldr	r2, [r7, #12]
 8003b7e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b82:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b86:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003b94:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d105      	bne.n	8003ba8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	699b      	ldr	r3, [r3, #24]
 8003ba0:	f043 0210 	orr.w	r2, r3, #16
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	699a      	ldr	r2, [r3, #24]
 8003bac:	4b0f      	ldr	r3, [pc, #60]	; (8003bec <USB_DevInit+0x2c4>)
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	687a      	ldr	r2, [r7, #4]
 8003bb2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003bb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d005      	beq.n	8003bc6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	699b      	ldr	r3, [r3, #24]
 8003bbe:	f043 0208 	orr.w	r2, r3, #8
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003bc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bc8:	2b01      	cmp	r3, #1
 8003bca:	d107      	bne.n	8003bdc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	699b      	ldr	r3, [r3, #24]
 8003bd0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003bd4:	f043 0304 	orr.w	r3, r3, #4
 8003bd8:	687a      	ldr	r2, [r7, #4]
 8003bda:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003bdc:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	3718      	adds	r7, #24
 8003be2:	46bd      	mov	sp, r7
 8003be4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003be8:	b004      	add	sp, #16
 8003bea:	4770      	bx	lr
 8003bec:	803c3800 	.word	0x803c3800

08003bf0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b085      	sub	sp, #20
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
 8003bf8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	019b      	lsls	r3, r3, #6
 8003c02:	f043 0220 	orr.w	r2, r3, #32
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	3301      	adds	r3, #1
 8003c0e:	60fb      	str	r3, [r7, #12]
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	4a09      	ldr	r2, [pc, #36]	; (8003c38 <USB_FlushTxFifo+0x48>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d901      	bls.n	8003c1c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8003c18:	2303      	movs	r3, #3
 8003c1a:	e006      	b.n	8003c2a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	691b      	ldr	r3, [r3, #16]
 8003c20:	f003 0320 	and.w	r3, r3, #32
 8003c24:	2b20      	cmp	r3, #32
 8003c26:	d0f0      	beq.n	8003c0a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8003c28:	2300      	movs	r3, #0
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3714      	adds	r7, #20
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c34:	4770      	bx	lr
 8003c36:	bf00      	nop
 8003c38:	00030d40 	.word	0x00030d40

08003c3c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b085      	sub	sp, #20
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8003c44:	2300      	movs	r3, #0
 8003c46:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2210      	movs	r2, #16
 8003c4c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	3301      	adds	r3, #1
 8003c52:	60fb      	str	r3, [r7, #12]
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	4a09      	ldr	r2, [pc, #36]	; (8003c7c <USB_FlushRxFifo+0x40>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d901      	bls.n	8003c60 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8003c5c:	2303      	movs	r3, #3
 8003c5e:	e006      	b.n	8003c6e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	691b      	ldr	r3, [r3, #16]
 8003c64:	f003 0310 	and.w	r3, r3, #16
 8003c68:	2b10      	cmp	r3, #16
 8003c6a:	d0f0      	beq.n	8003c4e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8003c6c:	2300      	movs	r3, #0
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3714      	adds	r7, #20
 8003c72:	46bd      	mov	sp, r7
 8003c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c78:	4770      	bx	lr
 8003c7a:	bf00      	nop
 8003c7c:	00030d40 	.word	0x00030d40

08003c80 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b085      	sub	sp, #20
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
 8003c88:	460b      	mov	r3, r1
 8003c8a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	78fb      	ldrb	r3, [r7, #3]
 8003c9a:	68f9      	ldr	r1, [r7, #12]
 8003c9c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003ca4:	2300      	movs	r3, #0
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	3714      	adds	r7, #20
 8003caa:	46bd      	mov	sp, r7
 8003cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb0:	4770      	bx	lr

08003cb2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003cb2:	b480      	push	{r7}
 8003cb4:	b087      	sub	sp, #28
 8003cb6:	af00      	add	r7, sp, #0
 8003cb8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	f003 0306 	and.w	r3, r3, #6
 8003cca:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d102      	bne.n	8003cd8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	75fb      	strb	r3, [r7, #23]
 8003cd6:	e00a      	b.n	8003cee <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	2b02      	cmp	r3, #2
 8003cdc:	d002      	beq.n	8003ce4 <USB_GetDevSpeed+0x32>
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2b06      	cmp	r3, #6
 8003ce2:	d102      	bne.n	8003cea <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003ce4:	2302      	movs	r3, #2
 8003ce6:	75fb      	strb	r3, [r7, #23]
 8003ce8:	e001      	b.n	8003cee <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003cea:	230f      	movs	r3, #15
 8003cec:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003cee:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	371c      	adds	r7, #28
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr

08003cfc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b085      	sub	sp, #20
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
 8003d04:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	781b      	ldrb	r3, [r3, #0]
 8003d0e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	785b      	ldrb	r3, [r3, #1]
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	d13a      	bne.n	8003d8e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d1e:	69da      	ldr	r2, [r3, #28]
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	781b      	ldrb	r3, [r3, #0]
 8003d24:	f003 030f 	and.w	r3, r3, #15
 8003d28:	2101      	movs	r1, #1
 8003d2a:	fa01 f303 	lsl.w	r3, r1, r3
 8003d2e:	b29b      	uxth	r3, r3
 8003d30:	68f9      	ldr	r1, [r7, #12]
 8003d32:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d36:	4313      	orrs	r3, r2
 8003d38:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	015a      	lsls	r2, r3, #5
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	4413      	add	r3, r2
 8003d42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d155      	bne.n	8003dfc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	015a      	lsls	r2, r3, #5
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	4413      	add	r3, r2
 8003d58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d5c:	681a      	ldr	r2, [r3, #0]
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	78db      	ldrb	r3, [r3, #3]
 8003d6a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003d6c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	059b      	lsls	r3, r3, #22
 8003d72:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003d74:	4313      	orrs	r3, r2
 8003d76:	68ba      	ldr	r2, [r7, #8]
 8003d78:	0151      	lsls	r1, r2, #5
 8003d7a:	68fa      	ldr	r2, [r7, #12]
 8003d7c:	440a      	add	r2, r1
 8003d7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d8a:	6013      	str	r3, [r2, #0]
 8003d8c:	e036      	b.n	8003dfc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d94:	69da      	ldr	r2, [r3, #28]
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	781b      	ldrb	r3, [r3, #0]
 8003d9a:	f003 030f 	and.w	r3, r3, #15
 8003d9e:	2101      	movs	r1, #1
 8003da0:	fa01 f303 	lsl.w	r3, r1, r3
 8003da4:	041b      	lsls	r3, r3, #16
 8003da6:	68f9      	ldr	r1, [r7, #12]
 8003da8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003dac:	4313      	orrs	r3, r2
 8003dae:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	015a      	lsls	r2, r3, #5
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	4413      	add	r3, r2
 8003db8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d11a      	bne.n	8003dfc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	015a      	lsls	r2, r3, #5
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	4413      	add	r3, r2
 8003dce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	78db      	ldrb	r3, [r3, #3]
 8003de0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003de2:	430b      	orrs	r3, r1
 8003de4:	4313      	orrs	r3, r2
 8003de6:	68ba      	ldr	r2, [r7, #8]
 8003de8:	0151      	lsls	r1, r2, #5
 8003dea:	68fa      	ldr	r2, [r7, #12]
 8003dec:	440a      	add	r2, r1
 8003dee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003df2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003df6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003dfa:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003dfc:	2300      	movs	r3, #0
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3714      	adds	r7, #20
 8003e02:	46bd      	mov	sp, r7
 8003e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e08:	4770      	bx	lr
	...

08003e0c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b085      	sub	sp, #20
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
 8003e14:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	781b      	ldrb	r3, [r3, #0]
 8003e1e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	785b      	ldrb	r3, [r3, #1]
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d161      	bne.n	8003eec <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	015a      	lsls	r2, r3, #5
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	4413      	add	r3, r2
 8003e30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003e3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e3e:	d11f      	bne.n	8003e80 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	015a      	lsls	r2, r3, #5
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	4413      	add	r3, r2
 8003e48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	68ba      	ldr	r2, [r7, #8]
 8003e50:	0151      	lsls	r1, r2, #5
 8003e52:	68fa      	ldr	r2, [r7, #12]
 8003e54:	440a      	add	r2, r1
 8003e56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e5a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003e5e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	015a      	lsls	r2, r3, #5
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	4413      	add	r3, r2
 8003e68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	68ba      	ldr	r2, [r7, #8]
 8003e70:	0151      	lsls	r1, r2, #5
 8003e72:	68fa      	ldr	r2, [r7, #12]
 8003e74:	440a      	add	r2, r1
 8003e76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e7a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003e7e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e86:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	781b      	ldrb	r3, [r3, #0]
 8003e8c:	f003 030f 	and.w	r3, r3, #15
 8003e90:	2101      	movs	r1, #1
 8003e92:	fa01 f303 	lsl.w	r3, r1, r3
 8003e96:	b29b      	uxth	r3, r3
 8003e98:	43db      	mvns	r3, r3
 8003e9a:	68f9      	ldr	r1, [r7, #12]
 8003e9c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003ea0:	4013      	ands	r3, r2
 8003ea2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003eaa:	69da      	ldr	r2, [r3, #28]
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	781b      	ldrb	r3, [r3, #0]
 8003eb0:	f003 030f 	and.w	r3, r3, #15
 8003eb4:	2101      	movs	r1, #1
 8003eb6:	fa01 f303 	lsl.w	r3, r1, r3
 8003eba:	b29b      	uxth	r3, r3
 8003ebc:	43db      	mvns	r3, r3
 8003ebe:	68f9      	ldr	r1, [r7, #12]
 8003ec0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003ec4:	4013      	ands	r3, r2
 8003ec6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	015a      	lsls	r2, r3, #5
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	4413      	add	r3, r2
 8003ed0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	0159      	lsls	r1, r3, #5
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	440b      	add	r3, r1
 8003ede:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ee2:	4619      	mov	r1, r3
 8003ee4:	4b35      	ldr	r3, [pc, #212]	; (8003fbc <USB_DeactivateEndpoint+0x1b0>)
 8003ee6:	4013      	ands	r3, r2
 8003ee8:	600b      	str	r3, [r1, #0]
 8003eea:	e060      	b.n	8003fae <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	015a      	lsls	r2, r3, #5
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	4413      	add	r3, r2
 8003ef4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003efe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003f02:	d11f      	bne.n	8003f44 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	015a      	lsls	r2, r3, #5
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	4413      	add	r3, r2
 8003f0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	68ba      	ldr	r2, [r7, #8]
 8003f14:	0151      	lsls	r1, r2, #5
 8003f16:	68fa      	ldr	r2, [r7, #12]
 8003f18:	440a      	add	r2, r1
 8003f1a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f1e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003f22:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	015a      	lsls	r2, r3, #5
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	4413      	add	r3, r2
 8003f2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	68ba      	ldr	r2, [r7, #8]
 8003f34:	0151      	lsls	r1, r2, #5
 8003f36:	68fa      	ldr	r2, [r7, #12]
 8003f38:	440a      	add	r2, r1
 8003f3a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f3e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003f42:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	781b      	ldrb	r3, [r3, #0]
 8003f50:	f003 030f 	and.w	r3, r3, #15
 8003f54:	2101      	movs	r1, #1
 8003f56:	fa01 f303 	lsl.w	r3, r1, r3
 8003f5a:	041b      	lsls	r3, r3, #16
 8003f5c:	43db      	mvns	r3, r3
 8003f5e:	68f9      	ldr	r1, [r7, #12]
 8003f60:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f64:	4013      	ands	r3, r2
 8003f66:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f6e:	69da      	ldr	r2, [r3, #28]
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	781b      	ldrb	r3, [r3, #0]
 8003f74:	f003 030f 	and.w	r3, r3, #15
 8003f78:	2101      	movs	r1, #1
 8003f7a:	fa01 f303 	lsl.w	r3, r1, r3
 8003f7e:	041b      	lsls	r3, r3, #16
 8003f80:	43db      	mvns	r3, r3
 8003f82:	68f9      	ldr	r1, [r7, #12]
 8003f84:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f88:	4013      	ands	r3, r2
 8003f8a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	015a      	lsls	r2, r3, #5
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	4413      	add	r3, r2
 8003f94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f98:	681a      	ldr	r2, [r3, #0]
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	0159      	lsls	r1, r3, #5
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	440b      	add	r3, r1
 8003fa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fa6:	4619      	mov	r1, r3
 8003fa8:	4b05      	ldr	r3, [pc, #20]	; (8003fc0 <USB_DeactivateEndpoint+0x1b4>)
 8003faa:	4013      	ands	r3, r2
 8003fac:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003fae:	2300      	movs	r3, #0
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	3714      	adds	r7, #20
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fba:	4770      	bx	lr
 8003fbc:	ec337800 	.word	0xec337800
 8003fc0:	eff37800 	.word	0xeff37800

08003fc4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b08a      	sub	sp, #40	; 0x28
 8003fc8:	af02      	add	r7, sp, #8
 8003fca:	60f8      	str	r0, [r7, #12]
 8003fcc:	60b9      	str	r1, [r7, #8]
 8003fce:	4613      	mov	r3, r2
 8003fd0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	781b      	ldrb	r3, [r3, #0]
 8003fda:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	785b      	ldrb	r3, [r3, #1]
 8003fe0:	2b01      	cmp	r3, #1
 8003fe2:	f040 815c 	bne.w	800429e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	695b      	ldr	r3, [r3, #20]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d132      	bne.n	8004054 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003fee:	69bb      	ldr	r3, [r7, #24]
 8003ff0:	015a      	lsls	r2, r3, #5
 8003ff2:	69fb      	ldr	r3, [r7, #28]
 8003ff4:	4413      	add	r3, r2
 8003ff6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ffa:	691b      	ldr	r3, [r3, #16]
 8003ffc:	69ba      	ldr	r2, [r7, #24]
 8003ffe:	0151      	lsls	r1, r2, #5
 8004000:	69fa      	ldr	r2, [r7, #28]
 8004002:	440a      	add	r2, r1
 8004004:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004008:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800400c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004010:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004012:	69bb      	ldr	r3, [r7, #24]
 8004014:	015a      	lsls	r2, r3, #5
 8004016:	69fb      	ldr	r3, [r7, #28]
 8004018:	4413      	add	r3, r2
 800401a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800401e:	691b      	ldr	r3, [r3, #16]
 8004020:	69ba      	ldr	r2, [r7, #24]
 8004022:	0151      	lsls	r1, r2, #5
 8004024:	69fa      	ldr	r2, [r7, #28]
 8004026:	440a      	add	r2, r1
 8004028:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800402c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004030:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004032:	69bb      	ldr	r3, [r7, #24]
 8004034:	015a      	lsls	r2, r3, #5
 8004036:	69fb      	ldr	r3, [r7, #28]
 8004038:	4413      	add	r3, r2
 800403a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800403e:	691b      	ldr	r3, [r3, #16]
 8004040:	69ba      	ldr	r2, [r7, #24]
 8004042:	0151      	lsls	r1, r2, #5
 8004044:	69fa      	ldr	r2, [r7, #28]
 8004046:	440a      	add	r2, r1
 8004048:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800404c:	0cdb      	lsrs	r3, r3, #19
 800404e:	04db      	lsls	r3, r3, #19
 8004050:	6113      	str	r3, [r2, #16]
 8004052:	e074      	b.n	800413e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004054:	69bb      	ldr	r3, [r7, #24]
 8004056:	015a      	lsls	r2, r3, #5
 8004058:	69fb      	ldr	r3, [r7, #28]
 800405a:	4413      	add	r3, r2
 800405c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004060:	691b      	ldr	r3, [r3, #16]
 8004062:	69ba      	ldr	r2, [r7, #24]
 8004064:	0151      	lsls	r1, r2, #5
 8004066:	69fa      	ldr	r2, [r7, #28]
 8004068:	440a      	add	r2, r1
 800406a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800406e:	0cdb      	lsrs	r3, r3, #19
 8004070:	04db      	lsls	r3, r3, #19
 8004072:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004074:	69bb      	ldr	r3, [r7, #24]
 8004076:	015a      	lsls	r2, r3, #5
 8004078:	69fb      	ldr	r3, [r7, #28]
 800407a:	4413      	add	r3, r2
 800407c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004080:	691b      	ldr	r3, [r3, #16]
 8004082:	69ba      	ldr	r2, [r7, #24]
 8004084:	0151      	lsls	r1, r2, #5
 8004086:	69fa      	ldr	r2, [r7, #28]
 8004088:	440a      	add	r2, r1
 800408a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800408e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004092:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004096:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004098:	69bb      	ldr	r3, [r7, #24]
 800409a:	015a      	lsls	r2, r3, #5
 800409c:	69fb      	ldr	r3, [r7, #28]
 800409e:	4413      	add	r3, r2
 80040a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040a4:	691a      	ldr	r2, [r3, #16]
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	6959      	ldr	r1, [r3, #20]
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	440b      	add	r3, r1
 80040b0:	1e59      	subs	r1, r3, #1
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	fbb1 f3f3 	udiv	r3, r1, r3
 80040ba:	04d9      	lsls	r1, r3, #19
 80040bc:	4b9d      	ldr	r3, [pc, #628]	; (8004334 <USB_EPStartXfer+0x370>)
 80040be:	400b      	ands	r3, r1
 80040c0:	69b9      	ldr	r1, [r7, #24]
 80040c2:	0148      	lsls	r0, r1, #5
 80040c4:	69f9      	ldr	r1, [r7, #28]
 80040c6:	4401      	add	r1, r0
 80040c8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80040cc:	4313      	orrs	r3, r2
 80040ce:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80040d0:	69bb      	ldr	r3, [r7, #24]
 80040d2:	015a      	lsls	r2, r3, #5
 80040d4:	69fb      	ldr	r3, [r7, #28]
 80040d6:	4413      	add	r3, r2
 80040d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040dc:	691a      	ldr	r2, [r3, #16]
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	695b      	ldr	r3, [r3, #20]
 80040e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040e6:	69b9      	ldr	r1, [r7, #24]
 80040e8:	0148      	lsls	r0, r1, #5
 80040ea:	69f9      	ldr	r1, [r7, #28]
 80040ec:	4401      	add	r1, r0
 80040ee:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80040f2:	4313      	orrs	r3, r2
 80040f4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	78db      	ldrb	r3, [r3, #3]
 80040fa:	2b01      	cmp	r3, #1
 80040fc:	d11f      	bne.n	800413e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80040fe:	69bb      	ldr	r3, [r7, #24]
 8004100:	015a      	lsls	r2, r3, #5
 8004102:	69fb      	ldr	r3, [r7, #28]
 8004104:	4413      	add	r3, r2
 8004106:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800410a:	691b      	ldr	r3, [r3, #16]
 800410c:	69ba      	ldr	r2, [r7, #24]
 800410e:	0151      	lsls	r1, r2, #5
 8004110:	69fa      	ldr	r2, [r7, #28]
 8004112:	440a      	add	r2, r1
 8004114:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004118:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800411c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800411e:	69bb      	ldr	r3, [r7, #24]
 8004120:	015a      	lsls	r2, r3, #5
 8004122:	69fb      	ldr	r3, [r7, #28]
 8004124:	4413      	add	r3, r2
 8004126:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800412a:	691b      	ldr	r3, [r3, #16]
 800412c:	69ba      	ldr	r2, [r7, #24]
 800412e:	0151      	lsls	r1, r2, #5
 8004130:	69fa      	ldr	r2, [r7, #28]
 8004132:	440a      	add	r2, r1
 8004134:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004138:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800413c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800413e:	79fb      	ldrb	r3, [r7, #7]
 8004140:	2b01      	cmp	r3, #1
 8004142:	d14b      	bne.n	80041dc <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	691b      	ldr	r3, [r3, #16]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d009      	beq.n	8004160 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800414c:	69bb      	ldr	r3, [r7, #24]
 800414e:	015a      	lsls	r2, r3, #5
 8004150:	69fb      	ldr	r3, [r7, #28]
 8004152:	4413      	add	r3, r2
 8004154:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004158:	461a      	mov	r2, r3
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	691b      	ldr	r3, [r3, #16]
 800415e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	78db      	ldrb	r3, [r3, #3]
 8004164:	2b01      	cmp	r3, #1
 8004166:	d128      	bne.n	80041ba <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004168:	69fb      	ldr	r3, [r7, #28]
 800416a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004174:	2b00      	cmp	r3, #0
 8004176:	d110      	bne.n	800419a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004178:	69bb      	ldr	r3, [r7, #24]
 800417a:	015a      	lsls	r2, r3, #5
 800417c:	69fb      	ldr	r3, [r7, #28]
 800417e:	4413      	add	r3, r2
 8004180:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	69ba      	ldr	r2, [r7, #24]
 8004188:	0151      	lsls	r1, r2, #5
 800418a:	69fa      	ldr	r2, [r7, #28]
 800418c:	440a      	add	r2, r1
 800418e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004192:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004196:	6013      	str	r3, [r2, #0]
 8004198:	e00f      	b.n	80041ba <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800419a:	69bb      	ldr	r3, [r7, #24]
 800419c:	015a      	lsls	r2, r3, #5
 800419e:	69fb      	ldr	r3, [r7, #28]
 80041a0:	4413      	add	r3, r2
 80041a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	69ba      	ldr	r2, [r7, #24]
 80041aa:	0151      	lsls	r1, r2, #5
 80041ac:	69fa      	ldr	r2, [r7, #28]
 80041ae:	440a      	add	r2, r1
 80041b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041b8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80041ba:	69bb      	ldr	r3, [r7, #24]
 80041bc:	015a      	lsls	r2, r3, #5
 80041be:	69fb      	ldr	r3, [r7, #28]
 80041c0:	4413      	add	r3, r2
 80041c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	69ba      	ldr	r2, [r7, #24]
 80041ca:	0151      	lsls	r1, r2, #5
 80041cc:	69fa      	ldr	r2, [r7, #28]
 80041ce:	440a      	add	r2, r1
 80041d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041d4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80041d8:	6013      	str	r3, [r2, #0]
 80041da:	e12f      	b.n	800443c <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80041dc:	69bb      	ldr	r3, [r7, #24]
 80041de:	015a      	lsls	r2, r3, #5
 80041e0:	69fb      	ldr	r3, [r7, #28]
 80041e2:	4413      	add	r3, r2
 80041e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	69ba      	ldr	r2, [r7, #24]
 80041ec:	0151      	lsls	r1, r2, #5
 80041ee:	69fa      	ldr	r2, [r7, #28]
 80041f0:	440a      	add	r2, r1
 80041f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041f6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80041fa:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	78db      	ldrb	r3, [r3, #3]
 8004200:	2b01      	cmp	r3, #1
 8004202:	d015      	beq.n	8004230 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	695b      	ldr	r3, [r3, #20]
 8004208:	2b00      	cmp	r3, #0
 800420a:	f000 8117 	beq.w	800443c <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800420e:	69fb      	ldr	r3, [r7, #28]
 8004210:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004214:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	781b      	ldrb	r3, [r3, #0]
 800421a:	f003 030f 	and.w	r3, r3, #15
 800421e:	2101      	movs	r1, #1
 8004220:	fa01 f303 	lsl.w	r3, r1, r3
 8004224:	69f9      	ldr	r1, [r7, #28]
 8004226:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800422a:	4313      	orrs	r3, r2
 800422c:	634b      	str	r3, [r1, #52]	; 0x34
 800422e:	e105      	b.n	800443c <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004230:	69fb      	ldr	r3, [r7, #28]
 8004232:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800423c:	2b00      	cmp	r3, #0
 800423e:	d110      	bne.n	8004262 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004240:	69bb      	ldr	r3, [r7, #24]
 8004242:	015a      	lsls	r2, r3, #5
 8004244:	69fb      	ldr	r3, [r7, #28]
 8004246:	4413      	add	r3, r2
 8004248:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	69ba      	ldr	r2, [r7, #24]
 8004250:	0151      	lsls	r1, r2, #5
 8004252:	69fa      	ldr	r2, [r7, #28]
 8004254:	440a      	add	r2, r1
 8004256:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800425a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800425e:	6013      	str	r3, [r2, #0]
 8004260:	e00f      	b.n	8004282 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004262:	69bb      	ldr	r3, [r7, #24]
 8004264:	015a      	lsls	r2, r3, #5
 8004266:	69fb      	ldr	r3, [r7, #28]
 8004268:	4413      	add	r3, r2
 800426a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	69ba      	ldr	r2, [r7, #24]
 8004272:	0151      	lsls	r1, r2, #5
 8004274:	69fa      	ldr	r2, [r7, #28]
 8004276:	440a      	add	r2, r1
 8004278:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800427c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004280:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	68d9      	ldr	r1, [r3, #12]
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	781a      	ldrb	r2, [r3, #0]
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	695b      	ldr	r3, [r3, #20]
 800428e:	b298      	uxth	r0, r3
 8004290:	79fb      	ldrb	r3, [r7, #7]
 8004292:	9300      	str	r3, [sp, #0]
 8004294:	4603      	mov	r3, r0
 8004296:	68f8      	ldr	r0, [r7, #12]
 8004298:	f000 fa2b 	bl	80046f2 <USB_WritePacket>
 800429c:	e0ce      	b.n	800443c <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800429e:	69bb      	ldr	r3, [r7, #24]
 80042a0:	015a      	lsls	r2, r3, #5
 80042a2:	69fb      	ldr	r3, [r7, #28]
 80042a4:	4413      	add	r3, r2
 80042a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042aa:	691b      	ldr	r3, [r3, #16]
 80042ac:	69ba      	ldr	r2, [r7, #24]
 80042ae:	0151      	lsls	r1, r2, #5
 80042b0:	69fa      	ldr	r2, [r7, #28]
 80042b2:	440a      	add	r2, r1
 80042b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80042b8:	0cdb      	lsrs	r3, r3, #19
 80042ba:	04db      	lsls	r3, r3, #19
 80042bc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80042be:	69bb      	ldr	r3, [r7, #24]
 80042c0:	015a      	lsls	r2, r3, #5
 80042c2:	69fb      	ldr	r3, [r7, #28]
 80042c4:	4413      	add	r3, r2
 80042c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042ca:	691b      	ldr	r3, [r3, #16]
 80042cc:	69ba      	ldr	r2, [r7, #24]
 80042ce:	0151      	lsls	r1, r2, #5
 80042d0:	69fa      	ldr	r2, [r7, #28]
 80042d2:	440a      	add	r2, r1
 80042d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80042d8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80042dc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80042e0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	695b      	ldr	r3, [r3, #20]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d126      	bne.n	8004338 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80042ea:	69bb      	ldr	r3, [r7, #24]
 80042ec:	015a      	lsls	r2, r3, #5
 80042ee:	69fb      	ldr	r3, [r7, #28]
 80042f0:	4413      	add	r3, r2
 80042f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042f6:	691a      	ldr	r2, [r3, #16]
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	689b      	ldr	r3, [r3, #8]
 80042fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004300:	69b9      	ldr	r1, [r7, #24]
 8004302:	0148      	lsls	r0, r1, #5
 8004304:	69f9      	ldr	r1, [r7, #28]
 8004306:	4401      	add	r1, r0
 8004308:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800430c:	4313      	orrs	r3, r2
 800430e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004310:	69bb      	ldr	r3, [r7, #24]
 8004312:	015a      	lsls	r2, r3, #5
 8004314:	69fb      	ldr	r3, [r7, #28]
 8004316:	4413      	add	r3, r2
 8004318:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800431c:	691b      	ldr	r3, [r3, #16]
 800431e:	69ba      	ldr	r2, [r7, #24]
 8004320:	0151      	lsls	r1, r2, #5
 8004322:	69fa      	ldr	r2, [r7, #28]
 8004324:	440a      	add	r2, r1
 8004326:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800432a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800432e:	6113      	str	r3, [r2, #16]
 8004330:	e036      	b.n	80043a0 <USB_EPStartXfer+0x3dc>
 8004332:	bf00      	nop
 8004334:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	695a      	ldr	r2, [r3, #20]
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	4413      	add	r3, r2
 8004342:	1e5a      	subs	r2, r3, #1
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	fbb2 f3f3 	udiv	r3, r2, r3
 800434c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800434e:	69bb      	ldr	r3, [r7, #24]
 8004350:	015a      	lsls	r2, r3, #5
 8004352:	69fb      	ldr	r3, [r7, #28]
 8004354:	4413      	add	r3, r2
 8004356:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800435a:	691a      	ldr	r2, [r3, #16]
 800435c:	8afb      	ldrh	r3, [r7, #22]
 800435e:	04d9      	lsls	r1, r3, #19
 8004360:	4b39      	ldr	r3, [pc, #228]	; (8004448 <USB_EPStartXfer+0x484>)
 8004362:	400b      	ands	r3, r1
 8004364:	69b9      	ldr	r1, [r7, #24]
 8004366:	0148      	lsls	r0, r1, #5
 8004368:	69f9      	ldr	r1, [r7, #28]
 800436a:	4401      	add	r1, r0
 800436c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004370:	4313      	orrs	r3, r2
 8004372:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8004374:	69bb      	ldr	r3, [r7, #24]
 8004376:	015a      	lsls	r2, r3, #5
 8004378:	69fb      	ldr	r3, [r7, #28]
 800437a:	4413      	add	r3, r2
 800437c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004380:	691a      	ldr	r2, [r3, #16]
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	8af9      	ldrh	r1, [r7, #22]
 8004388:	fb01 f303 	mul.w	r3, r1, r3
 800438c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004390:	69b9      	ldr	r1, [r7, #24]
 8004392:	0148      	lsls	r0, r1, #5
 8004394:	69f9      	ldr	r1, [r7, #28]
 8004396:	4401      	add	r1, r0
 8004398:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800439c:	4313      	orrs	r3, r2
 800439e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80043a0:	79fb      	ldrb	r3, [r7, #7]
 80043a2:	2b01      	cmp	r3, #1
 80043a4:	d10d      	bne.n	80043c2 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	68db      	ldr	r3, [r3, #12]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d009      	beq.n	80043c2 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	68d9      	ldr	r1, [r3, #12]
 80043b2:	69bb      	ldr	r3, [r7, #24]
 80043b4:	015a      	lsls	r2, r3, #5
 80043b6:	69fb      	ldr	r3, [r7, #28]
 80043b8:	4413      	add	r3, r2
 80043ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043be:	460a      	mov	r2, r1
 80043c0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	78db      	ldrb	r3, [r3, #3]
 80043c6:	2b01      	cmp	r3, #1
 80043c8:	d128      	bne.n	800441c <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80043ca:	69fb      	ldr	r3, [r7, #28]
 80043cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d110      	bne.n	80043fc <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80043da:	69bb      	ldr	r3, [r7, #24]
 80043dc:	015a      	lsls	r2, r3, #5
 80043de:	69fb      	ldr	r3, [r7, #28]
 80043e0:	4413      	add	r3, r2
 80043e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	69ba      	ldr	r2, [r7, #24]
 80043ea:	0151      	lsls	r1, r2, #5
 80043ec:	69fa      	ldr	r2, [r7, #28]
 80043ee:	440a      	add	r2, r1
 80043f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043f4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80043f8:	6013      	str	r3, [r2, #0]
 80043fa:	e00f      	b.n	800441c <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80043fc:	69bb      	ldr	r3, [r7, #24]
 80043fe:	015a      	lsls	r2, r3, #5
 8004400:	69fb      	ldr	r3, [r7, #28]
 8004402:	4413      	add	r3, r2
 8004404:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	69ba      	ldr	r2, [r7, #24]
 800440c:	0151      	lsls	r1, r2, #5
 800440e:	69fa      	ldr	r2, [r7, #28]
 8004410:	440a      	add	r2, r1
 8004412:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004416:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800441a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800441c:	69bb      	ldr	r3, [r7, #24]
 800441e:	015a      	lsls	r2, r3, #5
 8004420:	69fb      	ldr	r3, [r7, #28]
 8004422:	4413      	add	r3, r2
 8004424:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	69ba      	ldr	r2, [r7, #24]
 800442c:	0151      	lsls	r1, r2, #5
 800442e:	69fa      	ldr	r2, [r7, #28]
 8004430:	440a      	add	r2, r1
 8004432:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004436:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800443a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800443c:	2300      	movs	r3, #0
}
 800443e:	4618      	mov	r0, r3
 8004440:	3720      	adds	r7, #32
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}
 8004446:	bf00      	nop
 8004448:	1ff80000 	.word	0x1ff80000

0800444c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800444c:	b480      	push	{r7}
 800444e:	b087      	sub	sp, #28
 8004450:	af00      	add	r7, sp, #0
 8004452:	60f8      	str	r0, [r7, #12]
 8004454:	60b9      	str	r1, [r7, #8]
 8004456:	4613      	mov	r3, r2
 8004458:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	781b      	ldrb	r3, [r3, #0]
 8004462:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	785b      	ldrb	r3, [r3, #1]
 8004468:	2b01      	cmp	r3, #1
 800446a:	f040 80cd 	bne.w	8004608 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	695b      	ldr	r3, [r3, #20]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d132      	bne.n	80044dc <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	015a      	lsls	r2, r3, #5
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	4413      	add	r3, r2
 800447e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004482:	691b      	ldr	r3, [r3, #16]
 8004484:	693a      	ldr	r2, [r7, #16]
 8004486:	0151      	lsls	r1, r2, #5
 8004488:	697a      	ldr	r2, [r7, #20]
 800448a:	440a      	add	r2, r1
 800448c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004490:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004494:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004498:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	015a      	lsls	r2, r3, #5
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	4413      	add	r3, r2
 80044a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044a6:	691b      	ldr	r3, [r3, #16]
 80044a8:	693a      	ldr	r2, [r7, #16]
 80044aa:	0151      	lsls	r1, r2, #5
 80044ac:	697a      	ldr	r2, [r7, #20]
 80044ae:	440a      	add	r2, r1
 80044b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044b4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80044b8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	015a      	lsls	r2, r3, #5
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	4413      	add	r3, r2
 80044c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044c6:	691b      	ldr	r3, [r3, #16]
 80044c8:	693a      	ldr	r2, [r7, #16]
 80044ca:	0151      	lsls	r1, r2, #5
 80044cc:	697a      	ldr	r2, [r7, #20]
 80044ce:	440a      	add	r2, r1
 80044d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044d4:	0cdb      	lsrs	r3, r3, #19
 80044d6:	04db      	lsls	r3, r3, #19
 80044d8:	6113      	str	r3, [r2, #16]
 80044da:	e04e      	b.n	800457a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	015a      	lsls	r2, r3, #5
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	4413      	add	r3, r2
 80044e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044e8:	691b      	ldr	r3, [r3, #16]
 80044ea:	693a      	ldr	r2, [r7, #16]
 80044ec:	0151      	lsls	r1, r2, #5
 80044ee:	697a      	ldr	r2, [r7, #20]
 80044f0:	440a      	add	r2, r1
 80044f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044f6:	0cdb      	lsrs	r3, r3, #19
 80044f8:	04db      	lsls	r3, r3, #19
 80044fa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	015a      	lsls	r2, r3, #5
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	4413      	add	r3, r2
 8004504:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004508:	691b      	ldr	r3, [r3, #16]
 800450a:	693a      	ldr	r2, [r7, #16]
 800450c:	0151      	lsls	r1, r2, #5
 800450e:	697a      	ldr	r2, [r7, #20]
 8004510:	440a      	add	r2, r1
 8004512:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004516:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800451a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800451e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	695a      	ldr	r2, [r3, #20]
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	429a      	cmp	r2, r3
 800452a:	d903      	bls.n	8004534 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	689a      	ldr	r2, [r3, #8]
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	015a      	lsls	r2, r3, #5
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	4413      	add	r3, r2
 800453c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004540:	691b      	ldr	r3, [r3, #16]
 8004542:	693a      	ldr	r2, [r7, #16]
 8004544:	0151      	lsls	r1, r2, #5
 8004546:	697a      	ldr	r2, [r7, #20]
 8004548:	440a      	add	r2, r1
 800454a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800454e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004552:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004554:	693b      	ldr	r3, [r7, #16]
 8004556:	015a      	lsls	r2, r3, #5
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	4413      	add	r3, r2
 800455c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004560:	691a      	ldr	r2, [r3, #16]
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	695b      	ldr	r3, [r3, #20]
 8004566:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800456a:	6939      	ldr	r1, [r7, #16]
 800456c:	0148      	lsls	r0, r1, #5
 800456e:	6979      	ldr	r1, [r7, #20]
 8004570:	4401      	add	r1, r0
 8004572:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004576:	4313      	orrs	r3, r2
 8004578:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800457a:	79fb      	ldrb	r3, [r7, #7]
 800457c:	2b01      	cmp	r3, #1
 800457e:	d11e      	bne.n	80045be <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	691b      	ldr	r3, [r3, #16]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d009      	beq.n	800459c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	015a      	lsls	r2, r3, #5
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	4413      	add	r3, r2
 8004590:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004594:	461a      	mov	r2, r3
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	691b      	ldr	r3, [r3, #16]
 800459a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	015a      	lsls	r2, r3, #5
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	4413      	add	r3, r2
 80045a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	693a      	ldr	r2, [r7, #16]
 80045ac:	0151      	lsls	r1, r2, #5
 80045ae:	697a      	ldr	r2, [r7, #20]
 80045b0:	440a      	add	r2, r1
 80045b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045b6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80045ba:	6013      	str	r3, [r2, #0]
 80045bc:	e092      	b.n	80046e4 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	015a      	lsls	r2, r3, #5
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	4413      	add	r3, r2
 80045c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	693a      	ldr	r2, [r7, #16]
 80045ce:	0151      	lsls	r1, r2, #5
 80045d0:	697a      	ldr	r2, [r7, #20]
 80045d2:	440a      	add	r2, r1
 80045d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045d8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80045dc:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	695b      	ldr	r3, [r3, #20]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d07e      	beq.n	80046e4 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80045e6:	697b      	ldr	r3, [r7, #20]
 80045e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	781b      	ldrb	r3, [r3, #0]
 80045f2:	f003 030f 	and.w	r3, r3, #15
 80045f6:	2101      	movs	r1, #1
 80045f8:	fa01 f303 	lsl.w	r3, r1, r3
 80045fc:	6979      	ldr	r1, [r7, #20]
 80045fe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004602:	4313      	orrs	r3, r2
 8004604:	634b      	str	r3, [r1, #52]	; 0x34
 8004606:	e06d      	b.n	80046e4 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	015a      	lsls	r2, r3, #5
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	4413      	add	r3, r2
 8004610:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004614:	691b      	ldr	r3, [r3, #16]
 8004616:	693a      	ldr	r2, [r7, #16]
 8004618:	0151      	lsls	r1, r2, #5
 800461a:	697a      	ldr	r2, [r7, #20]
 800461c:	440a      	add	r2, r1
 800461e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004622:	0cdb      	lsrs	r3, r3, #19
 8004624:	04db      	lsls	r3, r3, #19
 8004626:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	015a      	lsls	r2, r3, #5
 800462c:	697b      	ldr	r3, [r7, #20]
 800462e:	4413      	add	r3, r2
 8004630:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004634:	691b      	ldr	r3, [r3, #16]
 8004636:	693a      	ldr	r2, [r7, #16]
 8004638:	0151      	lsls	r1, r2, #5
 800463a:	697a      	ldr	r2, [r7, #20]
 800463c:	440a      	add	r2, r1
 800463e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004642:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004646:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800464a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	695b      	ldr	r3, [r3, #20]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d003      	beq.n	800465c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	689a      	ldr	r2, [r3, #8]
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	015a      	lsls	r2, r3, #5
 8004660:	697b      	ldr	r3, [r7, #20]
 8004662:	4413      	add	r3, r2
 8004664:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004668:	691b      	ldr	r3, [r3, #16]
 800466a:	693a      	ldr	r2, [r7, #16]
 800466c:	0151      	lsls	r1, r2, #5
 800466e:	697a      	ldr	r2, [r7, #20]
 8004670:	440a      	add	r2, r1
 8004672:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004676:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800467a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	015a      	lsls	r2, r3, #5
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	4413      	add	r3, r2
 8004684:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004688:	691a      	ldr	r2, [r3, #16]
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	689b      	ldr	r3, [r3, #8]
 800468e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004692:	6939      	ldr	r1, [r7, #16]
 8004694:	0148      	lsls	r0, r1, #5
 8004696:	6979      	ldr	r1, [r7, #20]
 8004698:	4401      	add	r1, r0
 800469a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800469e:	4313      	orrs	r3, r2
 80046a0:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80046a2:	79fb      	ldrb	r3, [r7, #7]
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	d10d      	bne.n	80046c4 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	68db      	ldr	r3, [r3, #12]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d009      	beq.n	80046c4 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	68d9      	ldr	r1, [r3, #12]
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	015a      	lsls	r2, r3, #5
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	4413      	add	r3, r2
 80046bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046c0:	460a      	mov	r2, r1
 80046c2:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	015a      	lsls	r2, r3, #5
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	4413      	add	r3, r2
 80046cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	693a      	ldr	r2, [r7, #16]
 80046d4:	0151      	lsls	r1, r2, #5
 80046d6:	697a      	ldr	r2, [r7, #20]
 80046d8:	440a      	add	r2, r1
 80046da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046de:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80046e2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80046e4:	2300      	movs	r3, #0
}
 80046e6:	4618      	mov	r0, r3
 80046e8:	371c      	adds	r7, #28
 80046ea:	46bd      	mov	sp, r7
 80046ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f0:	4770      	bx	lr

080046f2 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80046f2:	b480      	push	{r7}
 80046f4:	b089      	sub	sp, #36	; 0x24
 80046f6:	af00      	add	r7, sp, #0
 80046f8:	60f8      	str	r0, [r7, #12]
 80046fa:	60b9      	str	r1, [r7, #8]
 80046fc:	4611      	mov	r1, r2
 80046fe:	461a      	mov	r2, r3
 8004700:	460b      	mov	r3, r1
 8004702:	71fb      	strb	r3, [r7, #7]
 8004704:	4613      	mov	r3, r2
 8004706:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8004710:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004714:	2b00      	cmp	r3, #0
 8004716:	d11a      	bne.n	800474e <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004718:	88bb      	ldrh	r3, [r7, #4]
 800471a:	3303      	adds	r3, #3
 800471c:	089b      	lsrs	r3, r3, #2
 800471e:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004720:	2300      	movs	r3, #0
 8004722:	61bb      	str	r3, [r7, #24]
 8004724:	e00f      	b.n	8004746 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004726:	79fb      	ldrb	r3, [r7, #7]
 8004728:	031a      	lsls	r2, r3, #12
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	4413      	add	r3, r2
 800472e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004732:	461a      	mov	r2, r3
 8004734:	69fb      	ldr	r3, [r7, #28]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	6013      	str	r3, [r2, #0]
      pSrc++;
 800473a:	69fb      	ldr	r3, [r7, #28]
 800473c:	3304      	adds	r3, #4
 800473e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004740:	69bb      	ldr	r3, [r7, #24]
 8004742:	3301      	adds	r3, #1
 8004744:	61bb      	str	r3, [r7, #24]
 8004746:	69ba      	ldr	r2, [r7, #24]
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	429a      	cmp	r2, r3
 800474c:	d3eb      	bcc.n	8004726 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800474e:	2300      	movs	r3, #0
}
 8004750:	4618      	mov	r0, r3
 8004752:	3724      	adds	r7, #36	; 0x24
 8004754:	46bd      	mov	sp, r7
 8004756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475a:	4770      	bx	lr

0800475c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800475c:	b480      	push	{r7}
 800475e:	b089      	sub	sp, #36	; 0x24
 8004760:	af00      	add	r7, sp, #0
 8004762:	60f8      	str	r0, [r7, #12]
 8004764:	60b9      	str	r1, [r7, #8]
 8004766:	4613      	mov	r3, r2
 8004768:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8004772:	88fb      	ldrh	r3, [r7, #6]
 8004774:	3303      	adds	r3, #3
 8004776:	089b      	lsrs	r3, r3, #2
 8004778:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800477a:	2300      	movs	r3, #0
 800477c:	61bb      	str	r3, [r7, #24]
 800477e:	e00b      	b.n	8004798 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004786:	681a      	ldr	r2, [r3, #0]
 8004788:	69fb      	ldr	r3, [r7, #28]
 800478a:	601a      	str	r2, [r3, #0]
    pDest++;
 800478c:	69fb      	ldr	r3, [r7, #28]
 800478e:	3304      	adds	r3, #4
 8004790:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8004792:	69bb      	ldr	r3, [r7, #24]
 8004794:	3301      	adds	r3, #1
 8004796:	61bb      	str	r3, [r7, #24]
 8004798:	69ba      	ldr	r2, [r7, #24]
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	429a      	cmp	r2, r3
 800479e:	d3ef      	bcc.n	8004780 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80047a0:	69fb      	ldr	r3, [r7, #28]
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	3724      	adds	r7, #36	; 0x24
 80047a6:	46bd      	mov	sp, r7
 80047a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ac:	4770      	bx	lr

080047ae <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80047ae:	b480      	push	{r7}
 80047b0:	b085      	sub	sp, #20
 80047b2:	af00      	add	r7, sp, #0
 80047b4:	6078      	str	r0, [r7, #4]
 80047b6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	781b      	ldrb	r3, [r3, #0]
 80047c0:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	785b      	ldrb	r3, [r3, #1]
 80047c6:	2b01      	cmp	r3, #1
 80047c8:	d12c      	bne.n	8004824 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	015a      	lsls	r2, r3, #5
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	4413      	add	r3, r2
 80047d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	db12      	blt.n	8004802 <USB_EPSetStall+0x54>
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d00f      	beq.n	8004802 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	015a      	lsls	r2, r3, #5
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	4413      	add	r3, r2
 80047ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	68ba      	ldr	r2, [r7, #8]
 80047f2:	0151      	lsls	r1, r2, #5
 80047f4:	68fa      	ldr	r2, [r7, #12]
 80047f6:	440a      	add	r2, r1
 80047f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047fc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004800:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	015a      	lsls	r2, r3, #5
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	4413      	add	r3, r2
 800480a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	68ba      	ldr	r2, [r7, #8]
 8004812:	0151      	lsls	r1, r2, #5
 8004814:	68fa      	ldr	r2, [r7, #12]
 8004816:	440a      	add	r2, r1
 8004818:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800481c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004820:	6013      	str	r3, [r2, #0]
 8004822:	e02b      	b.n	800487c <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	015a      	lsls	r2, r3, #5
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	4413      	add	r3, r2
 800482c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	2b00      	cmp	r3, #0
 8004834:	db12      	blt.n	800485c <USB_EPSetStall+0xae>
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d00f      	beq.n	800485c <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	015a      	lsls	r2, r3, #5
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	4413      	add	r3, r2
 8004844:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	68ba      	ldr	r2, [r7, #8]
 800484c:	0151      	lsls	r1, r2, #5
 800484e:	68fa      	ldr	r2, [r7, #12]
 8004850:	440a      	add	r2, r1
 8004852:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004856:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800485a:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	015a      	lsls	r2, r3, #5
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	4413      	add	r3, r2
 8004864:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	68ba      	ldr	r2, [r7, #8]
 800486c:	0151      	lsls	r1, r2, #5
 800486e:	68fa      	ldr	r2, [r7, #12]
 8004870:	440a      	add	r2, r1
 8004872:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004876:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800487a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800487c:	2300      	movs	r3, #0
}
 800487e:	4618      	mov	r0, r3
 8004880:	3714      	adds	r7, #20
 8004882:	46bd      	mov	sp, r7
 8004884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004888:	4770      	bx	lr

0800488a <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800488a:	b480      	push	{r7}
 800488c:	b085      	sub	sp, #20
 800488e:	af00      	add	r7, sp, #0
 8004890:	6078      	str	r0, [r7, #4]
 8004892:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	781b      	ldrb	r3, [r3, #0]
 800489c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	785b      	ldrb	r3, [r3, #1]
 80048a2:	2b01      	cmp	r3, #1
 80048a4:	d128      	bne.n	80048f8 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	015a      	lsls	r2, r3, #5
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	4413      	add	r3, r2
 80048ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	68ba      	ldr	r2, [r7, #8]
 80048b6:	0151      	lsls	r1, r2, #5
 80048b8:	68fa      	ldr	r2, [r7, #12]
 80048ba:	440a      	add	r2, r1
 80048bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048c0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80048c4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	78db      	ldrb	r3, [r3, #3]
 80048ca:	2b03      	cmp	r3, #3
 80048cc:	d003      	beq.n	80048d6 <USB_EPClearStall+0x4c>
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	78db      	ldrb	r3, [r3, #3]
 80048d2:	2b02      	cmp	r3, #2
 80048d4:	d138      	bne.n	8004948 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	015a      	lsls	r2, r3, #5
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	4413      	add	r3, r2
 80048de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	68ba      	ldr	r2, [r7, #8]
 80048e6:	0151      	lsls	r1, r2, #5
 80048e8:	68fa      	ldr	r2, [r7, #12]
 80048ea:	440a      	add	r2, r1
 80048ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048f4:	6013      	str	r3, [r2, #0]
 80048f6:	e027      	b.n	8004948 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	015a      	lsls	r2, r3, #5
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	4413      	add	r3, r2
 8004900:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	68ba      	ldr	r2, [r7, #8]
 8004908:	0151      	lsls	r1, r2, #5
 800490a:	68fa      	ldr	r2, [r7, #12]
 800490c:	440a      	add	r2, r1
 800490e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004912:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004916:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	78db      	ldrb	r3, [r3, #3]
 800491c:	2b03      	cmp	r3, #3
 800491e:	d003      	beq.n	8004928 <USB_EPClearStall+0x9e>
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	78db      	ldrb	r3, [r3, #3]
 8004924:	2b02      	cmp	r3, #2
 8004926:	d10f      	bne.n	8004948 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	015a      	lsls	r2, r3, #5
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	4413      	add	r3, r2
 8004930:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	68ba      	ldr	r2, [r7, #8]
 8004938:	0151      	lsls	r1, r2, #5
 800493a:	68fa      	ldr	r2, [r7, #12]
 800493c:	440a      	add	r2, r1
 800493e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004942:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004946:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004948:	2300      	movs	r3, #0
}
 800494a:	4618      	mov	r0, r3
 800494c:	3714      	adds	r7, #20
 800494e:	46bd      	mov	sp, r7
 8004950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004954:	4770      	bx	lr

08004956 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004956:	b480      	push	{r7}
 8004958:	b085      	sub	sp, #20
 800495a:	af00      	add	r7, sp, #0
 800495c:	6078      	str	r0, [r7, #4]
 800495e:	460b      	mov	r3, r1
 8004960:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	68fa      	ldr	r2, [r7, #12]
 8004970:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004974:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004978:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004980:	681a      	ldr	r2, [r3, #0]
 8004982:	78fb      	ldrb	r3, [r7, #3]
 8004984:	011b      	lsls	r3, r3, #4
 8004986:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800498a:	68f9      	ldr	r1, [r7, #12]
 800498c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004990:	4313      	orrs	r3, r2
 8004992:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004994:	2300      	movs	r3, #0
}
 8004996:	4618      	mov	r0, r3
 8004998:	3714      	adds	r7, #20
 800499a:	46bd      	mov	sp, r7
 800499c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a0:	4770      	bx	lr

080049a2 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80049a2:	b480      	push	{r7}
 80049a4:	b085      	sub	sp, #20
 80049a6:	af00      	add	r7, sp, #0
 80049a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	68fa      	ldr	r2, [r7, #12]
 80049b8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80049bc:	f023 0303 	bic.w	r3, r3, #3
 80049c0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	68fa      	ldr	r2, [r7, #12]
 80049cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80049d0:	f023 0302 	bic.w	r3, r3, #2
 80049d4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80049d6:	2300      	movs	r3, #0
}
 80049d8:	4618      	mov	r0, r3
 80049da:	3714      	adds	r7, #20
 80049dc:	46bd      	mov	sp, r7
 80049de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e2:	4770      	bx	lr

080049e4 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b085      	sub	sp, #20
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	68fa      	ldr	r2, [r7, #12]
 80049fa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80049fe:	f023 0303 	bic.w	r3, r3, #3
 8004a02:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	68fa      	ldr	r2, [r7, #12]
 8004a0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a12:	f043 0302 	orr.w	r3, r3, #2
 8004a16:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004a18:	2300      	movs	r3, #0
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	3714      	adds	r7, #20
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a24:	4770      	bx	lr

08004a26 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004a26:	b480      	push	{r7}
 8004a28:	b085      	sub	sp, #20
 8004a2a:	af00      	add	r7, sp, #0
 8004a2c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	695b      	ldr	r3, [r3, #20]
 8004a32:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	699b      	ldr	r3, [r3, #24]
 8004a38:	68fa      	ldr	r2, [r7, #12]
 8004a3a:	4013      	ands	r3, r2
 8004a3c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	3714      	adds	r7, #20
 8004a44:	46bd      	mov	sp, r7
 8004a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4a:	4770      	bx	lr

08004a4c <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b085      	sub	sp, #20
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a5e:	699b      	ldr	r3, [r3, #24]
 8004a60:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a68:	69db      	ldr	r3, [r3, #28]
 8004a6a:	68ba      	ldr	r2, [r7, #8]
 8004a6c:	4013      	ands	r3, r2
 8004a6e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	0c1b      	lsrs	r3, r3, #16
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	3714      	adds	r7, #20
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7e:	4770      	bx	lr

08004a80 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b085      	sub	sp, #20
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a92:	699b      	ldr	r3, [r3, #24]
 8004a94:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a9c:	69db      	ldr	r3, [r3, #28]
 8004a9e:	68ba      	ldr	r2, [r7, #8]
 8004aa0:	4013      	ands	r3, r2
 8004aa2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	b29b      	uxth	r3, r3
}
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	3714      	adds	r7, #20
 8004aac:	46bd      	mov	sp, r7
 8004aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab2:	4770      	bx	lr

08004ab4 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b085      	sub	sp, #20
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
 8004abc:	460b      	mov	r3, r1
 8004abe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004ac4:	78fb      	ldrb	r3, [r7, #3]
 8004ac6:	015a      	lsls	r2, r3, #5
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	4413      	add	r3, r2
 8004acc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ada:	695b      	ldr	r3, [r3, #20]
 8004adc:	68ba      	ldr	r2, [r7, #8]
 8004ade:	4013      	ands	r3, r2
 8004ae0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004ae2:	68bb      	ldr	r3, [r7, #8]
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	3714      	adds	r7, #20
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aee:	4770      	bx	lr

08004af0 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b087      	sub	sp, #28
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
 8004af8:	460b      	mov	r3, r1
 8004afa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b06:	691b      	ldr	r3, [r3, #16]
 8004b08:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b12:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004b14:	78fb      	ldrb	r3, [r7, #3]
 8004b16:	f003 030f 	and.w	r3, r3, #15
 8004b1a:	68fa      	ldr	r2, [r7, #12]
 8004b1c:	fa22 f303 	lsr.w	r3, r2, r3
 8004b20:	01db      	lsls	r3, r3, #7
 8004b22:	b2db      	uxtb	r3, r3
 8004b24:	693a      	ldr	r2, [r7, #16]
 8004b26:	4313      	orrs	r3, r2
 8004b28:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004b2a:	78fb      	ldrb	r3, [r7, #3]
 8004b2c:	015a      	lsls	r2, r3, #5
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	4413      	add	r3, r2
 8004b32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b36:	689b      	ldr	r3, [r3, #8]
 8004b38:	693a      	ldr	r2, [r7, #16]
 8004b3a:	4013      	ands	r3, r2
 8004b3c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004b3e:	68bb      	ldr	r3, [r7, #8]
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	371c      	adds	r7, #28
 8004b44:	46bd      	mov	sp, r7
 8004b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4a:	4770      	bx	lr

08004b4c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b083      	sub	sp, #12
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	695b      	ldr	r3, [r3, #20]
 8004b58:	f003 0301 	and.w	r3, r3, #1
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	370c      	adds	r7, #12
 8004b60:	46bd      	mov	sp, r7
 8004b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b66:	4770      	bx	lr

08004b68 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b085      	sub	sp, #20
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	68fa      	ldr	r2, [r7, #12]
 8004b7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b82:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004b86:	f023 0307 	bic.w	r3, r3, #7
 8004b8a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	68fa      	ldr	r2, [r7, #12]
 8004b96:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b9e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004ba0:	2300      	movs	r3, #0
}
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	3714      	adds	r7, #20
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bac:	4770      	bx	lr
	...

08004bb0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b087      	sub	sp, #28
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	60f8      	str	r0, [r7, #12]
 8004bb8:	460b      	mov	r3, r1
 8004bba:	607a      	str	r2, [r7, #4]
 8004bbc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	333c      	adds	r3, #60	; 0x3c
 8004bc6:	3304      	adds	r3, #4
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004bcc:	693b      	ldr	r3, [r7, #16]
 8004bce:	4a26      	ldr	r2, [pc, #152]	; (8004c68 <USB_EP0_OutStart+0xb8>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d90a      	bls.n	8004bea <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004be0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004be4:	d101      	bne.n	8004bea <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004be6:	2300      	movs	r3, #0
 8004be8:	e037      	b.n	8004c5a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004bea:	697b      	ldr	r3, [r7, #20]
 8004bec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bf0:	461a      	mov	r2, r3
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bfc:	691b      	ldr	r3, [r3, #16]
 8004bfe:	697a      	ldr	r2, [r7, #20]
 8004c00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c04:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004c08:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c10:	691b      	ldr	r3, [r3, #16]
 8004c12:	697a      	ldr	r2, [r7, #20]
 8004c14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c18:	f043 0318 	orr.w	r3, r3, #24
 8004c1c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c24:	691b      	ldr	r3, [r3, #16]
 8004c26:	697a      	ldr	r2, [r7, #20]
 8004c28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c2c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004c30:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004c32:	7afb      	ldrb	r3, [r7, #11]
 8004c34:	2b01      	cmp	r3, #1
 8004c36:	d10f      	bne.n	8004c58 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004c38:	697b      	ldr	r3, [r7, #20]
 8004c3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c3e:	461a      	mov	r2, r3
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	697a      	ldr	r2, [r7, #20]
 8004c4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c52:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8004c56:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004c58:	2300      	movs	r3, #0
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	371c      	adds	r7, #28
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c64:	4770      	bx	lr
 8004c66:	bf00      	nop
 8004c68:	4f54300a 	.word	0x4f54300a

08004c6c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b085      	sub	sp, #20
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004c74:	2300      	movs	r3, #0
 8004c76:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	3301      	adds	r3, #1
 8004c7c:	60fb      	str	r3, [r7, #12]
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	4a13      	ldr	r2, [pc, #76]	; (8004cd0 <USB_CoreReset+0x64>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d901      	bls.n	8004c8a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004c86:	2303      	movs	r3, #3
 8004c88:	e01b      	b.n	8004cc2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	691b      	ldr	r3, [r3, #16]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	daf2      	bge.n	8004c78 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004c92:	2300      	movs	r3, #0
 8004c94:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	691b      	ldr	r3, [r3, #16]
 8004c9a:	f043 0201 	orr.w	r2, r3, #1
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	3301      	adds	r3, #1
 8004ca6:	60fb      	str	r3, [r7, #12]
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	4a09      	ldr	r2, [pc, #36]	; (8004cd0 <USB_CoreReset+0x64>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d901      	bls.n	8004cb4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004cb0:	2303      	movs	r3, #3
 8004cb2:	e006      	b.n	8004cc2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	691b      	ldr	r3, [r3, #16]
 8004cb8:	f003 0301 	and.w	r3, r3, #1
 8004cbc:	2b01      	cmp	r3, #1
 8004cbe:	d0f0      	beq.n	8004ca2 <USB_CoreReset+0x36>

  return HAL_OK;
 8004cc0:	2300      	movs	r3, #0
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3714      	adds	r7, #20
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ccc:	4770      	bx	lr
 8004cce:	bf00      	nop
 8004cd0:	00030d40 	.word	0x00030d40

08004cd4 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b084      	sub	sp, #16
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
 8004cdc:	460b      	mov	r3, r1
 8004cde:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8004ce0:	2010      	movs	r0, #16
 8004ce2:	f001 feed 	bl	8006ac0 <malloc>
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d105      	bne.n	8004cfc <USBD_HID_Init+0x28>
  {
    pdev->pClassData = NULL;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8004cf8:	2302      	movs	r3, #2
 8004cfa:	e01b      	b.n	8004d34 <USBD_HID_Init+0x60>
  }

  pdev->pClassData = (void *)hhid;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	68fa      	ldr	r2, [r7, #12]
 8004d00:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	7c1b      	ldrb	r3, [r3, #16]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d103      	bne.n	8004d14 <USBD_HID_Init+0x40>
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_HS_BINTERVAL;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2207      	movs	r2, #7
 8004d10:	875a      	strh	r2, [r3, #58]	; 0x3a
 8004d12:	e002      	b.n	8004d1a <USBD_HID_Init+0x46>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_FS_BINTERVAL;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	220a      	movs	r2, #10
 8004d18:	875a      	strh	r2, [r3, #58]	; 0x3a
  }

    /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8004d1a:	2308      	movs	r3, #8
 8004d1c:	2203      	movs	r2, #3
 8004d1e:	2181      	movs	r1, #129	; 0x81
 8004d20:	6878      	ldr	r0, [r7, #4]
 8004d22:	f001 fd66 	bl	80067f2 <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2201      	movs	r2, #1
 8004d2a:	871a      	strh	r2, [r3, #56]	; 0x38

  hhid->state = HID_IDLE;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8004d32:	2300      	movs	r3, #0
}
 8004d34:	4618      	mov	r0, r3
 8004d36:	3710      	adds	r7, #16
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bd80      	pop	{r7, pc}

08004d3c <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b082      	sub	sp, #8
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
 8004d44:	460b      	mov	r3, r1
 8004d46:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8004d48:	2181      	movs	r1, #129	; 0x81
 8004d4a:	6878      	ldr	r0, [r7, #4]
 8004d4c:	f001 fd77 	bl	800683e <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2200      	movs	r2, #0
 8004d54:	871a      	strh	r2, [r3, #56]	; 0x38
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d009      	beq.n	8004d7a <USBD_HID_DeInit+0x3e>
  {
    (void)USBD_free(pdev->pClassData);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	f001 feaf 	bl	8006ad0 <free>
    pdev->pClassData = NULL;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2200      	movs	r2, #0
 8004d76:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8004d7a:	2300      	movs	r3, #0
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	3708      	adds	r7, #8
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd80      	pop	{r7, pc}

08004d84 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b086      	sub	sp, #24
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
 8004d8c:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004d94:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8004d96:	2300      	movs	r3, #0
 8004d98:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	817b      	strh	r3, [r7, #10]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	781b      	ldrb	r3, [r3, #0]
 8004da2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d045      	beq.n	8004e36 <USBD_HID_Setup+0xb2>
 8004daa:	2b20      	cmp	r3, #32
 8004dac:	f040 80d4 	bne.w	8004f58 <USBD_HID_Setup+0x1d4>
  {
  case USB_REQ_TYPE_CLASS :
    switch (req->bRequest)
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	785b      	ldrb	r3, [r3, #1]
 8004db4:	3b02      	subs	r3, #2
 8004db6:	2b09      	cmp	r3, #9
 8004db8:	d835      	bhi.n	8004e26 <USBD_HID_Setup+0xa2>
 8004dba:	a201      	add	r2, pc, #4	; (adr r2, 8004dc0 <USBD_HID_Setup+0x3c>)
 8004dbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dc0:	08004e17 	.word	0x08004e17
 8004dc4:	08004df7 	.word	0x08004df7
 8004dc8:	08004e27 	.word	0x08004e27
 8004dcc:	08004e27 	.word	0x08004e27
 8004dd0:	08004e27 	.word	0x08004e27
 8004dd4:	08004e27 	.word	0x08004e27
 8004dd8:	08004e27 	.word	0x08004e27
 8004ddc:	08004e27 	.word	0x08004e27
 8004de0:	08004e05 	.word	0x08004e05
 8004de4:	08004de9 	.word	0x08004de9
    {
    case HID_REQ_SET_PROTOCOL:
      hhid->Protocol = (uint8_t)(req->wValue);
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	885b      	ldrh	r3, [r3, #2]
 8004dec:	b2db      	uxtb	r3, r3
 8004dee:	461a      	mov	r2, r3
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	601a      	str	r2, [r3, #0]
      break;
 8004df4:	e01e      	b.n	8004e34 <USBD_HID_Setup+0xb0>

    case HID_REQ_GET_PROTOCOL:
      (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	2201      	movs	r2, #1
 8004dfa:	4619      	mov	r1, r3
 8004dfc:	6878      	ldr	r0, [r7, #4]
 8004dfe:	f001 f9b4 	bl	800616a <USBD_CtlSendData>
      break;
 8004e02:	e017      	b.n	8004e34 <USBD_HID_Setup+0xb0>

    case HID_REQ_SET_IDLE:
      hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	885b      	ldrh	r3, [r3, #2]
 8004e08:	0a1b      	lsrs	r3, r3, #8
 8004e0a:	b29b      	uxth	r3, r3
 8004e0c:	b2db      	uxtb	r3, r3
 8004e0e:	461a      	mov	r2, r3
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	605a      	str	r2, [r3, #4]
      break;
 8004e14:	e00e      	b.n	8004e34 <USBD_HID_Setup+0xb0>

    case HID_REQ_GET_IDLE:
      (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	3304      	adds	r3, #4
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	4619      	mov	r1, r3
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f001 f9a3 	bl	800616a <USBD_CtlSendData>
      break;
 8004e24:	e006      	b.n	8004e34 <USBD_HID_Setup+0xb0>

    default:
      USBD_CtlError(pdev, req);
 8004e26:	6839      	ldr	r1, [r7, #0]
 8004e28:	6878      	ldr	r0, [r7, #4]
 8004e2a:	f001 f92d 	bl	8006088 <USBD_CtlError>
      ret = USBD_FAIL;
 8004e2e:	2303      	movs	r3, #3
 8004e30:	75fb      	strb	r3, [r7, #23]
      break;
 8004e32:	bf00      	nop
    }
    break;
 8004e34:	e097      	b.n	8004f66 <USBD_HID_Setup+0x1e2>
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	785b      	ldrb	r3, [r3, #1]
 8004e3a:	2b0b      	cmp	r3, #11
 8004e3c:	f200 8083 	bhi.w	8004f46 <USBD_HID_Setup+0x1c2>
 8004e40:	a201      	add	r2, pc, #4	; (adr r2, 8004e48 <USBD_HID_Setup+0xc4>)
 8004e42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e46:	bf00      	nop
 8004e48:	08004e79 	.word	0x08004e79
 8004e4c:	08004f55 	.word	0x08004f55
 8004e50:	08004f47 	.word	0x08004f47
 8004e54:	08004f47 	.word	0x08004f47
 8004e58:	08004f47 	.word	0x08004f47
 8004e5c:	08004f47 	.word	0x08004f47
 8004e60:	08004ea1 	.word	0x08004ea1
 8004e64:	08004f47 	.word	0x08004f47
 8004e68:	08004f47 	.word	0x08004f47
 8004e6c:	08004f47 	.word	0x08004f47
 8004e70:	08004ef9 	.word	0x08004ef9
 8004e74:	08004f21 	.word	0x08004f21
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004e7e:	2b03      	cmp	r3, #3
 8004e80:	d107      	bne.n	8004e92 <USBD_HID_Setup+0x10e>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004e82:	f107 030a 	add.w	r3, r7, #10
 8004e86:	2202      	movs	r2, #2
 8004e88:	4619      	mov	r1, r3
 8004e8a:	6878      	ldr	r0, [r7, #4]
 8004e8c:	f001 f96d 	bl	800616a <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8004e90:	e061      	b.n	8004f56 <USBD_HID_Setup+0x1d2>
        USBD_CtlError(pdev, req);
 8004e92:	6839      	ldr	r1, [r7, #0]
 8004e94:	6878      	ldr	r0, [r7, #4]
 8004e96:	f001 f8f7 	bl	8006088 <USBD_CtlError>
        ret = USBD_FAIL;
 8004e9a:	2303      	movs	r3, #3
 8004e9c:	75fb      	strb	r3, [r7, #23]
      break;
 8004e9e:	e05a      	b.n	8004f56 <USBD_HID_Setup+0x1d2>

    case USB_REQ_GET_DESCRIPTOR:
      if ((req->wValue >> 8) == HID_REPORT_DESC)
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	885b      	ldrh	r3, [r3, #2]
 8004ea4:	0a1b      	lsrs	r3, r3, #8
 8004ea6:	b29b      	uxth	r3, r3
 8004ea8:	2b22      	cmp	r3, #34	; 0x22
 8004eaa:	d108      	bne.n	8004ebe <USBD_HID_Setup+0x13a>
      {
        len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	88db      	ldrh	r3, [r3, #6]
 8004eb0:	2b3f      	cmp	r3, #63	; 0x3f
 8004eb2:	bf28      	it	cs
 8004eb4:	233f      	movcs	r3, #63	; 0x3f
 8004eb6:	82bb      	strh	r3, [r7, #20]
        pbuf = HID_MOUSE_ReportDesc;
 8004eb8:	4b2d      	ldr	r3, [pc, #180]	; (8004f70 <USBD_HID_Setup+0x1ec>)
 8004eba:	613b      	str	r3, [r7, #16]
 8004ebc:	e015      	b.n	8004eea <USBD_HID_Setup+0x166>
      }
      else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	885b      	ldrh	r3, [r3, #2]
 8004ec2:	0a1b      	lsrs	r3, r3, #8
 8004ec4:	b29b      	uxth	r3, r3
 8004ec6:	2b21      	cmp	r3, #33	; 0x21
 8004ec8:	d108      	bne.n	8004edc <USBD_HID_Setup+0x158>
      {
        pbuf = USBD_HID_Desc;
 8004eca:	4b2a      	ldr	r3, [pc, #168]	; (8004f74 <USBD_HID_Setup+0x1f0>)
 8004ecc:	613b      	str	r3, [r7, #16]
        len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	88db      	ldrh	r3, [r3, #6]
 8004ed2:	2b09      	cmp	r3, #9
 8004ed4:	bf28      	it	cs
 8004ed6:	2309      	movcs	r3, #9
 8004ed8:	82bb      	strh	r3, [r7, #20]
 8004eda:	e006      	b.n	8004eea <USBD_HID_Setup+0x166>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8004edc:	6839      	ldr	r1, [r7, #0]
 8004ede:	6878      	ldr	r0, [r7, #4]
 8004ee0:	f001 f8d2 	bl	8006088 <USBD_CtlError>
        ret = USBD_FAIL;
 8004ee4:	2303      	movs	r3, #3
 8004ee6:	75fb      	strb	r3, [r7, #23]
        break;
 8004ee8:	e035      	b.n	8004f56 <USBD_HID_Setup+0x1d2>
      }
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8004eea:	8abb      	ldrh	r3, [r7, #20]
 8004eec:	461a      	mov	r2, r3
 8004eee:	6939      	ldr	r1, [r7, #16]
 8004ef0:	6878      	ldr	r0, [r7, #4]
 8004ef2:	f001 f93a 	bl	800616a <USBD_CtlSendData>
      break;
 8004ef6:	e02e      	b.n	8004f56 <USBD_HID_Setup+0x1d2>

    case USB_REQ_GET_INTERFACE :
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004efe:	2b03      	cmp	r3, #3
 8004f00:	d107      	bne.n	8004f12 <USBD_HID_Setup+0x18e>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	3308      	adds	r3, #8
 8004f06:	2201      	movs	r2, #1
 8004f08:	4619      	mov	r1, r3
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	f001 f92d 	bl	800616a <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8004f10:	e021      	b.n	8004f56 <USBD_HID_Setup+0x1d2>
        USBD_CtlError(pdev, req);
 8004f12:	6839      	ldr	r1, [r7, #0]
 8004f14:	6878      	ldr	r0, [r7, #4]
 8004f16:	f001 f8b7 	bl	8006088 <USBD_CtlError>
        ret = USBD_FAIL;
 8004f1a:	2303      	movs	r3, #3
 8004f1c:	75fb      	strb	r3, [r7, #23]
      break;
 8004f1e:	e01a      	b.n	8004f56 <USBD_HID_Setup+0x1d2>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004f26:	2b03      	cmp	r3, #3
 8004f28:	d106      	bne.n	8004f38 <USBD_HID_Setup+0x1b4>
      {
        hhid->AltSetting = (uint8_t)(req->wValue);
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	885b      	ldrh	r3, [r3, #2]
 8004f2e:	b2db      	uxtb	r3, r3
 8004f30:	461a      	mov	r2, r3
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	609a      	str	r2, [r3, #8]
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8004f36:	e00e      	b.n	8004f56 <USBD_HID_Setup+0x1d2>
        USBD_CtlError(pdev, req);
 8004f38:	6839      	ldr	r1, [r7, #0]
 8004f3a:	6878      	ldr	r0, [r7, #4]
 8004f3c:	f001 f8a4 	bl	8006088 <USBD_CtlError>
        ret = USBD_FAIL;
 8004f40:	2303      	movs	r3, #3
 8004f42:	75fb      	strb	r3, [r7, #23]
      break;
 8004f44:	e007      	b.n	8004f56 <USBD_HID_Setup+0x1d2>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8004f46:	6839      	ldr	r1, [r7, #0]
 8004f48:	6878      	ldr	r0, [r7, #4]
 8004f4a:	f001 f89d 	bl	8006088 <USBD_CtlError>
      ret = USBD_FAIL;
 8004f4e:	2303      	movs	r3, #3
 8004f50:	75fb      	strb	r3, [r7, #23]
      break;
 8004f52:	e000      	b.n	8004f56 <USBD_HID_Setup+0x1d2>
      break;
 8004f54:	bf00      	nop
    }
    break;
 8004f56:	e006      	b.n	8004f66 <USBD_HID_Setup+0x1e2>

  default:
    USBD_CtlError(pdev, req);
 8004f58:	6839      	ldr	r1, [r7, #0]
 8004f5a:	6878      	ldr	r0, [r7, #4]
 8004f5c:	f001 f894 	bl	8006088 <USBD_CtlError>
    ret = USBD_FAIL;
 8004f60:	2303      	movs	r3, #3
 8004f62:	75fb      	strb	r3, [r7, #23]
    break;
 8004f64:	bf00      	nop
  }

  return (uint8_t)ret;
 8004f66:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	3718      	adds	r7, #24
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bd80      	pop	{r7, pc}
 8004f70:	200000c8 	.word	0x200000c8
 8004f74:	200000b0 	.word	0x200000b0

08004f78 <USBD_HID_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b086      	sub	sp, #24
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	60f8      	str	r0, [r7, #12]
 8004f80:	60b9      	str	r1, [r7, #8]
 8004f82:	4613      	mov	r3, r2
 8004f84:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004f8c:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004f94:	2b03      	cmp	r3, #3
 8004f96:	d10c      	bne.n	8004fb2 <USBD_HID_SendReport+0x3a>
  {
    if (hhid->state == HID_IDLE)
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	7b1b      	ldrb	r3, [r3, #12]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d108      	bne.n	8004fb2 <USBD_HID_SendReport+0x3a>
    {
      hhid->state = HID_BUSY;
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HID_EPIN_ADDR, report, len);
 8004fa6:	88fb      	ldrh	r3, [r7, #6]
 8004fa8:	68ba      	ldr	r2, [r7, #8]
 8004faa:	2181      	movs	r1, #129	; 0x81
 8004fac:	68f8      	ldr	r0, [r7, #12]
 8004fae:	f001 fcee 	bl	800698e <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 8004fb2:	2300      	movs	r3, #0
}
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	3718      	adds	r7, #24
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	bd80      	pop	{r7, pc}

08004fbc <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b083      	sub	sp, #12
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgFSDesc);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2222      	movs	r2, #34	; 0x22
 8004fc8:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgFSDesc;
 8004fca:	4b03      	ldr	r3, [pc, #12]	; (8004fd8 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	370c      	adds	r7, #12
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd6:	4770      	bx	lr
 8004fd8:	20000044 	.word	0x20000044

08004fdc <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b083      	sub	sp, #12
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgHSDesc);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2222      	movs	r2, #34	; 0x22
 8004fe8:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgHSDesc;
 8004fea:	4b03      	ldr	r3, [pc, #12]	; (8004ff8 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 8004fec:	4618      	mov	r0, r3
 8004fee:	370c      	adds	r7, #12
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff6:	4770      	bx	lr
 8004ff8:	20000068 	.word	0x20000068

08004ffc <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b083      	sub	sp, #12
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_OtherSpeedCfgDesc);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2222      	movs	r2, #34	; 0x22
 8005008:	801a      	strh	r2, [r3, #0]

  return USBD_HID_OtherSpeedCfgDesc;
 800500a:	4b03      	ldr	r3, [pc, #12]	; (8005018 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 800500c:	4618      	mov	r0, r3
 800500e:	370c      	adds	r7, #12
 8005010:	46bd      	mov	sp, r7
 8005012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005016:	4770      	bx	lr
 8005018:	2000008c 	.word	0x2000008c

0800501c <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800501c:	b480      	push	{r7}
 800501e:	b083      	sub	sp, #12
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
 8005024:	460b      	mov	r3, r1
 8005026:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800502e:	2200      	movs	r2, #0
 8005030:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8005032:	2300      	movs	r3, #0
}
 8005034:	4618      	mov	r0, r3
 8005036:	370c      	adds	r7, #12
 8005038:	46bd      	mov	sp, r7
 800503a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503e:	4770      	bx	lr

08005040 <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8005040:	b480      	push	{r7}
 8005042:	b083      	sub	sp, #12
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	220a      	movs	r2, #10
 800504c:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 800504e:	4b03      	ldr	r3, [pc, #12]	; (800505c <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8005050:	4618      	mov	r0, r3
 8005052:	370c      	adds	r7, #12
 8005054:	46bd      	mov	sp, r7
 8005056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505a:	4770      	bx	lr
 800505c:	200000bc 	.word	0x200000bc

08005060 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b086      	sub	sp, #24
 8005064:	af00      	add	r7, sp, #0
 8005066:	60f8      	str	r0, [r7, #12]
 8005068:	60b9      	str	r1, [r7, #8]
 800506a:	4613      	mov	r3, r2
 800506c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d101      	bne.n	8005078 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005074:	2303      	movs	r3, #3
 8005076:	e025      	b.n	80050c4 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800507e:	2b00      	cmp	r3, #0
 8005080:	d003      	beq.n	800508a <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	2200      	movs	r2, #0
 8005086:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8005090:	2b00      	cmp	r3, #0
 8005092:	d003      	beq.n	800509c <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	2200      	movs	r2, #0
 8005098:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d003      	beq.n	80050aa <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	68ba      	ldr	r2, [r7, #8]
 80050a6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	2201      	movs	r2, #1
 80050ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	79fa      	ldrb	r2, [r7, #7]
 80050b6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80050b8:	68f8      	ldr	r0, [r7, #12]
 80050ba:	f001 fb33 	bl	8006724 <USBD_LL_Init>
 80050be:	4603      	mov	r3, r0
 80050c0:	75fb      	strb	r3, [r7, #23]

  return ret;
 80050c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80050c4:	4618      	mov	r0, r3
 80050c6:	3718      	adds	r7, #24
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bd80      	pop	{r7, pc}

080050cc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b084      	sub	sp, #16
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
 80050d4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80050d6:	2300      	movs	r3, #0
 80050d8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d101      	bne.n	80050e4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80050e0:	2303      	movs	r3, #3
 80050e2:	e010      	b.n	8005106 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	683a      	ldr	r2, [r7, #0]
 80050e8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80050f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050f4:	f107 020e 	add.w	r2, r7, #14
 80050f8:	4610      	mov	r0, r2
 80050fa:	4798      	blx	r3
 80050fc:	4602      	mov	r2, r0
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8005104:	2300      	movs	r3, #0
}
 8005106:	4618      	mov	r0, r3
 8005108:	3710      	adds	r7, #16
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}

0800510e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800510e:	b580      	push	{r7, lr}
 8005110:	b082      	sub	sp, #8
 8005112:	af00      	add	r7, sp, #0
 8005114:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005116:	6878      	ldr	r0, [r7, #4]
 8005118:	f001 fb50 	bl	80067bc <USBD_LL_Start>
 800511c:	4603      	mov	r3, r0
}
 800511e:	4618      	mov	r0, r3
 8005120:	3708      	adds	r7, #8
 8005122:	46bd      	mov	sp, r7
 8005124:	bd80      	pop	{r7, pc}

08005126 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005126:	b480      	push	{r7}
 8005128:	b083      	sub	sp, #12
 800512a:	af00      	add	r7, sp, #0
 800512c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800512e:	2300      	movs	r3, #0
}
 8005130:	4618      	mov	r0, r3
 8005132:	370c      	adds	r7, #12
 8005134:	46bd      	mov	sp, r7
 8005136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513a:	4770      	bx	lr

0800513c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b084      	sub	sp, #16
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
 8005144:	460b      	mov	r3, r1
 8005146:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005148:	2303      	movs	r3, #3
 800514a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005152:	2b00      	cmp	r3, #0
 8005154:	d009      	beq.n	800516a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	78fa      	ldrb	r2, [r7, #3]
 8005160:	4611      	mov	r1, r2
 8005162:	6878      	ldr	r0, [r7, #4]
 8005164:	4798      	blx	r3
 8005166:	4603      	mov	r3, r0
 8005168:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800516a:	7bfb      	ldrb	r3, [r7, #15]
}
 800516c:	4618      	mov	r0, r3
 800516e:	3710      	adds	r7, #16
 8005170:	46bd      	mov	sp, r7
 8005172:	bd80      	pop	{r7, pc}

08005174 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b082      	sub	sp, #8
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
 800517c:	460b      	mov	r3, r1
 800517e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005186:	2b00      	cmp	r3, #0
 8005188:	d007      	beq.n	800519a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	78fa      	ldrb	r2, [r7, #3]
 8005194:	4611      	mov	r1, r2
 8005196:	6878      	ldr	r0, [r7, #4]
 8005198:	4798      	blx	r3
  }

  return USBD_OK;
 800519a:	2300      	movs	r3, #0
}
 800519c:	4618      	mov	r0, r3
 800519e:	3708      	adds	r7, #8
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd80      	pop	{r7, pc}

080051a4 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b084      	sub	sp, #16
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
 80051ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80051b4:	6839      	ldr	r1, [r7, #0]
 80051b6:	4618      	mov	r0, r3
 80051b8:	f000 ff2c 	bl	8006014 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2201      	movs	r2, #1
 80051c0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80051ca:	461a      	mov	r2, r3
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80051d8:	f003 031f 	and.w	r3, r3, #31
 80051dc:	2b01      	cmp	r3, #1
 80051de:	d00e      	beq.n	80051fe <USBD_LL_SetupStage+0x5a>
 80051e0:	2b01      	cmp	r3, #1
 80051e2:	d302      	bcc.n	80051ea <USBD_LL_SetupStage+0x46>
 80051e4:	2b02      	cmp	r3, #2
 80051e6:	d014      	beq.n	8005212 <USBD_LL_SetupStage+0x6e>
 80051e8:	e01d      	b.n	8005226 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80051f0:	4619      	mov	r1, r3
 80051f2:	6878      	ldr	r0, [r7, #4]
 80051f4:	f000 fa18 	bl	8005628 <USBD_StdDevReq>
 80051f8:	4603      	mov	r3, r0
 80051fa:	73fb      	strb	r3, [r7, #15]
      break;
 80051fc:	e020      	b.n	8005240 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005204:	4619      	mov	r1, r3
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f000 fa7c 	bl	8005704 <USBD_StdItfReq>
 800520c:	4603      	mov	r3, r0
 800520e:	73fb      	strb	r3, [r7, #15]
      break;
 8005210:	e016      	b.n	8005240 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005218:	4619      	mov	r1, r3
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	f000 fab8 	bl	8005790 <USBD_StdEPReq>
 8005220:	4603      	mov	r3, r0
 8005222:	73fb      	strb	r3, [r7, #15]
      break;
 8005224:	e00c      	b.n	8005240 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800522c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005230:	b2db      	uxtb	r3, r3
 8005232:	4619      	mov	r1, r3
 8005234:	6878      	ldr	r0, [r7, #4]
 8005236:	f001 fb21 	bl	800687c <USBD_LL_StallEP>
 800523a:	4603      	mov	r3, r0
 800523c:	73fb      	strb	r3, [r7, #15]
      break;
 800523e:	bf00      	nop
  }

  return ret;
 8005240:	7bfb      	ldrb	r3, [r7, #15]
}
 8005242:	4618      	mov	r0, r3
 8005244:	3710      	adds	r7, #16
 8005246:	46bd      	mov	sp, r7
 8005248:	bd80      	pop	{r7, pc}

0800524a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800524a:	b580      	push	{r7, lr}
 800524c:	b086      	sub	sp, #24
 800524e:	af00      	add	r7, sp, #0
 8005250:	60f8      	str	r0, [r7, #12]
 8005252:	460b      	mov	r3, r1
 8005254:	607a      	str	r2, [r7, #4]
 8005256:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005258:	7afb      	ldrb	r3, [r7, #11]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d137      	bne.n	80052ce <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005264:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800526c:	2b03      	cmp	r3, #3
 800526e:	d14a      	bne.n	8005306 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8005270:	693b      	ldr	r3, [r7, #16]
 8005272:	689a      	ldr	r2, [r3, #8]
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	68db      	ldr	r3, [r3, #12]
 8005278:	429a      	cmp	r2, r3
 800527a:	d913      	bls.n	80052a4 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	689a      	ldr	r2, [r3, #8]
 8005280:	693b      	ldr	r3, [r7, #16]
 8005282:	68db      	ldr	r3, [r3, #12]
 8005284:	1ad2      	subs	r2, r2, r3
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	68da      	ldr	r2, [r3, #12]
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	689b      	ldr	r3, [r3, #8]
 8005292:	4293      	cmp	r3, r2
 8005294:	bf28      	it	cs
 8005296:	4613      	movcs	r3, r2
 8005298:	461a      	mov	r2, r3
 800529a:	6879      	ldr	r1, [r7, #4]
 800529c:	68f8      	ldr	r0, [r7, #12]
 800529e:	f000 ff90 	bl	80061c2 <USBD_CtlContinueRx>
 80052a2:	e030      	b.n	8005306 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80052aa:	691b      	ldr	r3, [r3, #16]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d00a      	beq.n	80052c6 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80052b6:	2b03      	cmp	r3, #3
 80052b8:	d105      	bne.n	80052c6 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80052c0:	691b      	ldr	r3, [r3, #16]
 80052c2:	68f8      	ldr	r0, [r7, #12]
 80052c4:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 80052c6:	68f8      	ldr	r0, [r7, #12]
 80052c8:	f000 ff8c 	bl	80061e4 <USBD_CtlSendStatus>
 80052cc:	e01b      	b.n	8005306 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80052d4:	699b      	ldr	r3, [r3, #24]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d013      	beq.n	8005302 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80052e0:	2b03      	cmp	r3, #3
 80052e2:	d10e      	bne.n	8005302 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80052ea:	699b      	ldr	r3, [r3, #24]
 80052ec:	7afa      	ldrb	r2, [r7, #11]
 80052ee:	4611      	mov	r1, r2
 80052f0:	68f8      	ldr	r0, [r7, #12]
 80052f2:	4798      	blx	r3
 80052f4:	4603      	mov	r3, r0
 80052f6:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80052f8:	7dfb      	ldrb	r3, [r7, #23]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d003      	beq.n	8005306 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 80052fe:	7dfb      	ldrb	r3, [r7, #23]
 8005300:	e002      	b.n	8005308 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005302:	2303      	movs	r3, #3
 8005304:	e000      	b.n	8005308 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8005306:	2300      	movs	r3, #0
}
 8005308:	4618      	mov	r0, r3
 800530a:	3718      	adds	r7, #24
 800530c:	46bd      	mov	sp, r7
 800530e:	bd80      	pop	{r7, pc}

08005310 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b086      	sub	sp, #24
 8005314:	af00      	add	r7, sp, #0
 8005316:	60f8      	str	r0, [r7, #12]
 8005318:	460b      	mov	r3, r1
 800531a:	607a      	str	r2, [r7, #4]
 800531c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800531e:	7afb      	ldrb	r3, [r7, #11]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d16a      	bne.n	80053fa <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	3314      	adds	r3, #20
 8005328:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005330:	2b02      	cmp	r3, #2
 8005332:	d155      	bne.n	80053e0 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	689a      	ldr	r2, [r3, #8]
 8005338:	693b      	ldr	r3, [r7, #16]
 800533a:	68db      	ldr	r3, [r3, #12]
 800533c:	429a      	cmp	r2, r3
 800533e:	d914      	bls.n	800536a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	689a      	ldr	r2, [r3, #8]
 8005344:	693b      	ldr	r3, [r7, #16]
 8005346:	68db      	ldr	r3, [r3, #12]
 8005348:	1ad2      	subs	r2, r2, r3
 800534a:	693b      	ldr	r3, [r7, #16]
 800534c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	689b      	ldr	r3, [r3, #8]
 8005352:	461a      	mov	r2, r3
 8005354:	6879      	ldr	r1, [r7, #4]
 8005356:	68f8      	ldr	r0, [r7, #12]
 8005358:	f000 ff22 	bl	80061a0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800535c:	2300      	movs	r3, #0
 800535e:	2200      	movs	r2, #0
 8005360:	2100      	movs	r1, #0
 8005362:	68f8      	ldr	r0, [r7, #12]
 8005364:	f001 fb34 	bl	80069d0 <USBD_LL_PrepareReceive>
 8005368:	e03a      	b.n	80053e0 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	68da      	ldr	r2, [r3, #12]
 800536e:	693b      	ldr	r3, [r7, #16]
 8005370:	689b      	ldr	r3, [r3, #8]
 8005372:	429a      	cmp	r2, r3
 8005374:	d11c      	bne.n	80053b0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	685a      	ldr	r2, [r3, #4]
 800537a:	693b      	ldr	r3, [r7, #16]
 800537c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800537e:	429a      	cmp	r2, r3
 8005380:	d316      	bcc.n	80053b0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	685a      	ldr	r2, [r3, #4]
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800538c:	429a      	cmp	r2, r3
 800538e:	d20f      	bcs.n	80053b0 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005390:	2200      	movs	r2, #0
 8005392:	2100      	movs	r1, #0
 8005394:	68f8      	ldr	r0, [r7, #12]
 8005396:	f000 ff03 	bl	80061a0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	2200      	movs	r2, #0
 800539e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80053a2:	2300      	movs	r3, #0
 80053a4:	2200      	movs	r2, #0
 80053a6:	2100      	movs	r1, #0
 80053a8:	68f8      	ldr	r0, [r7, #12]
 80053aa:	f001 fb11 	bl	80069d0 <USBD_LL_PrepareReceive>
 80053ae:	e017      	b.n	80053e0 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80053b6:	68db      	ldr	r3, [r3, #12]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d00a      	beq.n	80053d2 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80053c2:	2b03      	cmp	r3, #3
 80053c4:	d105      	bne.n	80053d2 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80053cc:	68db      	ldr	r3, [r3, #12]
 80053ce:	68f8      	ldr	r0, [r7, #12]
 80053d0:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80053d2:	2180      	movs	r1, #128	; 0x80
 80053d4:	68f8      	ldr	r0, [r7, #12]
 80053d6:	f001 fa51 	bl	800687c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80053da:	68f8      	ldr	r0, [r7, #12]
 80053dc:	f000 ff15 	bl	800620a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80053e6:	2b01      	cmp	r3, #1
 80053e8:	d123      	bne.n	8005432 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80053ea:	68f8      	ldr	r0, [r7, #12]
 80053ec:	f7ff fe9b 	bl	8005126 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	2200      	movs	r2, #0
 80053f4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80053f8:	e01b      	b.n	8005432 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005400:	695b      	ldr	r3, [r3, #20]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d013      	beq.n	800542e <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800540c:	2b03      	cmp	r3, #3
 800540e:	d10e      	bne.n	800542e <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005416:	695b      	ldr	r3, [r3, #20]
 8005418:	7afa      	ldrb	r2, [r7, #11]
 800541a:	4611      	mov	r1, r2
 800541c:	68f8      	ldr	r0, [r7, #12]
 800541e:	4798      	blx	r3
 8005420:	4603      	mov	r3, r0
 8005422:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8005424:	7dfb      	ldrb	r3, [r7, #23]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d003      	beq.n	8005432 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800542a:	7dfb      	ldrb	r3, [r7, #23]
 800542c:	e002      	b.n	8005434 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800542e:	2303      	movs	r3, #3
 8005430:	e000      	b.n	8005434 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8005432:	2300      	movs	r3, #0
}
 8005434:	4618      	mov	r0, r3
 8005436:	3718      	adds	r7, #24
 8005438:	46bd      	mov	sp, r7
 800543a:	bd80      	pop	{r7, pc}

0800543c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b082      	sub	sp, #8
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2201      	movs	r2, #1
 8005448:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2200      	movs	r2, #0
 8005450:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2200      	movs	r2, #0
 8005458:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2200      	movs	r2, #0
 800545e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005468:	2b00      	cmp	r3, #0
 800546a:	d009      	beq.n	8005480 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	687a      	ldr	r2, [r7, #4]
 8005476:	6852      	ldr	r2, [r2, #4]
 8005478:	b2d2      	uxtb	r2, r2
 800547a:	4611      	mov	r1, r2
 800547c:	6878      	ldr	r0, [r7, #4]
 800547e:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005480:	2340      	movs	r3, #64	; 0x40
 8005482:	2200      	movs	r2, #0
 8005484:	2100      	movs	r1, #0
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	f001 f9b3 	bl	80067f2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2201      	movs	r2, #1
 8005490:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2240      	movs	r2, #64	; 0x40
 8005498:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800549c:	2340      	movs	r3, #64	; 0x40
 800549e:	2200      	movs	r2, #0
 80054a0:	2180      	movs	r1, #128	; 0x80
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	f001 f9a5 	bl	80067f2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2201      	movs	r2, #1
 80054ac:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2240      	movs	r2, #64	; 0x40
 80054b2:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80054b4:	2300      	movs	r3, #0
}
 80054b6:	4618      	mov	r0, r3
 80054b8:	3708      	adds	r7, #8
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bd80      	pop	{r7, pc}

080054be <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80054be:	b480      	push	{r7}
 80054c0:	b083      	sub	sp, #12
 80054c2:	af00      	add	r7, sp, #0
 80054c4:	6078      	str	r0, [r7, #4]
 80054c6:	460b      	mov	r3, r1
 80054c8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	78fa      	ldrb	r2, [r7, #3]
 80054ce:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80054d0:	2300      	movs	r3, #0
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	370c      	adds	r7, #12
 80054d6:	46bd      	mov	sp, r7
 80054d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054dc:	4770      	bx	lr

080054de <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80054de:	b480      	push	{r7}
 80054e0:	b083      	sub	sp, #12
 80054e2:	af00      	add	r7, sp, #0
 80054e4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2204      	movs	r2, #4
 80054f6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80054fa:	2300      	movs	r3, #0
}
 80054fc:	4618      	mov	r0, r3
 80054fe:	370c      	adds	r7, #12
 8005500:	46bd      	mov	sp, r7
 8005502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005506:	4770      	bx	lr

08005508 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005508:	b480      	push	{r7}
 800550a:	b083      	sub	sp, #12
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005516:	2b04      	cmp	r3, #4
 8005518:	d105      	bne.n	8005526 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005526:	2300      	movs	r3, #0
}
 8005528:	4618      	mov	r0, r3
 800552a:	370c      	adds	r7, #12
 800552c:	46bd      	mov	sp, r7
 800552e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005532:	4770      	bx	lr

08005534 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b082      	sub	sp, #8
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005542:	2b03      	cmp	r3, #3
 8005544:	d10b      	bne.n	800555e <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800554c:	69db      	ldr	r3, [r3, #28]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d005      	beq.n	800555e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005558:	69db      	ldr	r3, [r3, #28]
 800555a:	6878      	ldr	r0, [r7, #4]
 800555c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800555e:	2300      	movs	r3, #0
}
 8005560:	4618      	mov	r0, r3
 8005562:	3708      	adds	r7, #8
 8005564:	46bd      	mov	sp, r7
 8005566:	bd80      	pop	{r7, pc}

08005568 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005568:	b480      	push	{r7}
 800556a:	b083      	sub	sp, #12
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
 8005570:	460b      	mov	r3, r1
 8005572:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8005574:	2300      	movs	r3, #0
}
 8005576:	4618      	mov	r0, r3
 8005578:	370c      	adds	r7, #12
 800557a:	46bd      	mov	sp, r7
 800557c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005580:	4770      	bx	lr

08005582 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005582:	b480      	push	{r7}
 8005584:	b083      	sub	sp, #12
 8005586:	af00      	add	r7, sp, #0
 8005588:	6078      	str	r0, [r7, #4]
 800558a:	460b      	mov	r3, r1
 800558c:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800558e:	2300      	movs	r3, #0
}
 8005590:	4618      	mov	r0, r3
 8005592:	370c      	adds	r7, #12
 8005594:	46bd      	mov	sp, r7
 8005596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559a:	4770      	bx	lr

0800559c <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800559c:	b480      	push	{r7}
 800559e:	b083      	sub	sp, #12
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80055a4:	2300      	movs	r3, #0
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	370c      	adds	r7, #12
 80055aa:	46bd      	mov	sp, r7
 80055ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b0:	4770      	bx	lr

080055b2 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80055b2:	b580      	push	{r7, lr}
 80055b4:	b082      	sub	sp, #8
 80055b6:	af00      	add	r7, sp, #0
 80055b8:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2201      	movs	r2, #1
 80055be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d009      	beq.n	80055e0 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	687a      	ldr	r2, [r7, #4]
 80055d6:	6852      	ldr	r2, [r2, #4]
 80055d8:	b2d2      	uxtb	r2, r2
 80055da:	4611      	mov	r1, r2
 80055dc:	6878      	ldr	r0, [r7, #4]
 80055de:	4798      	blx	r3
  }

  return USBD_OK;
 80055e0:	2300      	movs	r3, #0
}
 80055e2:	4618      	mov	r0, r3
 80055e4:	3708      	adds	r7, #8
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bd80      	pop	{r7, pc}

080055ea <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80055ea:	b480      	push	{r7}
 80055ec:	b087      	sub	sp, #28
 80055ee:	af00      	add	r7, sp, #0
 80055f0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	781b      	ldrb	r3, [r3, #0]
 80055fa:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80055fc:	697b      	ldr	r3, [r7, #20]
 80055fe:	3301      	adds	r3, #1
 8005600:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005602:	697b      	ldr	r3, [r7, #20]
 8005604:	781b      	ldrb	r3, [r3, #0]
 8005606:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005608:	8a3b      	ldrh	r3, [r7, #16]
 800560a:	021b      	lsls	r3, r3, #8
 800560c:	b21a      	sxth	r2, r3
 800560e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005612:	4313      	orrs	r3, r2
 8005614:	b21b      	sxth	r3, r3
 8005616:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005618:	89fb      	ldrh	r3, [r7, #14]
}
 800561a:	4618      	mov	r0, r3
 800561c:	371c      	adds	r7, #28
 800561e:	46bd      	mov	sp, r7
 8005620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005624:	4770      	bx	lr
	...

08005628 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b084      	sub	sp, #16
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
 8005630:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005632:	2300      	movs	r3, #0
 8005634:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	781b      	ldrb	r3, [r3, #0]
 800563a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800563e:	2b20      	cmp	r3, #32
 8005640:	d004      	beq.n	800564c <USBD_StdDevReq+0x24>
 8005642:	2b40      	cmp	r3, #64	; 0x40
 8005644:	d002      	beq.n	800564c <USBD_StdDevReq+0x24>
 8005646:	2b00      	cmp	r3, #0
 8005648:	d00a      	beq.n	8005660 <USBD_StdDevReq+0x38>
 800564a:	e050      	b.n	80056ee <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005652:	689b      	ldr	r3, [r3, #8]
 8005654:	6839      	ldr	r1, [r7, #0]
 8005656:	6878      	ldr	r0, [r7, #4]
 8005658:	4798      	blx	r3
 800565a:	4603      	mov	r3, r0
 800565c:	73fb      	strb	r3, [r7, #15]
    break;
 800565e:	e04b      	b.n	80056f8 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	785b      	ldrb	r3, [r3, #1]
 8005664:	2b09      	cmp	r3, #9
 8005666:	d83c      	bhi.n	80056e2 <USBD_StdDevReq+0xba>
 8005668:	a201      	add	r2, pc, #4	; (adr r2, 8005670 <USBD_StdDevReq+0x48>)
 800566a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800566e:	bf00      	nop
 8005670:	080056c5 	.word	0x080056c5
 8005674:	080056d9 	.word	0x080056d9
 8005678:	080056e3 	.word	0x080056e3
 800567c:	080056cf 	.word	0x080056cf
 8005680:	080056e3 	.word	0x080056e3
 8005684:	080056a3 	.word	0x080056a3
 8005688:	08005699 	.word	0x08005699
 800568c:	080056e3 	.word	0x080056e3
 8005690:	080056bb 	.word	0x080056bb
 8005694:	080056ad 	.word	0x080056ad
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8005698:	6839      	ldr	r1, [r7, #0]
 800569a:	6878      	ldr	r0, [r7, #4]
 800569c:	f000 f9ce 	bl	8005a3c <USBD_GetDescriptor>
      break;
 80056a0:	e024      	b.n	80056ec <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 80056a2:	6839      	ldr	r1, [r7, #0]
 80056a4:	6878      	ldr	r0, [r7, #4]
 80056a6:	f000 fb33 	bl	8005d10 <USBD_SetAddress>
      break;
 80056aa:	e01f      	b.n	80056ec <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 80056ac:	6839      	ldr	r1, [r7, #0]
 80056ae:	6878      	ldr	r0, [r7, #4]
 80056b0:	f000 fb70 	bl	8005d94 <USBD_SetConfig>
 80056b4:	4603      	mov	r3, r0
 80056b6:	73fb      	strb	r3, [r7, #15]
      break;
 80056b8:	e018      	b.n	80056ec <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 80056ba:	6839      	ldr	r1, [r7, #0]
 80056bc:	6878      	ldr	r0, [r7, #4]
 80056be:	f000 fc0d 	bl	8005edc <USBD_GetConfig>
      break;
 80056c2:	e013      	b.n	80056ec <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 80056c4:	6839      	ldr	r1, [r7, #0]
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	f000 fc3c 	bl	8005f44 <USBD_GetStatus>
      break;
 80056cc:	e00e      	b.n	80056ec <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 80056ce:	6839      	ldr	r1, [r7, #0]
 80056d0:	6878      	ldr	r0, [r7, #4]
 80056d2:	f000 fc6a 	bl	8005faa <USBD_SetFeature>
      break;
 80056d6:	e009      	b.n	80056ec <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 80056d8:	6839      	ldr	r1, [r7, #0]
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	f000 fc79 	bl	8005fd2 <USBD_ClrFeature>
      break;
 80056e0:	e004      	b.n	80056ec <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 80056e2:	6839      	ldr	r1, [r7, #0]
 80056e4:	6878      	ldr	r0, [r7, #4]
 80056e6:	f000 fccf 	bl	8006088 <USBD_CtlError>
      break;
 80056ea:	bf00      	nop
    }
    break;
 80056ec:	e004      	b.n	80056f8 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 80056ee:	6839      	ldr	r1, [r7, #0]
 80056f0:	6878      	ldr	r0, [r7, #4]
 80056f2:	f000 fcc9 	bl	8006088 <USBD_CtlError>
    break;
 80056f6:	bf00      	nop
  }

  return ret;
 80056f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80056fa:	4618      	mov	r0, r3
 80056fc:	3710      	adds	r7, #16
 80056fe:	46bd      	mov	sp, r7
 8005700:	bd80      	pop	{r7, pc}
 8005702:	bf00      	nop

08005704 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b084      	sub	sp, #16
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
 800570c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800570e:	2300      	movs	r3, #0
 8005710:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	781b      	ldrb	r3, [r3, #0]
 8005716:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800571a:	2b20      	cmp	r3, #32
 800571c:	d003      	beq.n	8005726 <USBD_StdItfReq+0x22>
 800571e:	2b40      	cmp	r3, #64	; 0x40
 8005720:	d001      	beq.n	8005726 <USBD_StdItfReq+0x22>
 8005722:	2b00      	cmp	r3, #0
 8005724:	d12a      	bne.n	800577c <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800572c:	3b01      	subs	r3, #1
 800572e:	2b02      	cmp	r3, #2
 8005730:	d81d      	bhi.n	800576e <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	889b      	ldrh	r3, [r3, #4]
 8005736:	b2db      	uxtb	r3, r3
 8005738:	2b01      	cmp	r3, #1
 800573a:	d813      	bhi.n	8005764 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005742:	689b      	ldr	r3, [r3, #8]
 8005744:	6839      	ldr	r1, [r7, #0]
 8005746:	6878      	ldr	r0, [r7, #4]
 8005748:	4798      	blx	r3
 800574a:	4603      	mov	r3, r0
 800574c:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	88db      	ldrh	r3, [r3, #6]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d110      	bne.n	8005778 <USBD_StdItfReq+0x74>
 8005756:	7bfb      	ldrb	r3, [r7, #15]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d10d      	bne.n	8005778 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 800575c:	6878      	ldr	r0, [r7, #4]
 800575e:	f000 fd41 	bl	80061e4 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8005762:	e009      	b.n	8005778 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8005764:	6839      	ldr	r1, [r7, #0]
 8005766:	6878      	ldr	r0, [r7, #4]
 8005768:	f000 fc8e 	bl	8006088 <USBD_CtlError>
      break;
 800576c:	e004      	b.n	8005778 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800576e:	6839      	ldr	r1, [r7, #0]
 8005770:	6878      	ldr	r0, [r7, #4]
 8005772:	f000 fc89 	bl	8006088 <USBD_CtlError>
      break;
 8005776:	e000      	b.n	800577a <USBD_StdItfReq+0x76>
      break;
 8005778:	bf00      	nop
    }
    break;
 800577a:	e004      	b.n	8005786 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800577c:	6839      	ldr	r1, [r7, #0]
 800577e:	6878      	ldr	r0, [r7, #4]
 8005780:	f000 fc82 	bl	8006088 <USBD_CtlError>
    break;
 8005784:	bf00      	nop
  }

  return ret;
 8005786:	7bfb      	ldrb	r3, [r7, #15]
}
 8005788:	4618      	mov	r0, r3
 800578a:	3710      	adds	r7, #16
 800578c:	46bd      	mov	sp, r7
 800578e:	bd80      	pop	{r7, pc}

08005790 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b084      	sub	sp, #16
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
 8005798:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800579a:	2300      	movs	r3, #0
 800579c:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	889b      	ldrh	r3, [r3, #4]
 80057a2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	781b      	ldrb	r3, [r3, #0]
 80057a8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80057ac:	2b20      	cmp	r3, #32
 80057ae:	d004      	beq.n	80057ba <USBD_StdEPReq+0x2a>
 80057b0:	2b40      	cmp	r3, #64	; 0x40
 80057b2:	d002      	beq.n	80057ba <USBD_StdEPReq+0x2a>
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d00a      	beq.n	80057ce <USBD_StdEPReq+0x3e>
 80057b8:	e135      	b.n	8005a26 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057c0:	689b      	ldr	r3, [r3, #8]
 80057c2:	6839      	ldr	r1, [r7, #0]
 80057c4:	6878      	ldr	r0, [r7, #4]
 80057c6:	4798      	blx	r3
 80057c8:	4603      	mov	r3, r0
 80057ca:	73fb      	strb	r3, [r7, #15]
    break;
 80057cc:	e130      	b.n	8005a30 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	785b      	ldrb	r3, [r3, #1]
 80057d2:	2b01      	cmp	r3, #1
 80057d4:	d03e      	beq.n	8005854 <USBD_StdEPReq+0xc4>
 80057d6:	2b03      	cmp	r3, #3
 80057d8:	d002      	beq.n	80057e0 <USBD_StdEPReq+0x50>
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d077      	beq.n	80058ce <USBD_StdEPReq+0x13e>
 80057de:	e11c      	b.n	8005a1a <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80057e6:	2b02      	cmp	r3, #2
 80057e8:	d002      	beq.n	80057f0 <USBD_StdEPReq+0x60>
 80057ea:	2b03      	cmp	r3, #3
 80057ec:	d015      	beq.n	800581a <USBD_StdEPReq+0x8a>
 80057ee:	e02b      	b.n	8005848 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80057f0:	7bbb      	ldrb	r3, [r7, #14]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d00c      	beq.n	8005810 <USBD_StdEPReq+0x80>
 80057f6:	7bbb      	ldrb	r3, [r7, #14]
 80057f8:	2b80      	cmp	r3, #128	; 0x80
 80057fa:	d009      	beq.n	8005810 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80057fc:	7bbb      	ldrb	r3, [r7, #14]
 80057fe:	4619      	mov	r1, r3
 8005800:	6878      	ldr	r0, [r7, #4]
 8005802:	f001 f83b 	bl	800687c <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005806:	2180      	movs	r1, #128	; 0x80
 8005808:	6878      	ldr	r0, [r7, #4]
 800580a:	f001 f837 	bl	800687c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800580e:	e020      	b.n	8005852 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8005810:	6839      	ldr	r1, [r7, #0]
 8005812:	6878      	ldr	r0, [r7, #4]
 8005814:	f000 fc38 	bl	8006088 <USBD_CtlError>
        break;
 8005818:	e01b      	b.n	8005852 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	885b      	ldrh	r3, [r3, #2]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d10e      	bne.n	8005840 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005822:	7bbb      	ldrb	r3, [r7, #14]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d00b      	beq.n	8005840 <USBD_StdEPReq+0xb0>
 8005828:	7bbb      	ldrb	r3, [r7, #14]
 800582a:	2b80      	cmp	r3, #128	; 0x80
 800582c:	d008      	beq.n	8005840 <USBD_StdEPReq+0xb0>
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	88db      	ldrh	r3, [r3, #6]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d104      	bne.n	8005840 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8005836:	7bbb      	ldrb	r3, [r7, #14]
 8005838:	4619      	mov	r1, r3
 800583a:	6878      	ldr	r0, [r7, #4]
 800583c:	f001 f81e 	bl	800687c <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8005840:	6878      	ldr	r0, [r7, #4]
 8005842:	f000 fccf 	bl	80061e4 <USBD_CtlSendStatus>

        break;
 8005846:	e004      	b.n	8005852 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8005848:	6839      	ldr	r1, [r7, #0]
 800584a:	6878      	ldr	r0, [r7, #4]
 800584c:	f000 fc1c 	bl	8006088 <USBD_CtlError>
        break;
 8005850:	bf00      	nop
      }
      break;
 8005852:	e0e7      	b.n	8005a24 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800585a:	2b02      	cmp	r3, #2
 800585c:	d002      	beq.n	8005864 <USBD_StdEPReq+0xd4>
 800585e:	2b03      	cmp	r3, #3
 8005860:	d015      	beq.n	800588e <USBD_StdEPReq+0xfe>
 8005862:	e02d      	b.n	80058c0 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005864:	7bbb      	ldrb	r3, [r7, #14]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d00c      	beq.n	8005884 <USBD_StdEPReq+0xf4>
 800586a:	7bbb      	ldrb	r3, [r7, #14]
 800586c:	2b80      	cmp	r3, #128	; 0x80
 800586e:	d009      	beq.n	8005884 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8005870:	7bbb      	ldrb	r3, [r7, #14]
 8005872:	4619      	mov	r1, r3
 8005874:	6878      	ldr	r0, [r7, #4]
 8005876:	f001 f801 	bl	800687c <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800587a:	2180      	movs	r1, #128	; 0x80
 800587c:	6878      	ldr	r0, [r7, #4]
 800587e:	f000 fffd 	bl	800687c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8005882:	e023      	b.n	80058cc <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8005884:	6839      	ldr	r1, [r7, #0]
 8005886:	6878      	ldr	r0, [r7, #4]
 8005888:	f000 fbfe 	bl	8006088 <USBD_CtlError>
        break;
 800588c:	e01e      	b.n	80058cc <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	885b      	ldrh	r3, [r3, #2]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d119      	bne.n	80058ca <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8005896:	7bbb      	ldrb	r3, [r7, #14]
 8005898:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800589c:	2b00      	cmp	r3, #0
 800589e:	d004      	beq.n	80058aa <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80058a0:	7bbb      	ldrb	r3, [r7, #14]
 80058a2:	4619      	mov	r1, r3
 80058a4:	6878      	ldr	r0, [r7, #4]
 80058a6:	f001 f808 	bl	80068ba <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 80058aa:	6878      	ldr	r0, [r7, #4]
 80058ac:	f000 fc9a 	bl	80061e4 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	6839      	ldr	r1, [r7, #0]
 80058ba:	6878      	ldr	r0, [r7, #4]
 80058bc:	4798      	blx	r3
        }
        break;
 80058be:	e004      	b.n	80058ca <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 80058c0:	6839      	ldr	r1, [r7, #0]
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f000 fbe0 	bl	8006088 <USBD_CtlError>
        break;
 80058c8:	e000      	b.n	80058cc <USBD_StdEPReq+0x13c>
        break;
 80058ca:	bf00      	nop
      }
      break;
 80058cc:	e0aa      	b.n	8005a24 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80058d4:	2b02      	cmp	r3, #2
 80058d6:	d002      	beq.n	80058de <USBD_StdEPReq+0x14e>
 80058d8:	2b03      	cmp	r3, #3
 80058da:	d032      	beq.n	8005942 <USBD_StdEPReq+0x1b2>
 80058dc:	e097      	b.n	8005a0e <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80058de:	7bbb      	ldrb	r3, [r7, #14]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d007      	beq.n	80058f4 <USBD_StdEPReq+0x164>
 80058e4:	7bbb      	ldrb	r3, [r7, #14]
 80058e6:	2b80      	cmp	r3, #128	; 0x80
 80058e8:	d004      	beq.n	80058f4 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 80058ea:	6839      	ldr	r1, [r7, #0]
 80058ec:	6878      	ldr	r0, [r7, #4]
 80058ee:	f000 fbcb 	bl	8006088 <USBD_CtlError>
          break;
 80058f2:	e091      	b.n	8005a18 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80058f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	da0b      	bge.n	8005914 <USBD_StdEPReq+0x184>
 80058fc:	7bbb      	ldrb	r3, [r7, #14]
 80058fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005902:	4613      	mov	r3, r2
 8005904:	009b      	lsls	r3, r3, #2
 8005906:	4413      	add	r3, r2
 8005908:	009b      	lsls	r3, r3, #2
 800590a:	3310      	adds	r3, #16
 800590c:	687a      	ldr	r2, [r7, #4]
 800590e:	4413      	add	r3, r2
 8005910:	3304      	adds	r3, #4
 8005912:	e00b      	b.n	800592c <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8005914:	7bbb      	ldrb	r3, [r7, #14]
 8005916:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800591a:	4613      	mov	r3, r2
 800591c:	009b      	lsls	r3, r3, #2
 800591e:	4413      	add	r3, r2
 8005920:	009b      	lsls	r3, r3, #2
 8005922:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005926:	687a      	ldr	r2, [r7, #4]
 8005928:	4413      	add	r3, r2
 800592a:	3304      	adds	r3, #4
 800592c:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	2200      	movs	r2, #0
 8005932:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	2202      	movs	r2, #2
 8005938:	4619      	mov	r1, r3
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	f000 fc15 	bl	800616a <USBD_CtlSendData>
        break;
 8005940:	e06a      	b.n	8005a18 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8005942:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005946:	2b00      	cmp	r3, #0
 8005948:	da11      	bge.n	800596e <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800594a:	7bbb      	ldrb	r3, [r7, #14]
 800594c:	f003 020f 	and.w	r2, r3, #15
 8005950:	6879      	ldr	r1, [r7, #4]
 8005952:	4613      	mov	r3, r2
 8005954:	009b      	lsls	r3, r3, #2
 8005956:	4413      	add	r3, r2
 8005958:	009b      	lsls	r3, r3, #2
 800595a:	440b      	add	r3, r1
 800595c:	3324      	adds	r3, #36	; 0x24
 800595e:	881b      	ldrh	r3, [r3, #0]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d117      	bne.n	8005994 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8005964:	6839      	ldr	r1, [r7, #0]
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	f000 fb8e 	bl	8006088 <USBD_CtlError>
            break;
 800596c:	e054      	b.n	8005a18 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800596e:	7bbb      	ldrb	r3, [r7, #14]
 8005970:	f003 020f 	and.w	r2, r3, #15
 8005974:	6879      	ldr	r1, [r7, #4]
 8005976:	4613      	mov	r3, r2
 8005978:	009b      	lsls	r3, r3, #2
 800597a:	4413      	add	r3, r2
 800597c:	009b      	lsls	r3, r3, #2
 800597e:	440b      	add	r3, r1
 8005980:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005984:	881b      	ldrh	r3, [r3, #0]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d104      	bne.n	8005994 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800598a:	6839      	ldr	r1, [r7, #0]
 800598c:	6878      	ldr	r0, [r7, #4]
 800598e:	f000 fb7b 	bl	8006088 <USBD_CtlError>
            break;
 8005992:	e041      	b.n	8005a18 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005994:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005998:	2b00      	cmp	r3, #0
 800599a:	da0b      	bge.n	80059b4 <USBD_StdEPReq+0x224>
 800599c:	7bbb      	ldrb	r3, [r7, #14]
 800599e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80059a2:	4613      	mov	r3, r2
 80059a4:	009b      	lsls	r3, r3, #2
 80059a6:	4413      	add	r3, r2
 80059a8:	009b      	lsls	r3, r3, #2
 80059aa:	3310      	adds	r3, #16
 80059ac:	687a      	ldr	r2, [r7, #4]
 80059ae:	4413      	add	r3, r2
 80059b0:	3304      	adds	r3, #4
 80059b2:	e00b      	b.n	80059cc <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 80059b4:	7bbb      	ldrb	r3, [r7, #14]
 80059b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80059ba:	4613      	mov	r3, r2
 80059bc:	009b      	lsls	r3, r3, #2
 80059be:	4413      	add	r3, r2
 80059c0:	009b      	lsls	r3, r3, #2
 80059c2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80059c6:	687a      	ldr	r2, [r7, #4]
 80059c8:	4413      	add	r3, r2
 80059ca:	3304      	adds	r3, #4
 80059cc:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80059ce:	7bbb      	ldrb	r3, [r7, #14]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d002      	beq.n	80059da <USBD_StdEPReq+0x24a>
 80059d4:	7bbb      	ldrb	r3, [r7, #14]
 80059d6:	2b80      	cmp	r3, #128	; 0x80
 80059d8:	d103      	bne.n	80059e2 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	2200      	movs	r2, #0
 80059de:	601a      	str	r2, [r3, #0]
 80059e0:	e00e      	b.n	8005a00 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80059e2:	7bbb      	ldrb	r3, [r7, #14]
 80059e4:	4619      	mov	r1, r3
 80059e6:	6878      	ldr	r0, [r7, #4]
 80059e8:	f000 ff86 	bl	80068f8 <USBD_LL_IsStallEP>
 80059ec:	4603      	mov	r3, r0
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d003      	beq.n	80059fa <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	2201      	movs	r2, #1
 80059f6:	601a      	str	r2, [r3, #0]
 80059f8:	e002      	b.n	8005a00 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 80059fa:	68bb      	ldr	r3, [r7, #8]
 80059fc:	2200      	movs	r2, #0
 80059fe:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	2202      	movs	r2, #2
 8005a04:	4619      	mov	r1, r3
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	f000 fbaf 	bl	800616a <USBD_CtlSendData>
          break;
 8005a0c:	e004      	b.n	8005a18 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 8005a0e:	6839      	ldr	r1, [r7, #0]
 8005a10:	6878      	ldr	r0, [r7, #4]
 8005a12:	f000 fb39 	bl	8006088 <USBD_CtlError>
        break;
 8005a16:	bf00      	nop
      }
      break;
 8005a18:	e004      	b.n	8005a24 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 8005a1a:	6839      	ldr	r1, [r7, #0]
 8005a1c:	6878      	ldr	r0, [r7, #4]
 8005a1e:	f000 fb33 	bl	8006088 <USBD_CtlError>
      break;
 8005a22:	bf00      	nop
    }
    break;
 8005a24:	e004      	b.n	8005a30 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 8005a26:	6839      	ldr	r1, [r7, #0]
 8005a28:	6878      	ldr	r0, [r7, #4]
 8005a2a:	f000 fb2d 	bl	8006088 <USBD_CtlError>
    break;
 8005a2e:	bf00      	nop
  }

  return ret;
 8005a30:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a32:	4618      	mov	r0, r3
 8005a34:	3710      	adds	r7, #16
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bd80      	pop	{r7, pc}
	...

08005a3c <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b084      	sub	sp, #16
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
 8005a44:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005a46:	2300      	movs	r3, #0
 8005a48:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005a4e:	2300      	movs	r3, #0
 8005a50:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	885b      	ldrh	r3, [r3, #2]
 8005a56:	0a1b      	lsrs	r3, r3, #8
 8005a58:	b29b      	uxth	r3, r3
 8005a5a:	3b01      	subs	r3, #1
 8005a5c:	2b06      	cmp	r3, #6
 8005a5e:	f200 8128 	bhi.w	8005cb2 <USBD_GetDescriptor+0x276>
 8005a62:	a201      	add	r2, pc, #4	; (adr r2, 8005a68 <USBD_GetDescriptor+0x2c>)
 8005a64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a68:	08005a85 	.word	0x08005a85
 8005a6c:	08005a9d 	.word	0x08005a9d
 8005a70:	08005add 	.word	0x08005add
 8005a74:	08005cb3 	.word	0x08005cb3
 8005a78:	08005cb3 	.word	0x08005cb3
 8005a7c:	08005c53 	.word	0x08005c53
 8005a80:	08005c7f 	.word	0x08005c7f
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	687a      	ldr	r2, [r7, #4]
 8005a8e:	7c12      	ldrb	r2, [r2, #16]
 8005a90:	f107 0108 	add.w	r1, r7, #8
 8005a94:	4610      	mov	r0, r2
 8005a96:	4798      	blx	r3
 8005a98:	60f8      	str	r0, [r7, #12]
    break;
 8005a9a:	e112      	b.n	8005cc2 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	7c1b      	ldrb	r3, [r3, #16]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d10d      	bne.n	8005ac0 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aac:	f107 0208 	add.w	r2, r7, #8
 8005ab0:	4610      	mov	r0, r2
 8005ab2:	4798      	blx	r3
 8005ab4:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	3301      	adds	r3, #1
 8005aba:	2202      	movs	r2, #2
 8005abc:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8005abe:	e100      	b.n	8005cc2 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ac8:	f107 0208 	add.w	r2, r7, #8
 8005acc:	4610      	mov	r0, r2
 8005ace:	4798      	blx	r3
 8005ad0:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	3301      	adds	r3, #1
 8005ad6:	2202      	movs	r2, #2
 8005ad8:	701a      	strb	r2, [r3, #0]
    break;
 8005ada:	e0f2      	b.n	8005cc2 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	885b      	ldrh	r3, [r3, #2]
 8005ae0:	b2db      	uxtb	r3, r3
 8005ae2:	2b05      	cmp	r3, #5
 8005ae4:	f200 80ac 	bhi.w	8005c40 <USBD_GetDescriptor+0x204>
 8005ae8:	a201      	add	r2, pc, #4	; (adr r2, 8005af0 <USBD_GetDescriptor+0xb4>)
 8005aea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aee:	bf00      	nop
 8005af0:	08005b09 	.word	0x08005b09
 8005af4:	08005b3d 	.word	0x08005b3d
 8005af8:	08005b71 	.word	0x08005b71
 8005afc:	08005ba5 	.word	0x08005ba5
 8005b00:	08005bd9 	.word	0x08005bd9
 8005b04:	08005c0d 	.word	0x08005c0d
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d00b      	beq.n	8005b2c <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b1a:	685b      	ldr	r3, [r3, #4]
 8005b1c:	687a      	ldr	r2, [r7, #4]
 8005b1e:	7c12      	ldrb	r2, [r2, #16]
 8005b20:	f107 0108 	add.w	r1, r7, #8
 8005b24:	4610      	mov	r0, r2
 8005b26:	4798      	blx	r3
 8005b28:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005b2a:	e091      	b.n	8005c50 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8005b2c:	6839      	ldr	r1, [r7, #0]
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	f000 faaa 	bl	8006088 <USBD_CtlError>
        err++;
 8005b34:	7afb      	ldrb	r3, [r7, #11]
 8005b36:	3301      	adds	r3, #1
 8005b38:	72fb      	strb	r3, [r7, #11]
      break;
 8005b3a:	e089      	b.n	8005c50 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b42:	689b      	ldr	r3, [r3, #8]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d00b      	beq.n	8005b60 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b4e:	689b      	ldr	r3, [r3, #8]
 8005b50:	687a      	ldr	r2, [r7, #4]
 8005b52:	7c12      	ldrb	r2, [r2, #16]
 8005b54:	f107 0108 	add.w	r1, r7, #8
 8005b58:	4610      	mov	r0, r2
 8005b5a:	4798      	blx	r3
 8005b5c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005b5e:	e077      	b.n	8005c50 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8005b60:	6839      	ldr	r1, [r7, #0]
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	f000 fa90 	bl	8006088 <USBD_CtlError>
        err++;
 8005b68:	7afb      	ldrb	r3, [r7, #11]
 8005b6a:	3301      	adds	r3, #1
 8005b6c:	72fb      	strb	r3, [r7, #11]
      break;
 8005b6e:	e06f      	b.n	8005c50 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b76:	68db      	ldr	r3, [r3, #12]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d00b      	beq.n	8005b94 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b82:	68db      	ldr	r3, [r3, #12]
 8005b84:	687a      	ldr	r2, [r7, #4]
 8005b86:	7c12      	ldrb	r2, [r2, #16]
 8005b88:	f107 0108 	add.w	r1, r7, #8
 8005b8c:	4610      	mov	r0, r2
 8005b8e:	4798      	blx	r3
 8005b90:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005b92:	e05d      	b.n	8005c50 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8005b94:	6839      	ldr	r1, [r7, #0]
 8005b96:	6878      	ldr	r0, [r7, #4]
 8005b98:	f000 fa76 	bl	8006088 <USBD_CtlError>
        err++;
 8005b9c:	7afb      	ldrb	r3, [r7, #11]
 8005b9e:	3301      	adds	r3, #1
 8005ba0:	72fb      	strb	r3, [r7, #11]
      break;
 8005ba2:	e055      	b.n	8005c50 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005baa:	691b      	ldr	r3, [r3, #16]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d00b      	beq.n	8005bc8 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005bb6:	691b      	ldr	r3, [r3, #16]
 8005bb8:	687a      	ldr	r2, [r7, #4]
 8005bba:	7c12      	ldrb	r2, [r2, #16]
 8005bbc:	f107 0108 	add.w	r1, r7, #8
 8005bc0:	4610      	mov	r0, r2
 8005bc2:	4798      	blx	r3
 8005bc4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005bc6:	e043      	b.n	8005c50 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8005bc8:	6839      	ldr	r1, [r7, #0]
 8005bca:	6878      	ldr	r0, [r7, #4]
 8005bcc:	f000 fa5c 	bl	8006088 <USBD_CtlError>
        err++;
 8005bd0:	7afb      	ldrb	r3, [r7, #11]
 8005bd2:	3301      	adds	r3, #1
 8005bd4:	72fb      	strb	r3, [r7, #11]
      break;
 8005bd6:	e03b      	b.n	8005c50 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005bde:	695b      	ldr	r3, [r3, #20]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d00b      	beq.n	8005bfc <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005bea:	695b      	ldr	r3, [r3, #20]
 8005bec:	687a      	ldr	r2, [r7, #4]
 8005bee:	7c12      	ldrb	r2, [r2, #16]
 8005bf0:	f107 0108 	add.w	r1, r7, #8
 8005bf4:	4610      	mov	r0, r2
 8005bf6:	4798      	blx	r3
 8005bf8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005bfa:	e029      	b.n	8005c50 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8005bfc:	6839      	ldr	r1, [r7, #0]
 8005bfe:	6878      	ldr	r0, [r7, #4]
 8005c00:	f000 fa42 	bl	8006088 <USBD_CtlError>
        err++;
 8005c04:	7afb      	ldrb	r3, [r7, #11]
 8005c06:	3301      	adds	r3, #1
 8005c08:	72fb      	strb	r3, [r7, #11]
      break;
 8005c0a:	e021      	b.n	8005c50 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c12:	699b      	ldr	r3, [r3, #24]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d00b      	beq.n	8005c30 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c1e:	699b      	ldr	r3, [r3, #24]
 8005c20:	687a      	ldr	r2, [r7, #4]
 8005c22:	7c12      	ldrb	r2, [r2, #16]
 8005c24:	f107 0108 	add.w	r1, r7, #8
 8005c28:	4610      	mov	r0, r2
 8005c2a:	4798      	blx	r3
 8005c2c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005c2e:	e00f      	b.n	8005c50 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8005c30:	6839      	ldr	r1, [r7, #0]
 8005c32:	6878      	ldr	r0, [r7, #4]
 8005c34:	f000 fa28 	bl	8006088 <USBD_CtlError>
        err++;
 8005c38:	7afb      	ldrb	r3, [r7, #11]
 8005c3a:	3301      	adds	r3, #1
 8005c3c:	72fb      	strb	r3, [r7, #11]
      break;
 8005c3e:	e007      	b.n	8005c50 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8005c40:	6839      	ldr	r1, [r7, #0]
 8005c42:	6878      	ldr	r0, [r7, #4]
 8005c44:	f000 fa20 	bl	8006088 <USBD_CtlError>
      err++;
 8005c48:	7afb      	ldrb	r3, [r7, #11]
 8005c4a:	3301      	adds	r3, #1
 8005c4c:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8005c4e:	bf00      	nop
    }
    break;
 8005c50:	e037      	b.n	8005cc2 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	7c1b      	ldrb	r3, [r3, #16]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d109      	bne.n	8005c6e <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c62:	f107 0208 	add.w	r2, r7, #8
 8005c66:	4610      	mov	r0, r2
 8005c68:	4798      	blx	r3
 8005c6a:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8005c6c:	e029      	b.n	8005cc2 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8005c6e:	6839      	ldr	r1, [r7, #0]
 8005c70:	6878      	ldr	r0, [r7, #4]
 8005c72:	f000 fa09 	bl	8006088 <USBD_CtlError>
      err++;
 8005c76:	7afb      	ldrb	r3, [r7, #11]
 8005c78:	3301      	adds	r3, #1
 8005c7a:	72fb      	strb	r3, [r7, #11]
    break;
 8005c7c:	e021      	b.n	8005cc2 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	7c1b      	ldrb	r3, [r3, #16]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d10d      	bne.n	8005ca2 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c8e:	f107 0208 	add.w	r2, r7, #8
 8005c92:	4610      	mov	r0, r2
 8005c94:	4798      	blx	r3
 8005c96:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	3301      	adds	r3, #1
 8005c9c:	2207      	movs	r2, #7
 8005c9e:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8005ca0:	e00f      	b.n	8005cc2 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8005ca2:	6839      	ldr	r1, [r7, #0]
 8005ca4:	6878      	ldr	r0, [r7, #4]
 8005ca6:	f000 f9ef 	bl	8006088 <USBD_CtlError>
      err++;
 8005caa:	7afb      	ldrb	r3, [r7, #11]
 8005cac:	3301      	adds	r3, #1
 8005cae:	72fb      	strb	r3, [r7, #11]
    break;
 8005cb0:	e007      	b.n	8005cc2 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8005cb2:	6839      	ldr	r1, [r7, #0]
 8005cb4:	6878      	ldr	r0, [r7, #4]
 8005cb6:	f000 f9e7 	bl	8006088 <USBD_CtlError>
    err++;
 8005cba:	7afb      	ldrb	r3, [r7, #11]
 8005cbc:	3301      	adds	r3, #1
 8005cbe:	72fb      	strb	r3, [r7, #11]
    break;
 8005cc0:	bf00      	nop
  }

  if (err != 0U)
 8005cc2:	7afb      	ldrb	r3, [r7, #11]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d11e      	bne.n	8005d06 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	88db      	ldrh	r3, [r3, #6]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d016      	beq.n	8005cfe <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8005cd0:	893b      	ldrh	r3, [r7, #8]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d00e      	beq.n	8005cf4 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	88da      	ldrh	r2, [r3, #6]
 8005cda:	893b      	ldrh	r3, [r7, #8]
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	bf28      	it	cs
 8005ce0:	4613      	movcs	r3, r2
 8005ce2:	b29b      	uxth	r3, r3
 8005ce4:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8005ce6:	893b      	ldrh	r3, [r7, #8]
 8005ce8:	461a      	mov	r2, r3
 8005cea:	68f9      	ldr	r1, [r7, #12]
 8005cec:	6878      	ldr	r0, [r7, #4]
 8005cee:	f000 fa3c 	bl	800616a <USBD_CtlSendData>
 8005cf2:	e009      	b.n	8005d08 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8005cf4:	6839      	ldr	r1, [r7, #0]
 8005cf6:	6878      	ldr	r0, [r7, #4]
 8005cf8:	f000 f9c6 	bl	8006088 <USBD_CtlError>
 8005cfc:	e004      	b.n	8005d08 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8005cfe:	6878      	ldr	r0, [r7, #4]
 8005d00:	f000 fa70 	bl	80061e4 <USBD_CtlSendStatus>
 8005d04:	e000      	b.n	8005d08 <USBD_GetDescriptor+0x2cc>
    return;
 8005d06:	bf00      	nop
    }
  }
}
 8005d08:	3710      	adds	r7, #16
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	bd80      	pop	{r7, pc}
 8005d0e:	bf00      	nop

08005d10 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b084      	sub	sp, #16
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
 8005d18:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	889b      	ldrh	r3, [r3, #4]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d130      	bne.n	8005d84 <USBD_SetAddress+0x74>
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	88db      	ldrh	r3, [r3, #6]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d12c      	bne.n	8005d84 <USBD_SetAddress+0x74>
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	885b      	ldrh	r3, [r3, #2]
 8005d2e:	2b7f      	cmp	r3, #127	; 0x7f
 8005d30:	d828      	bhi.n	8005d84 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	885b      	ldrh	r3, [r3, #2]
 8005d36:	b2db      	uxtb	r3, r3
 8005d38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d3c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d44:	2b03      	cmp	r3, #3
 8005d46:	d104      	bne.n	8005d52 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8005d48:	6839      	ldr	r1, [r7, #0]
 8005d4a:	6878      	ldr	r0, [r7, #4]
 8005d4c:	f000 f99c 	bl	8006088 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d50:	e01c      	b.n	8005d8c <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	7bfa      	ldrb	r2, [r7, #15]
 8005d56:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005d5a:	7bfb      	ldrb	r3, [r7, #15]
 8005d5c:	4619      	mov	r1, r3
 8005d5e:	6878      	ldr	r0, [r7, #4]
 8005d60:	f000 fdf6 	bl	8006950 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8005d64:	6878      	ldr	r0, [r7, #4]
 8005d66:	f000 fa3d 	bl	80061e4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005d6a:	7bfb      	ldrb	r3, [r7, #15]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d004      	beq.n	8005d7a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2202      	movs	r2, #2
 8005d74:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d78:	e008      	b.n	8005d8c <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2201      	movs	r2, #1
 8005d7e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d82:	e003      	b.n	8005d8c <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005d84:	6839      	ldr	r1, [r7, #0]
 8005d86:	6878      	ldr	r0, [r7, #4]
 8005d88:	f000 f97e 	bl	8006088 <USBD_CtlError>
  }
}
 8005d8c:	bf00      	nop
 8005d8e:	3710      	adds	r7, #16
 8005d90:	46bd      	mov	sp, r7
 8005d92:	bd80      	pop	{r7, pc}

08005d94 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b084      	sub	sp, #16
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
 8005d9c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005d9e:	2300      	movs	r3, #0
 8005da0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	885b      	ldrh	r3, [r3, #2]
 8005da6:	b2da      	uxtb	r2, r3
 8005da8:	4b4b      	ldr	r3, [pc, #300]	; (8005ed8 <USBD_SetConfig+0x144>)
 8005daa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005dac:	4b4a      	ldr	r3, [pc, #296]	; (8005ed8 <USBD_SetConfig+0x144>)
 8005dae:	781b      	ldrb	r3, [r3, #0]
 8005db0:	2b01      	cmp	r3, #1
 8005db2:	d905      	bls.n	8005dc0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8005db4:	6839      	ldr	r1, [r7, #0]
 8005db6:	6878      	ldr	r0, [r7, #4]
 8005db8:	f000 f966 	bl	8006088 <USBD_CtlError>
    return USBD_FAIL;
 8005dbc:	2303      	movs	r3, #3
 8005dbe:	e087      	b.n	8005ed0 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005dc6:	2b02      	cmp	r3, #2
 8005dc8:	d002      	beq.n	8005dd0 <USBD_SetConfig+0x3c>
 8005dca:	2b03      	cmp	r3, #3
 8005dcc:	d025      	beq.n	8005e1a <USBD_SetConfig+0x86>
 8005dce:	e071      	b.n	8005eb4 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8005dd0:	4b41      	ldr	r3, [pc, #260]	; (8005ed8 <USBD_SetConfig+0x144>)
 8005dd2:	781b      	ldrb	r3, [r3, #0]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d01c      	beq.n	8005e12 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8005dd8:	4b3f      	ldr	r3, [pc, #252]	; (8005ed8 <USBD_SetConfig+0x144>)
 8005dda:	781b      	ldrb	r3, [r3, #0]
 8005ddc:	461a      	mov	r2, r3
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8005de2:	4b3d      	ldr	r3, [pc, #244]	; (8005ed8 <USBD_SetConfig+0x144>)
 8005de4:	781b      	ldrb	r3, [r3, #0]
 8005de6:	4619      	mov	r1, r3
 8005de8:	6878      	ldr	r0, [r7, #4]
 8005dea:	f7ff f9a7 	bl	800513c <USBD_SetClassConfig>
 8005dee:	4603      	mov	r3, r0
 8005df0:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8005df2:	7bfb      	ldrb	r3, [r7, #15]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d004      	beq.n	8005e02 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8005df8:	6839      	ldr	r1, [r7, #0]
 8005dfa:	6878      	ldr	r0, [r7, #4]
 8005dfc:	f000 f944 	bl	8006088 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8005e00:	e065      	b.n	8005ece <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	f000 f9ee 	bl	80061e4 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2203      	movs	r2, #3
 8005e0c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8005e10:	e05d      	b.n	8005ece <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8005e12:	6878      	ldr	r0, [r7, #4]
 8005e14:	f000 f9e6 	bl	80061e4 <USBD_CtlSendStatus>
    break;
 8005e18:	e059      	b.n	8005ece <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8005e1a:	4b2f      	ldr	r3, [pc, #188]	; (8005ed8 <USBD_SetConfig+0x144>)
 8005e1c:	781b      	ldrb	r3, [r3, #0]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d112      	bne.n	8005e48 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2202      	movs	r2, #2
 8005e26:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8005e2a:	4b2b      	ldr	r3, [pc, #172]	; (8005ed8 <USBD_SetConfig+0x144>)
 8005e2c:	781b      	ldrb	r3, [r3, #0]
 8005e2e:	461a      	mov	r2, r3
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005e34:	4b28      	ldr	r3, [pc, #160]	; (8005ed8 <USBD_SetConfig+0x144>)
 8005e36:	781b      	ldrb	r3, [r3, #0]
 8005e38:	4619      	mov	r1, r3
 8005e3a:	6878      	ldr	r0, [r7, #4]
 8005e3c:	f7ff f99a 	bl	8005174 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8005e40:	6878      	ldr	r0, [r7, #4]
 8005e42:	f000 f9cf 	bl	80061e4 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8005e46:	e042      	b.n	8005ece <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8005e48:	4b23      	ldr	r3, [pc, #140]	; (8005ed8 <USBD_SetConfig+0x144>)
 8005e4a:	781b      	ldrb	r3, [r3, #0]
 8005e4c:	461a      	mov	r2, r3
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	685b      	ldr	r3, [r3, #4]
 8005e52:	429a      	cmp	r2, r3
 8005e54:	d02a      	beq.n	8005eac <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	685b      	ldr	r3, [r3, #4]
 8005e5a:	b2db      	uxtb	r3, r3
 8005e5c:	4619      	mov	r1, r3
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	f7ff f988 	bl	8005174 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8005e64:	4b1c      	ldr	r3, [pc, #112]	; (8005ed8 <USBD_SetConfig+0x144>)
 8005e66:	781b      	ldrb	r3, [r3, #0]
 8005e68:	461a      	mov	r2, r3
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8005e6e:	4b1a      	ldr	r3, [pc, #104]	; (8005ed8 <USBD_SetConfig+0x144>)
 8005e70:	781b      	ldrb	r3, [r3, #0]
 8005e72:	4619      	mov	r1, r3
 8005e74:	6878      	ldr	r0, [r7, #4]
 8005e76:	f7ff f961 	bl	800513c <USBD_SetClassConfig>
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8005e7e:	7bfb      	ldrb	r3, [r7, #15]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d00f      	beq.n	8005ea4 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8005e84:	6839      	ldr	r1, [r7, #0]
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	f000 f8fe 	bl	8006088 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	685b      	ldr	r3, [r3, #4]
 8005e90:	b2db      	uxtb	r3, r3
 8005e92:	4619      	mov	r1, r3
 8005e94:	6878      	ldr	r0, [r7, #4]
 8005e96:	f7ff f96d 	bl	8005174 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2202      	movs	r2, #2
 8005e9e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8005ea2:	e014      	b.n	8005ece <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8005ea4:	6878      	ldr	r0, [r7, #4]
 8005ea6:	f000 f99d 	bl	80061e4 <USBD_CtlSendStatus>
    break;
 8005eaa:	e010      	b.n	8005ece <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8005eac:	6878      	ldr	r0, [r7, #4]
 8005eae:	f000 f999 	bl	80061e4 <USBD_CtlSendStatus>
    break;
 8005eb2:	e00c      	b.n	8005ece <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8005eb4:	6839      	ldr	r1, [r7, #0]
 8005eb6:	6878      	ldr	r0, [r7, #4]
 8005eb8:	f000 f8e6 	bl	8006088 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005ebc:	4b06      	ldr	r3, [pc, #24]	; (8005ed8 <USBD_SetConfig+0x144>)
 8005ebe:	781b      	ldrb	r3, [r3, #0]
 8005ec0:	4619      	mov	r1, r3
 8005ec2:	6878      	ldr	r0, [r7, #4]
 8005ec4:	f7ff f956 	bl	8005174 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8005ec8:	2303      	movs	r3, #3
 8005eca:	73fb      	strb	r3, [r7, #15]
    break;
 8005ecc:	bf00      	nop
  }

  return ret;
 8005ece:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	3710      	adds	r7, #16
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	bd80      	pop	{r7, pc}
 8005ed8:	200001e8 	.word	0x200001e8

08005edc <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b082      	sub	sp, #8
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
 8005ee4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	88db      	ldrh	r3, [r3, #6]
 8005eea:	2b01      	cmp	r3, #1
 8005eec:	d004      	beq.n	8005ef8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8005eee:	6839      	ldr	r1, [r7, #0]
 8005ef0:	6878      	ldr	r0, [r7, #4]
 8005ef2:	f000 f8c9 	bl	8006088 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8005ef6:	e021      	b.n	8005f3c <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005efe:	2b01      	cmp	r3, #1
 8005f00:	db17      	blt.n	8005f32 <USBD_GetConfig+0x56>
 8005f02:	2b02      	cmp	r3, #2
 8005f04:	dd02      	ble.n	8005f0c <USBD_GetConfig+0x30>
 8005f06:	2b03      	cmp	r3, #3
 8005f08:	d00b      	beq.n	8005f22 <USBD_GetConfig+0x46>
 8005f0a:	e012      	b.n	8005f32 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	3308      	adds	r3, #8
 8005f16:	2201      	movs	r2, #1
 8005f18:	4619      	mov	r1, r3
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	f000 f925 	bl	800616a <USBD_CtlSendData>
      break;
 8005f20:	e00c      	b.n	8005f3c <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	3304      	adds	r3, #4
 8005f26:	2201      	movs	r2, #1
 8005f28:	4619      	mov	r1, r3
 8005f2a:	6878      	ldr	r0, [r7, #4]
 8005f2c:	f000 f91d 	bl	800616a <USBD_CtlSendData>
      break;
 8005f30:	e004      	b.n	8005f3c <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8005f32:	6839      	ldr	r1, [r7, #0]
 8005f34:	6878      	ldr	r0, [r7, #4]
 8005f36:	f000 f8a7 	bl	8006088 <USBD_CtlError>
      break;
 8005f3a:	bf00      	nop
}
 8005f3c:	bf00      	nop
 8005f3e:	3708      	adds	r7, #8
 8005f40:	46bd      	mov	sp, r7
 8005f42:	bd80      	pop	{r7, pc}

08005f44 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b082      	sub	sp, #8
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
 8005f4c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f54:	3b01      	subs	r3, #1
 8005f56:	2b02      	cmp	r3, #2
 8005f58:	d81e      	bhi.n	8005f98 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	88db      	ldrh	r3, [r3, #6]
 8005f5e:	2b02      	cmp	r3, #2
 8005f60:	d004      	beq.n	8005f6c <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8005f62:	6839      	ldr	r1, [r7, #0]
 8005f64:	6878      	ldr	r0, [r7, #4]
 8005f66:	f000 f88f 	bl	8006088 <USBD_CtlError>
      break;
 8005f6a:	e01a      	b.n	8005fa2 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2201      	movs	r2, #1
 8005f70:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d005      	beq.n	8005f88 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	68db      	ldr	r3, [r3, #12]
 8005f80:	f043 0202 	orr.w	r2, r3, #2
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	330c      	adds	r3, #12
 8005f8c:	2202      	movs	r2, #2
 8005f8e:	4619      	mov	r1, r3
 8005f90:	6878      	ldr	r0, [r7, #4]
 8005f92:	f000 f8ea 	bl	800616a <USBD_CtlSendData>
    break;
 8005f96:	e004      	b.n	8005fa2 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8005f98:	6839      	ldr	r1, [r7, #0]
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	f000 f874 	bl	8006088 <USBD_CtlError>
    break;
 8005fa0:	bf00      	nop
  }
}
 8005fa2:	bf00      	nop
 8005fa4:	3708      	adds	r7, #8
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	bd80      	pop	{r7, pc}

08005faa <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005faa:	b580      	push	{r7, lr}
 8005fac:	b082      	sub	sp, #8
 8005fae:	af00      	add	r7, sp, #0
 8005fb0:	6078      	str	r0, [r7, #4]
 8005fb2:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	885b      	ldrh	r3, [r3, #2]
 8005fb8:	2b01      	cmp	r3, #1
 8005fba:	d106      	bne.n	8005fca <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8005fc4:	6878      	ldr	r0, [r7, #4]
 8005fc6:	f000 f90d 	bl	80061e4 <USBD_CtlSendStatus>
  }
}
 8005fca:	bf00      	nop
 8005fcc:	3708      	adds	r7, #8
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bd80      	pop	{r7, pc}

08005fd2 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005fd2:	b580      	push	{r7, lr}
 8005fd4:	b082      	sub	sp, #8
 8005fd6:	af00      	add	r7, sp, #0
 8005fd8:	6078      	str	r0, [r7, #4]
 8005fda:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005fe2:	3b01      	subs	r3, #1
 8005fe4:	2b02      	cmp	r3, #2
 8005fe6:	d80b      	bhi.n	8006000 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	885b      	ldrh	r3, [r3, #2]
 8005fec:	2b01      	cmp	r3, #1
 8005fee:	d10c      	bne.n	800600a <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8005ff8:	6878      	ldr	r0, [r7, #4]
 8005ffa:	f000 f8f3 	bl	80061e4 <USBD_CtlSendStatus>
      }
      break;
 8005ffe:	e004      	b.n	800600a <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8006000:	6839      	ldr	r1, [r7, #0]
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f000 f840 	bl	8006088 <USBD_CtlError>
      break;
 8006008:	e000      	b.n	800600c <USBD_ClrFeature+0x3a>
      break;
 800600a:	bf00      	nop
  }
}
 800600c:	bf00      	nop
 800600e:	3708      	adds	r7, #8
 8006010:	46bd      	mov	sp, r7
 8006012:	bd80      	pop	{r7, pc}

08006014 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b084      	sub	sp, #16
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
 800601c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	781a      	ldrb	r2, [r3, #0]
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	3301      	adds	r3, #1
 800602e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	781a      	ldrb	r2, [r3, #0]
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	3301      	adds	r3, #1
 800603c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800603e:	68f8      	ldr	r0, [r7, #12]
 8006040:	f7ff fad3 	bl	80055ea <SWAPBYTE>
 8006044:	4603      	mov	r3, r0
 8006046:	461a      	mov	r2, r3
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	3301      	adds	r3, #1
 8006050:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	3301      	adds	r3, #1
 8006056:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006058:	68f8      	ldr	r0, [r7, #12]
 800605a:	f7ff fac6 	bl	80055ea <SWAPBYTE>
 800605e:	4603      	mov	r3, r0
 8006060:	461a      	mov	r2, r3
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	3301      	adds	r3, #1
 800606a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	3301      	adds	r3, #1
 8006070:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006072:	68f8      	ldr	r0, [r7, #12]
 8006074:	f7ff fab9 	bl	80055ea <SWAPBYTE>
 8006078:	4603      	mov	r3, r0
 800607a:	461a      	mov	r2, r3
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	80da      	strh	r2, [r3, #6]
}
 8006080:	bf00      	nop
 8006082:	3710      	adds	r7, #16
 8006084:	46bd      	mov	sp, r7
 8006086:	bd80      	pop	{r7, pc}

08006088 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b082      	sub	sp, #8
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
 8006090:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006092:	2180      	movs	r1, #128	; 0x80
 8006094:	6878      	ldr	r0, [r7, #4]
 8006096:	f000 fbf1 	bl	800687c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800609a:	2100      	movs	r1, #0
 800609c:	6878      	ldr	r0, [r7, #4]
 800609e:	f000 fbed 	bl	800687c <USBD_LL_StallEP>
}
 80060a2:	bf00      	nop
 80060a4:	3708      	adds	r7, #8
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd80      	pop	{r7, pc}

080060aa <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80060aa:	b580      	push	{r7, lr}
 80060ac:	b086      	sub	sp, #24
 80060ae:	af00      	add	r7, sp, #0
 80060b0:	60f8      	str	r0, [r7, #12]
 80060b2:	60b9      	str	r1, [r7, #8]
 80060b4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80060b6:	2300      	movs	r3, #0
 80060b8:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d036      	beq.n	800612e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80060c4:	6938      	ldr	r0, [r7, #16]
 80060c6:	f000 f836 	bl	8006136 <USBD_GetLen>
 80060ca:	4603      	mov	r3, r0
 80060cc:	3301      	adds	r3, #1
 80060ce:	b29b      	uxth	r3, r3
 80060d0:	005b      	lsls	r3, r3, #1
 80060d2:	b29a      	uxth	r2, r3
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80060d8:	7dfb      	ldrb	r3, [r7, #23]
 80060da:	68ba      	ldr	r2, [r7, #8]
 80060dc:	4413      	add	r3, r2
 80060de:	687a      	ldr	r2, [r7, #4]
 80060e0:	7812      	ldrb	r2, [r2, #0]
 80060e2:	701a      	strb	r2, [r3, #0]
  idx++;
 80060e4:	7dfb      	ldrb	r3, [r7, #23]
 80060e6:	3301      	adds	r3, #1
 80060e8:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80060ea:	7dfb      	ldrb	r3, [r7, #23]
 80060ec:	68ba      	ldr	r2, [r7, #8]
 80060ee:	4413      	add	r3, r2
 80060f0:	2203      	movs	r2, #3
 80060f2:	701a      	strb	r2, [r3, #0]
  idx++;
 80060f4:	7dfb      	ldrb	r3, [r7, #23]
 80060f6:	3301      	adds	r3, #1
 80060f8:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80060fa:	e013      	b.n	8006124 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80060fc:	7dfb      	ldrb	r3, [r7, #23]
 80060fe:	68ba      	ldr	r2, [r7, #8]
 8006100:	4413      	add	r3, r2
 8006102:	693a      	ldr	r2, [r7, #16]
 8006104:	7812      	ldrb	r2, [r2, #0]
 8006106:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006108:	693b      	ldr	r3, [r7, #16]
 800610a:	3301      	adds	r3, #1
 800610c:	613b      	str	r3, [r7, #16]
    idx++;
 800610e:	7dfb      	ldrb	r3, [r7, #23]
 8006110:	3301      	adds	r3, #1
 8006112:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006114:	7dfb      	ldrb	r3, [r7, #23]
 8006116:	68ba      	ldr	r2, [r7, #8]
 8006118:	4413      	add	r3, r2
 800611a:	2200      	movs	r2, #0
 800611c:	701a      	strb	r2, [r3, #0]
    idx++;
 800611e:	7dfb      	ldrb	r3, [r7, #23]
 8006120:	3301      	adds	r3, #1
 8006122:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006124:	693b      	ldr	r3, [r7, #16]
 8006126:	781b      	ldrb	r3, [r3, #0]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d1e7      	bne.n	80060fc <USBD_GetString+0x52>
 800612c:	e000      	b.n	8006130 <USBD_GetString+0x86>
    return;
 800612e:	bf00      	nop
  }
}
 8006130:	3718      	adds	r7, #24
 8006132:	46bd      	mov	sp, r7
 8006134:	bd80      	pop	{r7, pc}

08006136 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006136:	b480      	push	{r7}
 8006138:	b085      	sub	sp, #20
 800613a:	af00      	add	r7, sp, #0
 800613c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800613e:	2300      	movs	r3, #0
 8006140:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006146:	e005      	b.n	8006154 <USBD_GetLen+0x1e>
  {
    len++;
 8006148:	7bfb      	ldrb	r3, [r7, #15]
 800614a:	3301      	adds	r3, #1
 800614c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800614e:	68bb      	ldr	r3, [r7, #8]
 8006150:	3301      	adds	r3, #1
 8006152:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	781b      	ldrb	r3, [r3, #0]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d1f5      	bne.n	8006148 <USBD_GetLen+0x12>
  }

  return len;
 800615c:	7bfb      	ldrb	r3, [r7, #15]
}
 800615e:	4618      	mov	r0, r3
 8006160:	3714      	adds	r7, #20
 8006162:	46bd      	mov	sp, r7
 8006164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006168:	4770      	bx	lr

0800616a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800616a:	b580      	push	{r7, lr}
 800616c:	b084      	sub	sp, #16
 800616e:	af00      	add	r7, sp, #0
 8006170:	60f8      	str	r0, [r7, #12]
 8006172:	60b9      	str	r1, [r7, #8]
 8006174:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	2202      	movs	r2, #2
 800617a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	687a      	ldr	r2, [r7, #4]
 8006182:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	687a      	ldr	r2, [r7, #4]
 8006188:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	68ba      	ldr	r2, [r7, #8]
 800618e:	2100      	movs	r1, #0
 8006190:	68f8      	ldr	r0, [r7, #12]
 8006192:	f000 fbfc 	bl	800698e <USBD_LL_Transmit>

  return USBD_OK;
 8006196:	2300      	movs	r3, #0
}
 8006198:	4618      	mov	r0, r3
 800619a:	3710      	adds	r7, #16
 800619c:	46bd      	mov	sp, r7
 800619e:	bd80      	pop	{r7, pc}

080061a0 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b084      	sub	sp, #16
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	60f8      	str	r0, [r7, #12]
 80061a8:	60b9      	str	r1, [r7, #8]
 80061aa:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	68ba      	ldr	r2, [r7, #8]
 80061b0:	2100      	movs	r1, #0
 80061b2:	68f8      	ldr	r0, [r7, #12]
 80061b4:	f000 fbeb 	bl	800698e <USBD_LL_Transmit>

  return USBD_OK;
 80061b8:	2300      	movs	r3, #0
}
 80061ba:	4618      	mov	r0, r3
 80061bc:	3710      	adds	r7, #16
 80061be:	46bd      	mov	sp, r7
 80061c0:	bd80      	pop	{r7, pc}

080061c2 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80061c2:	b580      	push	{r7, lr}
 80061c4:	b084      	sub	sp, #16
 80061c6:	af00      	add	r7, sp, #0
 80061c8:	60f8      	str	r0, [r7, #12]
 80061ca:	60b9      	str	r1, [r7, #8]
 80061cc:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	68ba      	ldr	r2, [r7, #8]
 80061d2:	2100      	movs	r1, #0
 80061d4:	68f8      	ldr	r0, [r7, #12]
 80061d6:	f000 fbfb 	bl	80069d0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80061da:	2300      	movs	r3, #0
}
 80061dc:	4618      	mov	r0, r3
 80061de:	3710      	adds	r7, #16
 80061e0:	46bd      	mov	sp, r7
 80061e2:	bd80      	pop	{r7, pc}

080061e4 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b082      	sub	sp, #8
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2204      	movs	r2, #4
 80061f0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80061f4:	2300      	movs	r3, #0
 80061f6:	2200      	movs	r2, #0
 80061f8:	2100      	movs	r1, #0
 80061fa:	6878      	ldr	r0, [r7, #4]
 80061fc:	f000 fbc7 	bl	800698e <USBD_LL_Transmit>

  return USBD_OK;
 8006200:	2300      	movs	r3, #0
}
 8006202:	4618      	mov	r0, r3
 8006204:	3708      	adds	r7, #8
 8006206:	46bd      	mov	sp, r7
 8006208:	bd80      	pop	{r7, pc}

0800620a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800620a:	b580      	push	{r7, lr}
 800620c:	b082      	sub	sp, #8
 800620e:	af00      	add	r7, sp, #0
 8006210:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2205      	movs	r2, #5
 8006216:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800621a:	2300      	movs	r3, #0
 800621c:	2200      	movs	r2, #0
 800621e:	2100      	movs	r1, #0
 8006220:	6878      	ldr	r0, [r7, #4]
 8006222:	f000 fbd5 	bl	80069d0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006226:	2300      	movs	r3, #0
}
 8006228:	4618      	mov	r0, r3
 800622a:	3708      	adds	r7, #8
 800622c:	46bd      	mov	sp, r7
 800622e:	bd80      	pop	{r7, pc}

08006230 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006234:	2200      	movs	r2, #0
 8006236:	490e      	ldr	r1, [pc, #56]	; (8006270 <MX_USB_DEVICE_Init+0x40>)
 8006238:	480e      	ldr	r0, [pc, #56]	; (8006274 <MX_USB_DEVICE_Init+0x44>)
 800623a:	f7fe ff11 	bl	8005060 <USBD_Init>
 800623e:	4603      	mov	r3, r0
 8006240:	2b00      	cmp	r3, #0
 8006242:	d001      	beq.n	8006248 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006244:	f7fb f85c 	bl	8001300 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8006248:	490b      	ldr	r1, [pc, #44]	; (8006278 <MX_USB_DEVICE_Init+0x48>)
 800624a:	480a      	ldr	r0, [pc, #40]	; (8006274 <MX_USB_DEVICE_Init+0x44>)
 800624c:	f7fe ff3e 	bl	80050cc <USBD_RegisterClass>
 8006250:	4603      	mov	r3, r0
 8006252:	2b00      	cmp	r3, #0
 8006254:	d001      	beq.n	800625a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006256:	f7fb f853 	bl	8001300 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800625a:	4806      	ldr	r0, [pc, #24]	; (8006274 <MX_USB_DEVICE_Init+0x44>)
 800625c:	f7fe ff57 	bl	800510e <USBD_Start>
 8006260:	4603      	mov	r3, r0
 8006262:	2b00      	cmp	r3, #0
 8006264:	d001      	beq.n	800626a <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8006266:	f7fb f84b 	bl	8001300 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800626a:	bf00      	nop
 800626c:	bd80      	pop	{r7, pc}
 800626e:	bf00      	nop
 8006270:	20000108 	.word	0x20000108
 8006274:	200001f8 	.word	0x200001f8
 8006278:	2000000c 	.word	0x2000000c

0800627c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800627c:	b480      	push	{r7}
 800627e:	b083      	sub	sp, #12
 8006280:	af00      	add	r7, sp, #0
 8006282:	4603      	mov	r3, r0
 8006284:	6039      	str	r1, [r7, #0]
 8006286:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	2212      	movs	r2, #18
 800628c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800628e:	4b03      	ldr	r3, [pc, #12]	; (800629c <USBD_FS_DeviceDescriptor+0x20>)
}
 8006290:	4618      	mov	r0, r3
 8006292:	370c      	adds	r7, #12
 8006294:	46bd      	mov	sp, r7
 8006296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629a:	4770      	bx	lr
 800629c:	20000124 	.word	0x20000124

080062a0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80062a0:	b480      	push	{r7}
 80062a2:	b083      	sub	sp, #12
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	4603      	mov	r3, r0
 80062a8:	6039      	str	r1, [r7, #0]
 80062aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	2204      	movs	r2, #4
 80062b0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80062b2:	4b03      	ldr	r3, [pc, #12]	; (80062c0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80062b4:	4618      	mov	r0, r3
 80062b6:	370c      	adds	r7, #12
 80062b8:	46bd      	mov	sp, r7
 80062ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062be:	4770      	bx	lr
 80062c0:	20000138 	.word	0x20000138

080062c4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b082      	sub	sp, #8
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	4603      	mov	r3, r0
 80062cc:	6039      	str	r1, [r7, #0]
 80062ce:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80062d0:	79fb      	ldrb	r3, [r7, #7]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d105      	bne.n	80062e2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80062d6:	683a      	ldr	r2, [r7, #0]
 80062d8:	4907      	ldr	r1, [pc, #28]	; (80062f8 <USBD_FS_ProductStrDescriptor+0x34>)
 80062da:	4808      	ldr	r0, [pc, #32]	; (80062fc <USBD_FS_ProductStrDescriptor+0x38>)
 80062dc:	f7ff fee5 	bl	80060aa <USBD_GetString>
 80062e0:	e004      	b.n	80062ec <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80062e2:	683a      	ldr	r2, [r7, #0]
 80062e4:	4904      	ldr	r1, [pc, #16]	; (80062f8 <USBD_FS_ProductStrDescriptor+0x34>)
 80062e6:	4805      	ldr	r0, [pc, #20]	; (80062fc <USBD_FS_ProductStrDescriptor+0x38>)
 80062e8:	f7ff fedf 	bl	80060aa <USBD_GetString>
  }
  return USBD_StrDesc;
 80062ec:	4b02      	ldr	r3, [pc, #8]	; (80062f8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80062ee:	4618      	mov	r0, r3
 80062f0:	3708      	adds	r7, #8
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bd80      	pop	{r7, pc}
 80062f6:	bf00      	nop
 80062f8:	200004c8 	.word	0x200004c8
 80062fc:	08006ca4 	.word	0x08006ca4

08006300 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b082      	sub	sp, #8
 8006304:	af00      	add	r7, sp, #0
 8006306:	4603      	mov	r3, r0
 8006308:	6039      	str	r1, [r7, #0]
 800630a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800630c:	683a      	ldr	r2, [r7, #0]
 800630e:	4904      	ldr	r1, [pc, #16]	; (8006320 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006310:	4804      	ldr	r0, [pc, #16]	; (8006324 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006312:	f7ff feca 	bl	80060aa <USBD_GetString>
  return USBD_StrDesc;
 8006316:	4b02      	ldr	r3, [pc, #8]	; (8006320 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006318:	4618      	mov	r0, r3
 800631a:	3708      	adds	r7, #8
 800631c:	46bd      	mov	sp, r7
 800631e:	bd80      	pop	{r7, pc}
 8006320:	200004c8 	.word	0x200004c8
 8006324:	08006cbc 	.word	0x08006cbc

08006328 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b082      	sub	sp, #8
 800632c:	af00      	add	r7, sp, #0
 800632e:	4603      	mov	r3, r0
 8006330:	6039      	str	r1, [r7, #0]
 8006332:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	221a      	movs	r2, #26
 8006338:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800633a:	f000 f843 	bl	80063c4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800633e:	4b02      	ldr	r3, [pc, #8]	; (8006348 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006340:	4618      	mov	r0, r3
 8006342:	3708      	adds	r7, #8
 8006344:	46bd      	mov	sp, r7
 8006346:	bd80      	pop	{r7, pc}
 8006348:	2000013c 	.word	0x2000013c

0800634c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b082      	sub	sp, #8
 8006350:	af00      	add	r7, sp, #0
 8006352:	4603      	mov	r3, r0
 8006354:	6039      	str	r1, [r7, #0]
 8006356:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006358:	79fb      	ldrb	r3, [r7, #7]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d105      	bne.n	800636a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800635e:	683a      	ldr	r2, [r7, #0]
 8006360:	4907      	ldr	r1, [pc, #28]	; (8006380 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006362:	4808      	ldr	r0, [pc, #32]	; (8006384 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006364:	f7ff fea1 	bl	80060aa <USBD_GetString>
 8006368:	e004      	b.n	8006374 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800636a:	683a      	ldr	r2, [r7, #0]
 800636c:	4904      	ldr	r1, [pc, #16]	; (8006380 <USBD_FS_ConfigStrDescriptor+0x34>)
 800636e:	4805      	ldr	r0, [pc, #20]	; (8006384 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006370:	f7ff fe9b 	bl	80060aa <USBD_GetString>
  }
  return USBD_StrDesc;
 8006374:	4b02      	ldr	r3, [pc, #8]	; (8006380 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006376:	4618      	mov	r0, r3
 8006378:	3708      	adds	r7, #8
 800637a:	46bd      	mov	sp, r7
 800637c:	bd80      	pop	{r7, pc}
 800637e:	bf00      	nop
 8006380:	200004c8 	.word	0x200004c8
 8006384:	08006cd0 	.word	0x08006cd0

08006388 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b082      	sub	sp, #8
 800638c:	af00      	add	r7, sp, #0
 800638e:	4603      	mov	r3, r0
 8006390:	6039      	str	r1, [r7, #0]
 8006392:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006394:	79fb      	ldrb	r3, [r7, #7]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d105      	bne.n	80063a6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800639a:	683a      	ldr	r2, [r7, #0]
 800639c:	4907      	ldr	r1, [pc, #28]	; (80063bc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800639e:	4808      	ldr	r0, [pc, #32]	; (80063c0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80063a0:	f7ff fe83 	bl	80060aa <USBD_GetString>
 80063a4:	e004      	b.n	80063b0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80063a6:	683a      	ldr	r2, [r7, #0]
 80063a8:	4904      	ldr	r1, [pc, #16]	; (80063bc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80063aa:	4805      	ldr	r0, [pc, #20]	; (80063c0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80063ac:	f7ff fe7d 	bl	80060aa <USBD_GetString>
  }
  return USBD_StrDesc;
 80063b0:	4b02      	ldr	r3, [pc, #8]	; (80063bc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80063b2:	4618      	mov	r0, r3
 80063b4:	3708      	adds	r7, #8
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bd80      	pop	{r7, pc}
 80063ba:	bf00      	nop
 80063bc:	200004c8 	.word	0x200004c8
 80063c0:	08006cdc 	.word	0x08006cdc

080063c4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b084      	sub	sp, #16
 80063c8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80063ca:	4b0f      	ldr	r3, [pc, #60]	; (8006408 <Get_SerialNum+0x44>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80063d0:	4b0e      	ldr	r3, [pc, #56]	; (800640c <Get_SerialNum+0x48>)
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80063d6:	4b0e      	ldr	r3, [pc, #56]	; (8006410 <Get_SerialNum+0x4c>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80063dc:	68fa      	ldr	r2, [r7, #12]
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	4413      	add	r3, r2
 80063e2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d009      	beq.n	80063fe <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80063ea:	2208      	movs	r2, #8
 80063ec:	4909      	ldr	r1, [pc, #36]	; (8006414 <Get_SerialNum+0x50>)
 80063ee:	68f8      	ldr	r0, [r7, #12]
 80063f0:	f000 f814 	bl	800641c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80063f4:	2204      	movs	r2, #4
 80063f6:	4908      	ldr	r1, [pc, #32]	; (8006418 <Get_SerialNum+0x54>)
 80063f8:	68b8      	ldr	r0, [r7, #8]
 80063fa:	f000 f80f 	bl	800641c <IntToUnicode>
  }
}
 80063fe:	bf00      	nop
 8006400:	3710      	adds	r7, #16
 8006402:	46bd      	mov	sp, r7
 8006404:	bd80      	pop	{r7, pc}
 8006406:	bf00      	nop
 8006408:	1fff7a10 	.word	0x1fff7a10
 800640c:	1fff7a14 	.word	0x1fff7a14
 8006410:	1fff7a18 	.word	0x1fff7a18
 8006414:	2000013e 	.word	0x2000013e
 8006418:	2000014e 	.word	0x2000014e

0800641c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800641c:	b480      	push	{r7}
 800641e:	b087      	sub	sp, #28
 8006420:	af00      	add	r7, sp, #0
 8006422:	60f8      	str	r0, [r7, #12]
 8006424:	60b9      	str	r1, [r7, #8]
 8006426:	4613      	mov	r3, r2
 8006428:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800642a:	2300      	movs	r3, #0
 800642c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800642e:	2300      	movs	r3, #0
 8006430:	75fb      	strb	r3, [r7, #23]
 8006432:	e027      	b.n	8006484 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	0f1b      	lsrs	r3, r3, #28
 8006438:	2b09      	cmp	r3, #9
 800643a:	d80b      	bhi.n	8006454 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	0f1b      	lsrs	r3, r3, #28
 8006440:	b2da      	uxtb	r2, r3
 8006442:	7dfb      	ldrb	r3, [r7, #23]
 8006444:	005b      	lsls	r3, r3, #1
 8006446:	4619      	mov	r1, r3
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	440b      	add	r3, r1
 800644c:	3230      	adds	r2, #48	; 0x30
 800644e:	b2d2      	uxtb	r2, r2
 8006450:	701a      	strb	r2, [r3, #0]
 8006452:	e00a      	b.n	800646a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	0f1b      	lsrs	r3, r3, #28
 8006458:	b2da      	uxtb	r2, r3
 800645a:	7dfb      	ldrb	r3, [r7, #23]
 800645c:	005b      	lsls	r3, r3, #1
 800645e:	4619      	mov	r1, r3
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	440b      	add	r3, r1
 8006464:	3237      	adds	r2, #55	; 0x37
 8006466:	b2d2      	uxtb	r2, r2
 8006468:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	011b      	lsls	r3, r3, #4
 800646e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006470:	7dfb      	ldrb	r3, [r7, #23]
 8006472:	005b      	lsls	r3, r3, #1
 8006474:	3301      	adds	r3, #1
 8006476:	68ba      	ldr	r2, [r7, #8]
 8006478:	4413      	add	r3, r2
 800647a:	2200      	movs	r2, #0
 800647c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800647e:	7dfb      	ldrb	r3, [r7, #23]
 8006480:	3301      	adds	r3, #1
 8006482:	75fb      	strb	r3, [r7, #23]
 8006484:	7dfa      	ldrb	r2, [r7, #23]
 8006486:	79fb      	ldrb	r3, [r7, #7]
 8006488:	429a      	cmp	r2, r3
 800648a:	d3d3      	bcc.n	8006434 <IntToUnicode+0x18>
  }
}
 800648c:	bf00      	nop
 800648e:	371c      	adds	r7, #28
 8006490:	46bd      	mov	sp, r7
 8006492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006496:	4770      	bx	lr

08006498 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b08a      	sub	sp, #40	; 0x28
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80064a0:	f107 0314 	add.w	r3, r7, #20
 80064a4:	2200      	movs	r2, #0
 80064a6:	601a      	str	r2, [r3, #0]
 80064a8:	605a      	str	r2, [r3, #4]
 80064aa:	609a      	str	r2, [r3, #8]
 80064ac:	60da      	str	r2, [r3, #12]
 80064ae:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80064b8:	d13a      	bne.n	8006530 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80064ba:	2300      	movs	r3, #0
 80064bc:	613b      	str	r3, [r7, #16]
 80064be:	4b1e      	ldr	r3, [pc, #120]	; (8006538 <HAL_PCD_MspInit+0xa0>)
 80064c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064c2:	4a1d      	ldr	r2, [pc, #116]	; (8006538 <HAL_PCD_MspInit+0xa0>)
 80064c4:	f043 0301 	orr.w	r3, r3, #1
 80064c8:	6313      	str	r3, [r2, #48]	; 0x30
 80064ca:	4b1b      	ldr	r3, [pc, #108]	; (8006538 <HAL_PCD_MspInit+0xa0>)
 80064cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064ce:	f003 0301 	and.w	r3, r3, #1
 80064d2:	613b      	str	r3, [r7, #16]
 80064d4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80064d6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80064da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80064dc:	2302      	movs	r3, #2
 80064de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064e0:	2300      	movs	r3, #0
 80064e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80064e4:	2303      	movs	r3, #3
 80064e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80064e8:	230a      	movs	r3, #10
 80064ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80064ec:	f107 0314 	add.w	r3, r7, #20
 80064f0:	4619      	mov	r1, r3
 80064f2:	4812      	ldr	r0, [pc, #72]	; (800653c <HAL_PCD_MspInit+0xa4>)
 80064f4:	f7fb f988 	bl	8001808 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80064f8:	4b0f      	ldr	r3, [pc, #60]	; (8006538 <HAL_PCD_MspInit+0xa0>)
 80064fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064fc:	4a0e      	ldr	r2, [pc, #56]	; (8006538 <HAL_PCD_MspInit+0xa0>)
 80064fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006502:	6353      	str	r3, [r2, #52]	; 0x34
 8006504:	2300      	movs	r3, #0
 8006506:	60fb      	str	r3, [r7, #12]
 8006508:	4b0b      	ldr	r3, [pc, #44]	; (8006538 <HAL_PCD_MspInit+0xa0>)
 800650a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800650c:	4a0a      	ldr	r2, [pc, #40]	; (8006538 <HAL_PCD_MspInit+0xa0>)
 800650e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006512:	6453      	str	r3, [r2, #68]	; 0x44
 8006514:	4b08      	ldr	r3, [pc, #32]	; (8006538 <HAL_PCD_MspInit+0xa0>)
 8006516:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006518:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800651c:	60fb      	str	r3, [r7, #12]
 800651e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006520:	2200      	movs	r2, #0
 8006522:	2100      	movs	r1, #0
 8006524:	2043      	movs	r0, #67	; 0x43
 8006526:	f7fb f938 	bl	800179a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800652a:	2043      	movs	r0, #67	; 0x43
 800652c:	f7fb f951 	bl	80017d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006530:	bf00      	nop
 8006532:	3728      	adds	r7, #40	; 0x28
 8006534:	46bd      	mov	sp, r7
 8006536:	bd80      	pop	{r7, pc}
 8006538:	40023800 	.word	0x40023800
 800653c:	40020000 	.word	0x40020000

08006540 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006540:	b580      	push	{r7, lr}
 8006542:	b082      	sub	sp, #8
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006554:	4619      	mov	r1, r3
 8006556:	4610      	mov	r0, r2
 8006558:	f7fe fe24 	bl	80051a4 <USBD_LL_SetupStage>
}
 800655c:	bf00      	nop
 800655e:	3708      	adds	r7, #8
 8006560:	46bd      	mov	sp, r7
 8006562:	bd80      	pop	{r7, pc}

08006564 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b082      	sub	sp, #8
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
 800656c:	460b      	mov	r3, r1
 800656e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8006576:	78fa      	ldrb	r2, [r7, #3]
 8006578:	6879      	ldr	r1, [r7, #4]
 800657a:	4613      	mov	r3, r2
 800657c:	00db      	lsls	r3, r3, #3
 800657e:	1a9b      	subs	r3, r3, r2
 8006580:	009b      	lsls	r3, r3, #2
 8006582:	440b      	add	r3, r1
 8006584:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006588:	681a      	ldr	r2, [r3, #0]
 800658a:	78fb      	ldrb	r3, [r7, #3]
 800658c:	4619      	mov	r1, r3
 800658e:	f7fe fe5c 	bl	800524a <USBD_LL_DataOutStage>
}
 8006592:	bf00      	nop
 8006594:	3708      	adds	r7, #8
 8006596:	46bd      	mov	sp, r7
 8006598:	bd80      	pop	{r7, pc}

0800659a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800659a:	b580      	push	{r7, lr}
 800659c:	b082      	sub	sp, #8
 800659e:	af00      	add	r7, sp, #0
 80065a0:	6078      	str	r0, [r7, #4]
 80065a2:	460b      	mov	r3, r1
 80065a4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80065ac:	78fa      	ldrb	r2, [r7, #3]
 80065ae:	6879      	ldr	r1, [r7, #4]
 80065b0:	4613      	mov	r3, r2
 80065b2:	00db      	lsls	r3, r3, #3
 80065b4:	1a9b      	subs	r3, r3, r2
 80065b6:	009b      	lsls	r3, r3, #2
 80065b8:	440b      	add	r3, r1
 80065ba:	3348      	adds	r3, #72	; 0x48
 80065bc:	681a      	ldr	r2, [r3, #0]
 80065be:	78fb      	ldrb	r3, [r7, #3]
 80065c0:	4619      	mov	r1, r3
 80065c2:	f7fe fea5 	bl	8005310 <USBD_LL_DataInStage>
}
 80065c6:	bf00      	nop
 80065c8:	3708      	adds	r7, #8
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bd80      	pop	{r7, pc}

080065ce <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80065ce:	b580      	push	{r7, lr}
 80065d0:	b082      	sub	sp, #8
 80065d2:	af00      	add	r7, sp, #0
 80065d4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80065dc:	4618      	mov	r0, r3
 80065de:	f7fe ffa9 	bl	8005534 <USBD_LL_SOF>
}
 80065e2:	bf00      	nop
 80065e4:	3708      	adds	r7, #8
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bd80      	pop	{r7, pc}

080065ea <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80065ea:	b580      	push	{r7, lr}
 80065ec:	b084      	sub	sp, #16
 80065ee:	af00      	add	r7, sp, #0
 80065f0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80065f2:	2301      	movs	r3, #1
 80065f4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	68db      	ldr	r3, [r3, #12]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d102      	bne.n	8006604 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80065fe:	2300      	movs	r3, #0
 8006600:	73fb      	strb	r3, [r7, #15]
 8006602:	e008      	b.n	8006616 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	68db      	ldr	r3, [r3, #12]
 8006608:	2b02      	cmp	r3, #2
 800660a:	d102      	bne.n	8006612 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800660c:	2301      	movs	r3, #1
 800660e:	73fb      	strb	r3, [r7, #15]
 8006610:	e001      	b.n	8006616 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8006612:	f7fa fe75 	bl	8001300 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800661c:	7bfa      	ldrb	r2, [r7, #15]
 800661e:	4611      	mov	r1, r2
 8006620:	4618      	mov	r0, r3
 8006622:	f7fe ff4c 	bl	80054be <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800662c:	4618      	mov	r0, r3
 800662e:	f7fe ff05 	bl	800543c <USBD_LL_Reset>
}
 8006632:	bf00      	nop
 8006634:	3710      	adds	r7, #16
 8006636:	46bd      	mov	sp, r7
 8006638:	bd80      	pop	{r7, pc}
	...

0800663c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800663c:	b580      	push	{r7, lr}
 800663e:	b082      	sub	sp, #8
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800664a:	4618      	mov	r0, r3
 800664c:	f7fe ff47 	bl	80054de <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	687a      	ldr	r2, [r7, #4]
 800665c:	6812      	ldr	r2, [r2, #0]
 800665e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006662:	f043 0301 	orr.w	r3, r3, #1
 8006666:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6a1b      	ldr	r3, [r3, #32]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d005      	beq.n	800667c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006670:	4b04      	ldr	r3, [pc, #16]	; (8006684 <HAL_PCD_SuspendCallback+0x48>)
 8006672:	691b      	ldr	r3, [r3, #16]
 8006674:	4a03      	ldr	r2, [pc, #12]	; (8006684 <HAL_PCD_SuspendCallback+0x48>)
 8006676:	f043 0306 	orr.w	r3, r3, #6
 800667a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800667c:	bf00      	nop
 800667e:	3708      	adds	r7, #8
 8006680:	46bd      	mov	sp, r7
 8006682:	bd80      	pop	{r7, pc}
 8006684:	e000ed00 	.word	0xe000ed00

08006688 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b082      	sub	sp, #8
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006696:	4618      	mov	r0, r3
 8006698:	f7fe ff36 	bl	8005508 <USBD_LL_Resume>
}
 800669c:	bf00      	nop
 800669e:	3708      	adds	r7, #8
 80066a0:	46bd      	mov	sp, r7
 80066a2:	bd80      	pop	{r7, pc}

080066a4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b082      	sub	sp, #8
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
 80066ac:	460b      	mov	r3, r1
 80066ae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80066b6:	78fa      	ldrb	r2, [r7, #3]
 80066b8:	4611      	mov	r1, r2
 80066ba:	4618      	mov	r0, r3
 80066bc:	f7fe ff61 	bl	8005582 <USBD_LL_IsoOUTIncomplete>
}
 80066c0:	bf00      	nop
 80066c2:	3708      	adds	r7, #8
 80066c4:	46bd      	mov	sp, r7
 80066c6:	bd80      	pop	{r7, pc}

080066c8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b082      	sub	sp, #8
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
 80066d0:	460b      	mov	r3, r1
 80066d2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80066da:	78fa      	ldrb	r2, [r7, #3]
 80066dc:	4611      	mov	r1, r2
 80066de:	4618      	mov	r0, r3
 80066e0:	f7fe ff42 	bl	8005568 <USBD_LL_IsoINIncomplete>
}
 80066e4:	bf00      	nop
 80066e6:	3708      	adds	r7, #8
 80066e8:	46bd      	mov	sp, r7
 80066ea:	bd80      	pop	{r7, pc}

080066ec <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b082      	sub	sp, #8
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80066fa:	4618      	mov	r0, r3
 80066fc:	f7fe ff4e 	bl	800559c <USBD_LL_DevConnected>
}
 8006700:	bf00      	nop
 8006702:	3708      	adds	r7, #8
 8006704:	46bd      	mov	sp, r7
 8006706:	bd80      	pop	{r7, pc}

08006708 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b082      	sub	sp, #8
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006716:	4618      	mov	r0, r3
 8006718:	f7fe ff4b 	bl	80055b2 <USBD_LL_DevDisconnected>
}
 800671c:	bf00      	nop
 800671e:	3708      	adds	r7, #8
 8006720:	46bd      	mov	sp, r7
 8006722:	bd80      	pop	{r7, pc}

08006724 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b082      	sub	sp, #8
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	781b      	ldrb	r3, [r3, #0]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d13c      	bne.n	80067ae <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8006734:	4a20      	ldr	r2, [pc, #128]	; (80067b8 <USBD_LL_Init+0x94>)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	4a1e      	ldr	r2, [pc, #120]	; (80067b8 <USBD_LL_Init+0x94>)
 8006740:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006744:	4b1c      	ldr	r3, [pc, #112]	; (80067b8 <USBD_LL_Init+0x94>)
 8006746:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800674a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800674c:	4b1a      	ldr	r3, [pc, #104]	; (80067b8 <USBD_LL_Init+0x94>)
 800674e:	2204      	movs	r2, #4
 8006750:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8006752:	4b19      	ldr	r3, [pc, #100]	; (80067b8 <USBD_LL_Init+0x94>)
 8006754:	2202      	movs	r2, #2
 8006756:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006758:	4b17      	ldr	r3, [pc, #92]	; (80067b8 <USBD_LL_Init+0x94>)
 800675a:	2200      	movs	r2, #0
 800675c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800675e:	4b16      	ldr	r3, [pc, #88]	; (80067b8 <USBD_LL_Init+0x94>)
 8006760:	2202      	movs	r2, #2
 8006762:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8006764:	4b14      	ldr	r3, [pc, #80]	; (80067b8 <USBD_LL_Init+0x94>)
 8006766:	2200      	movs	r2, #0
 8006768:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800676a:	4b13      	ldr	r3, [pc, #76]	; (80067b8 <USBD_LL_Init+0x94>)
 800676c:	2200      	movs	r2, #0
 800676e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8006770:	4b11      	ldr	r3, [pc, #68]	; (80067b8 <USBD_LL_Init+0x94>)
 8006772:	2200      	movs	r2, #0
 8006774:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8006776:	4b10      	ldr	r3, [pc, #64]	; (80067b8 <USBD_LL_Init+0x94>)
 8006778:	2200      	movs	r2, #0
 800677a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800677c:	4b0e      	ldr	r3, [pc, #56]	; (80067b8 <USBD_LL_Init+0x94>)
 800677e:	2200      	movs	r2, #0
 8006780:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8006782:	480d      	ldr	r0, [pc, #52]	; (80067b8 <USBD_LL_Init+0x94>)
 8006784:	f7fb f9da 	bl	8001b3c <HAL_PCD_Init>
 8006788:	4603      	mov	r3, r0
 800678a:	2b00      	cmp	r3, #0
 800678c:	d001      	beq.n	8006792 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800678e:	f7fa fdb7 	bl	8001300 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8006792:	2180      	movs	r1, #128	; 0x80
 8006794:	4808      	ldr	r0, [pc, #32]	; (80067b8 <USBD_LL_Init+0x94>)
 8006796:	f7fc fb20 	bl	8002dda <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800679a:	2240      	movs	r2, #64	; 0x40
 800679c:	2100      	movs	r1, #0
 800679e:	4806      	ldr	r0, [pc, #24]	; (80067b8 <USBD_LL_Init+0x94>)
 80067a0:	f7fc fad4 	bl	8002d4c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80067a4:	2280      	movs	r2, #128	; 0x80
 80067a6:	2101      	movs	r1, #1
 80067a8:	4803      	ldr	r0, [pc, #12]	; (80067b8 <USBD_LL_Init+0x94>)
 80067aa:	f7fc facf 	bl	8002d4c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80067ae:	2300      	movs	r3, #0
}
 80067b0:	4618      	mov	r0, r3
 80067b2:	3708      	adds	r7, #8
 80067b4:	46bd      	mov	sp, r7
 80067b6:	bd80      	pop	{r7, pc}
 80067b8:	200006c8 	.word	0x200006c8

080067bc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b084      	sub	sp, #16
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80067c4:	2300      	movs	r3, #0
 80067c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80067c8:	2300      	movs	r3, #0
 80067ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80067d2:	4618      	mov	r0, r3
 80067d4:	f7fb facf 	bl	8001d76 <HAL_PCD_Start>
 80067d8:	4603      	mov	r3, r0
 80067da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80067dc:	7bfb      	ldrb	r3, [r7, #15]
 80067de:	4618      	mov	r0, r3
 80067e0:	f000 f918 	bl	8006a14 <USBD_Get_USB_Status>
 80067e4:	4603      	mov	r3, r0
 80067e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80067e8:	7bbb      	ldrb	r3, [r7, #14]
}
 80067ea:	4618      	mov	r0, r3
 80067ec:	3710      	adds	r7, #16
 80067ee:	46bd      	mov	sp, r7
 80067f0:	bd80      	pop	{r7, pc}

080067f2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80067f2:	b580      	push	{r7, lr}
 80067f4:	b084      	sub	sp, #16
 80067f6:	af00      	add	r7, sp, #0
 80067f8:	6078      	str	r0, [r7, #4]
 80067fa:	4608      	mov	r0, r1
 80067fc:	4611      	mov	r1, r2
 80067fe:	461a      	mov	r2, r3
 8006800:	4603      	mov	r3, r0
 8006802:	70fb      	strb	r3, [r7, #3]
 8006804:	460b      	mov	r3, r1
 8006806:	70bb      	strb	r3, [r7, #2]
 8006808:	4613      	mov	r3, r2
 800680a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800680c:	2300      	movs	r3, #0
 800680e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006810:	2300      	movs	r3, #0
 8006812:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800681a:	78bb      	ldrb	r3, [r7, #2]
 800681c:	883a      	ldrh	r2, [r7, #0]
 800681e:	78f9      	ldrb	r1, [r7, #3]
 8006820:	f7fb feb3 	bl	800258a <HAL_PCD_EP_Open>
 8006824:	4603      	mov	r3, r0
 8006826:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006828:	7bfb      	ldrb	r3, [r7, #15]
 800682a:	4618      	mov	r0, r3
 800682c:	f000 f8f2 	bl	8006a14 <USBD_Get_USB_Status>
 8006830:	4603      	mov	r3, r0
 8006832:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006834:	7bbb      	ldrb	r3, [r7, #14]
}
 8006836:	4618      	mov	r0, r3
 8006838:	3710      	adds	r7, #16
 800683a:	46bd      	mov	sp, r7
 800683c:	bd80      	pop	{r7, pc}

0800683e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800683e:	b580      	push	{r7, lr}
 8006840:	b084      	sub	sp, #16
 8006842:	af00      	add	r7, sp, #0
 8006844:	6078      	str	r0, [r7, #4]
 8006846:	460b      	mov	r3, r1
 8006848:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800684a:	2300      	movs	r3, #0
 800684c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800684e:	2300      	movs	r3, #0
 8006850:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006858:	78fa      	ldrb	r2, [r7, #3]
 800685a:	4611      	mov	r1, r2
 800685c:	4618      	mov	r0, r3
 800685e:	f7fb fefc 	bl	800265a <HAL_PCD_EP_Close>
 8006862:	4603      	mov	r3, r0
 8006864:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006866:	7bfb      	ldrb	r3, [r7, #15]
 8006868:	4618      	mov	r0, r3
 800686a:	f000 f8d3 	bl	8006a14 <USBD_Get_USB_Status>
 800686e:	4603      	mov	r3, r0
 8006870:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006872:	7bbb      	ldrb	r3, [r7, #14]
}
 8006874:	4618      	mov	r0, r3
 8006876:	3710      	adds	r7, #16
 8006878:	46bd      	mov	sp, r7
 800687a:	bd80      	pop	{r7, pc}

0800687c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b084      	sub	sp, #16
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
 8006884:	460b      	mov	r3, r1
 8006886:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006888:	2300      	movs	r3, #0
 800688a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800688c:	2300      	movs	r3, #0
 800688e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006896:	78fa      	ldrb	r2, [r7, #3]
 8006898:	4611      	mov	r1, r2
 800689a:	4618      	mov	r0, r3
 800689c:	f7fb ffbc 	bl	8002818 <HAL_PCD_EP_SetStall>
 80068a0:	4603      	mov	r3, r0
 80068a2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80068a4:	7bfb      	ldrb	r3, [r7, #15]
 80068a6:	4618      	mov	r0, r3
 80068a8:	f000 f8b4 	bl	8006a14 <USBD_Get_USB_Status>
 80068ac:	4603      	mov	r3, r0
 80068ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80068b0:	7bbb      	ldrb	r3, [r7, #14]
}
 80068b2:	4618      	mov	r0, r3
 80068b4:	3710      	adds	r7, #16
 80068b6:	46bd      	mov	sp, r7
 80068b8:	bd80      	pop	{r7, pc}

080068ba <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80068ba:	b580      	push	{r7, lr}
 80068bc:	b084      	sub	sp, #16
 80068be:	af00      	add	r7, sp, #0
 80068c0:	6078      	str	r0, [r7, #4]
 80068c2:	460b      	mov	r3, r1
 80068c4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80068c6:	2300      	movs	r3, #0
 80068c8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80068ca:	2300      	movs	r3, #0
 80068cc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80068d4:	78fa      	ldrb	r2, [r7, #3]
 80068d6:	4611      	mov	r1, r2
 80068d8:	4618      	mov	r0, r3
 80068da:	f7fc f801 	bl	80028e0 <HAL_PCD_EP_ClrStall>
 80068de:	4603      	mov	r3, r0
 80068e0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80068e2:	7bfb      	ldrb	r3, [r7, #15]
 80068e4:	4618      	mov	r0, r3
 80068e6:	f000 f895 	bl	8006a14 <USBD_Get_USB_Status>
 80068ea:	4603      	mov	r3, r0
 80068ec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80068ee:	7bbb      	ldrb	r3, [r7, #14]
}
 80068f0:	4618      	mov	r0, r3
 80068f2:	3710      	adds	r7, #16
 80068f4:	46bd      	mov	sp, r7
 80068f6:	bd80      	pop	{r7, pc}

080068f8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80068f8:	b480      	push	{r7}
 80068fa:	b085      	sub	sp, #20
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
 8006900:	460b      	mov	r3, r1
 8006902:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800690a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800690c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006910:	2b00      	cmp	r3, #0
 8006912:	da0b      	bge.n	800692c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006914:	78fb      	ldrb	r3, [r7, #3]
 8006916:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800691a:	68f9      	ldr	r1, [r7, #12]
 800691c:	4613      	mov	r3, r2
 800691e:	00db      	lsls	r3, r3, #3
 8006920:	1a9b      	subs	r3, r3, r2
 8006922:	009b      	lsls	r3, r3, #2
 8006924:	440b      	add	r3, r1
 8006926:	333e      	adds	r3, #62	; 0x3e
 8006928:	781b      	ldrb	r3, [r3, #0]
 800692a:	e00b      	b.n	8006944 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800692c:	78fb      	ldrb	r3, [r7, #3]
 800692e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006932:	68f9      	ldr	r1, [r7, #12]
 8006934:	4613      	mov	r3, r2
 8006936:	00db      	lsls	r3, r3, #3
 8006938:	1a9b      	subs	r3, r3, r2
 800693a:	009b      	lsls	r3, r3, #2
 800693c:	440b      	add	r3, r1
 800693e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006942:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006944:	4618      	mov	r0, r3
 8006946:	3714      	adds	r7, #20
 8006948:	46bd      	mov	sp, r7
 800694a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694e:	4770      	bx	lr

08006950 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b084      	sub	sp, #16
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
 8006958:	460b      	mov	r3, r1
 800695a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800695c:	2300      	movs	r3, #0
 800695e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006960:	2300      	movs	r3, #0
 8006962:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800696a:	78fa      	ldrb	r2, [r7, #3]
 800696c:	4611      	mov	r1, r2
 800696e:	4618      	mov	r0, r3
 8006970:	f7fb fde6 	bl	8002540 <HAL_PCD_SetAddress>
 8006974:	4603      	mov	r3, r0
 8006976:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006978:	7bfb      	ldrb	r3, [r7, #15]
 800697a:	4618      	mov	r0, r3
 800697c:	f000 f84a 	bl	8006a14 <USBD_Get_USB_Status>
 8006980:	4603      	mov	r3, r0
 8006982:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006984:	7bbb      	ldrb	r3, [r7, #14]
}
 8006986:	4618      	mov	r0, r3
 8006988:	3710      	adds	r7, #16
 800698a:	46bd      	mov	sp, r7
 800698c:	bd80      	pop	{r7, pc}

0800698e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800698e:	b580      	push	{r7, lr}
 8006990:	b086      	sub	sp, #24
 8006992:	af00      	add	r7, sp, #0
 8006994:	60f8      	str	r0, [r7, #12]
 8006996:	607a      	str	r2, [r7, #4]
 8006998:	603b      	str	r3, [r7, #0]
 800699a:	460b      	mov	r3, r1
 800699c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800699e:	2300      	movs	r3, #0
 80069a0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80069a2:	2300      	movs	r3, #0
 80069a4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80069ac:	7af9      	ldrb	r1, [r7, #11]
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	687a      	ldr	r2, [r7, #4]
 80069b2:	f7fb fee7 	bl	8002784 <HAL_PCD_EP_Transmit>
 80069b6:	4603      	mov	r3, r0
 80069b8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80069ba:	7dfb      	ldrb	r3, [r7, #23]
 80069bc:	4618      	mov	r0, r3
 80069be:	f000 f829 	bl	8006a14 <USBD_Get_USB_Status>
 80069c2:	4603      	mov	r3, r0
 80069c4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80069c6:	7dbb      	ldrb	r3, [r7, #22]
}
 80069c8:	4618      	mov	r0, r3
 80069ca:	3718      	adds	r7, #24
 80069cc:	46bd      	mov	sp, r7
 80069ce:	bd80      	pop	{r7, pc}

080069d0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b086      	sub	sp, #24
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	60f8      	str	r0, [r7, #12]
 80069d8:	607a      	str	r2, [r7, #4]
 80069da:	603b      	str	r3, [r7, #0]
 80069dc:	460b      	mov	r3, r1
 80069de:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80069e0:	2300      	movs	r3, #0
 80069e2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80069e4:	2300      	movs	r3, #0
 80069e6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80069ee:	7af9      	ldrb	r1, [r7, #11]
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	687a      	ldr	r2, [r7, #4]
 80069f4:	f7fb fe7b 	bl	80026ee <HAL_PCD_EP_Receive>
 80069f8:	4603      	mov	r3, r0
 80069fa:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80069fc:	7dfb      	ldrb	r3, [r7, #23]
 80069fe:	4618      	mov	r0, r3
 8006a00:	f000 f808 	bl	8006a14 <USBD_Get_USB_Status>
 8006a04:	4603      	mov	r3, r0
 8006a06:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006a08:	7dbb      	ldrb	r3, [r7, #22]
}
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	3718      	adds	r7, #24
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	bd80      	pop	{r7, pc}
	...

08006a14 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006a14:	b480      	push	{r7}
 8006a16:	b085      	sub	sp, #20
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	4603      	mov	r3, r0
 8006a1c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006a1e:	2300      	movs	r3, #0
 8006a20:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006a22:	79fb      	ldrb	r3, [r7, #7]
 8006a24:	2b03      	cmp	r3, #3
 8006a26:	d817      	bhi.n	8006a58 <USBD_Get_USB_Status+0x44>
 8006a28:	a201      	add	r2, pc, #4	; (adr r2, 8006a30 <USBD_Get_USB_Status+0x1c>)
 8006a2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a2e:	bf00      	nop
 8006a30:	08006a41 	.word	0x08006a41
 8006a34:	08006a47 	.word	0x08006a47
 8006a38:	08006a4d 	.word	0x08006a4d
 8006a3c:	08006a53 	.word	0x08006a53
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8006a40:	2300      	movs	r3, #0
 8006a42:	73fb      	strb	r3, [r7, #15]
    break;
 8006a44:	e00b      	b.n	8006a5e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006a46:	2303      	movs	r3, #3
 8006a48:	73fb      	strb	r3, [r7, #15]
    break;
 8006a4a:	e008      	b.n	8006a5e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006a4c:	2301      	movs	r3, #1
 8006a4e:	73fb      	strb	r3, [r7, #15]
    break;
 8006a50:	e005      	b.n	8006a5e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006a52:	2303      	movs	r3, #3
 8006a54:	73fb      	strb	r3, [r7, #15]
    break;
 8006a56:	e002      	b.n	8006a5e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8006a58:	2303      	movs	r3, #3
 8006a5a:	73fb      	strb	r3, [r7, #15]
    break;
 8006a5c:	bf00      	nop
  }
  return usb_status;
 8006a5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a60:	4618      	mov	r0, r3
 8006a62:	3714      	adds	r7, #20
 8006a64:	46bd      	mov	sp, r7
 8006a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6a:	4770      	bx	lr

08006a6c <__errno>:
 8006a6c:	4b01      	ldr	r3, [pc, #4]	; (8006a74 <__errno+0x8>)
 8006a6e:	6818      	ldr	r0, [r3, #0]
 8006a70:	4770      	bx	lr
 8006a72:	bf00      	nop
 8006a74:	20000158 	.word	0x20000158

08006a78 <__libc_init_array>:
 8006a78:	b570      	push	{r4, r5, r6, lr}
 8006a7a:	4e0d      	ldr	r6, [pc, #52]	; (8006ab0 <__libc_init_array+0x38>)
 8006a7c:	4c0d      	ldr	r4, [pc, #52]	; (8006ab4 <__libc_init_array+0x3c>)
 8006a7e:	1ba4      	subs	r4, r4, r6
 8006a80:	10a4      	asrs	r4, r4, #2
 8006a82:	2500      	movs	r5, #0
 8006a84:	42a5      	cmp	r5, r4
 8006a86:	d109      	bne.n	8006a9c <__libc_init_array+0x24>
 8006a88:	4e0b      	ldr	r6, [pc, #44]	; (8006ab8 <__libc_init_array+0x40>)
 8006a8a:	4c0c      	ldr	r4, [pc, #48]	; (8006abc <__libc_init_array+0x44>)
 8006a8c:	f000 f8ea 	bl	8006c64 <_init>
 8006a90:	1ba4      	subs	r4, r4, r6
 8006a92:	10a4      	asrs	r4, r4, #2
 8006a94:	2500      	movs	r5, #0
 8006a96:	42a5      	cmp	r5, r4
 8006a98:	d105      	bne.n	8006aa6 <__libc_init_array+0x2e>
 8006a9a:	bd70      	pop	{r4, r5, r6, pc}
 8006a9c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006aa0:	4798      	blx	r3
 8006aa2:	3501      	adds	r5, #1
 8006aa4:	e7ee      	b.n	8006a84 <__libc_init_array+0xc>
 8006aa6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006aaa:	4798      	blx	r3
 8006aac:	3501      	adds	r5, #1
 8006aae:	e7f2      	b.n	8006a96 <__libc_init_array+0x1e>
 8006ab0:	08006d04 	.word	0x08006d04
 8006ab4:	08006d04 	.word	0x08006d04
 8006ab8:	08006d04 	.word	0x08006d04
 8006abc:	08006d08 	.word	0x08006d08

08006ac0 <malloc>:
 8006ac0:	4b02      	ldr	r3, [pc, #8]	; (8006acc <malloc+0xc>)
 8006ac2:	4601      	mov	r1, r0
 8006ac4:	6818      	ldr	r0, [r3, #0]
 8006ac6:	f000 b861 	b.w	8006b8c <_malloc_r>
 8006aca:	bf00      	nop
 8006acc:	20000158 	.word	0x20000158

08006ad0 <free>:
 8006ad0:	4b02      	ldr	r3, [pc, #8]	; (8006adc <free+0xc>)
 8006ad2:	4601      	mov	r1, r0
 8006ad4:	6818      	ldr	r0, [r3, #0]
 8006ad6:	f000 b80b 	b.w	8006af0 <_free_r>
 8006ada:	bf00      	nop
 8006adc:	20000158 	.word	0x20000158

08006ae0 <memset>:
 8006ae0:	4402      	add	r2, r0
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	d100      	bne.n	8006aea <memset+0xa>
 8006ae8:	4770      	bx	lr
 8006aea:	f803 1b01 	strb.w	r1, [r3], #1
 8006aee:	e7f9      	b.n	8006ae4 <memset+0x4>

08006af0 <_free_r>:
 8006af0:	b538      	push	{r3, r4, r5, lr}
 8006af2:	4605      	mov	r5, r0
 8006af4:	2900      	cmp	r1, #0
 8006af6:	d045      	beq.n	8006b84 <_free_r+0x94>
 8006af8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006afc:	1f0c      	subs	r4, r1, #4
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	bfb8      	it	lt
 8006b02:	18e4      	addlt	r4, r4, r3
 8006b04:	f000 f8ac 	bl	8006c60 <__malloc_lock>
 8006b08:	4a1f      	ldr	r2, [pc, #124]	; (8006b88 <_free_r+0x98>)
 8006b0a:	6813      	ldr	r3, [r2, #0]
 8006b0c:	4610      	mov	r0, r2
 8006b0e:	b933      	cbnz	r3, 8006b1e <_free_r+0x2e>
 8006b10:	6063      	str	r3, [r4, #4]
 8006b12:	6014      	str	r4, [r2, #0]
 8006b14:	4628      	mov	r0, r5
 8006b16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006b1a:	f000 b8a2 	b.w	8006c62 <__malloc_unlock>
 8006b1e:	42a3      	cmp	r3, r4
 8006b20:	d90c      	bls.n	8006b3c <_free_r+0x4c>
 8006b22:	6821      	ldr	r1, [r4, #0]
 8006b24:	1862      	adds	r2, r4, r1
 8006b26:	4293      	cmp	r3, r2
 8006b28:	bf04      	itt	eq
 8006b2a:	681a      	ldreq	r2, [r3, #0]
 8006b2c:	685b      	ldreq	r3, [r3, #4]
 8006b2e:	6063      	str	r3, [r4, #4]
 8006b30:	bf04      	itt	eq
 8006b32:	1852      	addeq	r2, r2, r1
 8006b34:	6022      	streq	r2, [r4, #0]
 8006b36:	6004      	str	r4, [r0, #0]
 8006b38:	e7ec      	b.n	8006b14 <_free_r+0x24>
 8006b3a:	4613      	mov	r3, r2
 8006b3c:	685a      	ldr	r2, [r3, #4]
 8006b3e:	b10a      	cbz	r2, 8006b44 <_free_r+0x54>
 8006b40:	42a2      	cmp	r2, r4
 8006b42:	d9fa      	bls.n	8006b3a <_free_r+0x4a>
 8006b44:	6819      	ldr	r1, [r3, #0]
 8006b46:	1858      	adds	r0, r3, r1
 8006b48:	42a0      	cmp	r0, r4
 8006b4a:	d10b      	bne.n	8006b64 <_free_r+0x74>
 8006b4c:	6820      	ldr	r0, [r4, #0]
 8006b4e:	4401      	add	r1, r0
 8006b50:	1858      	adds	r0, r3, r1
 8006b52:	4282      	cmp	r2, r0
 8006b54:	6019      	str	r1, [r3, #0]
 8006b56:	d1dd      	bne.n	8006b14 <_free_r+0x24>
 8006b58:	6810      	ldr	r0, [r2, #0]
 8006b5a:	6852      	ldr	r2, [r2, #4]
 8006b5c:	605a      	str	r2, [r3, #4]
 8006b5e:	4401      	add	r1, r0
 8006b60:	6019      	str	r1, [r3, #0]
 8006b62:	e7d7      	b.n	8006b14 <_free_r+0x24>
 8006b64:	d902      	bls.n	8006b6c <_free_r+0x7c>
 8006b66:	230c      	movs	r3, #12
 8006b68:	602b      	str	r3, [r5, #0]
 8006b6a:	e7d3      	b.n	8006b14 <_free_r+0x24>
 8006b6c:	6820      	ldr	r0, [r4, #0]
 8006b6e:	1821      	adds	r1, r4, r0
 8006b70:	428a      	cmp	r2, r1
 8006b72:	bf04      	itt	eq
 8006b74:	6811      	ldreq	r1, [r2, #0]
 8006b76:	6852      	ldreq	r2, [r2, #4]
 8006b78:	6062      	str	r2, [r4, #4]
 8006b7a:	bf04      	itt	eq
 8006b7c:	1809      	addeq	r1, r1, r0
 8006b7e:	6021      	streq	r1, [r4, #0]
 8006b80:	605c      	str	r4, [r3, #4]
 8006b82:	e7c7      	b.n	8006b14 <_free_r+0x24>
 8006b84:	bd38      	pop	{r3, r4, r5, pc}
 8006b86:	bf00      	nop
 8006b88:	200001ec 	.word	0x200001ec

08006b8c <_malloc_r>:
 8006b8c:	b570      	push	{r4, r5, r6, lr}
 8006b8e:	1ccd      	adds	r5, r1, #3
 8006b90:	f025 0503 	bic.w	r5, r5, #3
 8006b94:	3508      	adds	r5, #8
 8006b96:	2d0c      	cmp	r5, #12
 8006b98:	bf38      	it	cc
 8006b9a:	250c      	movcc	r5, #12
 8006b9c:	2d00      	cmp	r5, #0
 8006b9e:	4606      	mov	r6, r0
 8006ba0:	db01      	blt.n	8006ba6 <_malloc_r+0x1a>
 8006ba2:	42a9      	cmp	r1, r5
 8006ba4:	d903      	bls.n	8006bae <_malloc_r+0x22>
 8006ba6:	230c      	movs	r3, #12
 8006ba8:	6033      	str	r3, [r6, #0]
 8006baa:	2000      	movs	r0, #0
 8006bac:	bd70      	pop	{r4, r5, r6, pc}
 8006bae:	f000 f857 	bl	8006c60 <__malloc_lock>
 8006bb2:	4a21      	ldr	r2, [pc, #132]	; (8006c38 <_malloc_r+0xac>)
 8006bb4:	6814      	ldr	r4, [r2, #0]
 8006bb6:	4621      	mov	r1, r4
 8006bb8:	b991      	cbnz	r1, 8006be0 <_malloc_r+0x54>
 8006bba:	4c20      	ldr	r4, [pc, #128]	; (8006c3c <_malloc_r+0xb0>)
 8006bbc:	6823      	ldr	r3, [r4, #0]
 8006bbe:	b91b      	cbnz	r3, 8006bc8 <_malloc_r+0x3c>
 8006bc0:	4630      	mov	r0, r6
 8006bc2:	f000 f83d 	bl	8006c40 <_sbrk_r>
 8006bc6:	6020      	str	r0, [r4, #0]
 8006bc8:	4629      	mov	r1, r5
 8006bca:	4630      	mov	r0, r6
 8006bcc:	f000 f838 	bl	8006c40 <_sbrk_r>
 8006bd0:	1c43      	adds	r3, r0, #1
 8006bd2:	d124      	bne.n	8006c1e <_malloc_r+0x92>
 8006bd4:	230c      	movs	r3, #12
 8006bd6:	6033      	str	r3, [r6, #0]
 8006bd8:	4630      	mov	r0, r6
 8006bda:	f000 f842 	bl	8006c62 <__malloc_unlock>
 8006bde:	e7e4      	b.n	8006baa <_malloc_r+0x1e>
 8006be0:	680b      	ldr	r3, [r1, #0]
 8006be2:	1b5b      	subs	r3, r3, r5
 8006be4:	d418      	bmi.n	8006c18 <_malloc_r+0x8c>
 8006be6:	2b0b      	cmp	r3, #11
 8006be8:	d90f      	bls.n	8006c0a <_malloc_r+0x7e>
 8006bea:	600b      	str	r3, [r1, #0]
 8006bec:	50cd      	str	r5, [r1, r3]
 8006bee:	18cc      	adds	r4, r1, r3
 8006bf0:	4630      	mov	r0, r6
 8006bf2:	f000 f836 	bl	8006c62 <__malloc_unlock>
 8006bf6:	f104 000b 	add.w	r0, r4, #11
 8006bfa:	1d23      	adds	r3, r4, #4
 8006bfc:	f020 0007 	bic.w	r0, r0, #7
 8006c00:	1ac3      	subs	r3, r0, r3
 8006c02:	d0d3      	beq.n	8006bac <_malloc_r+0x20>
 8006c04:	425a      	negs	r2, r3
 8006c06:	50e2      	str	r2, [r4, r3]
 8006c08:	e7d0      	b.n	8006bac <_malloc_r+0x20>
 8006c0a:	428c      	cmp	r4, r1
 8006c0c:	684b      	ldr	r3, [r1, #4]
 8006c0e:	bf16      	itet	ne
 8006c10:	6063      	strne	r3, [r4, #4]
 8006c12:	6013      	streq	r3, [r2, #0]
 8006c14:	460c      	movne	r4, r1
 8006c16:	e7eb      	b.n	8006bf0 <_malloc_r+0x64>
 8006c18:	460c      	mov	r4, r1
 8006c1a:	6849      	ldr	r1, [r1, #4]
 8006c1c:	e7cc      	b.n	8006bb8 <_malloc_r+0x2c>
 8006c1e:	1cc4      	adds	r4, r0, #3
 8006c20:	f024 0403 	bic.w	r4, r4, #3
 8006c24:	42a0      	cmp	r0, r4
 8006c26:	d005      	beq.n	8006c34 <_malloc_r+0xa8>
 8006c28:	1a21      	subs	r1, r4, r0
 8006c2a:	4630      	mov	r0, r6
 8006c2c:	f000 f808 	bl	8006c40 <_sbrk_r>
 8006c30:	3001      	adds	r0, #1
 8006c32:	d0cf      	beq.n	8006bd4 <_malloc_r+0x48>
 8006c34:	6025      	str	r5, [r4, #0]
 8006c36:	e7db      	b.n	8006bf0 <_malloc_r+0x64>
 8006c38:	200001ec 	.word	0x200001ec
 8006c3c:	200001f0 	.word	0x200001f0

08006c40 <_sbrk_r>:
 8006c40:	b538      	push	{r3, r4, r5, lr}
 8006c42:	4c06      	ldr	r4, [pc, #24]	; (8006c5c <_sbrk_r+0x1c>)
 8006c44:	2300      	movs	r3, #0
 8006c46:	4605      	mov	r5, r0
 8006c48:	4608      	mov	r0, r1
 8006c4a:	6023      	str	r3, [r4, #0]
 8006c4c:	f7fa fbc0 	bl	80013d0 <_sbrk>
 8006c50:	1c43      	adds	r3, r0, #1
 8006c52:	d102      	bne.n	8006c5a <_sbrk_r+0x1a>
 8006c54:	6823      	ldr	r3, [r4, #0]
 8006c56:	b103      	cbz	r3, 8006c5a <_sbrk_r+0x1a>
 8006c58:	602b      	str	r3, [r5, #0]
 8006c5a:	bd38      	pop	{r3, r4, r5, pc}
 8006c5c:	20000ad0 	.word	0x20000ad0

08006c60 <__malloc_lock>:
 8006c60:	4770      	bx	lr

08006c62 <__malloc_unlock>:
 8006c62:	4770      	bx	lr

08006c64 <_init>:
 8006c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c66:	bf00      	nop
 8006c68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c6a:	bc08      	pop	{r3}
 8006c6c:	469e      	mov	lr, r3
 8006c6e:	4770      	bx	lr

08006c70 <_fini>:
 8006c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c72:	bf00      	nop
 8006c74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c76:	bc08      	pop	{r3}
 8006c78:	469e      	mov	lr, r3
 8006c7a:	4770      	bx	lr
